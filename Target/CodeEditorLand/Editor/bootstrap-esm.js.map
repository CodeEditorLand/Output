{
  "version": 3,
  "sources": ["../../../../../Dependency/Land/Dependency/Editor/Source/bootstrap-esm.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { fileURLToPath } from 'url';\nimport { createRequire, register } from 'node:module';\nimport { product, pkg } from './bootstrap-meta.js';\nimport './bootstrap-node.js';\nimport * as performance from './vs/base/common/performance.js';\nimport { INLSConfiguration } from './vs/nls.js';\n\nconst require = createRequire(import.meta.url);\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// Install a hook to module resolution to map 'fs' to 'original-fs'\nif (process.env['ELECTRON_RUN_AS_NODE'] || process.versions['electron']) {\n\tconst jsCode = `\n\texport async function resolve(specifier, context, nextResolve) {\n\t\tif (specifier === 'fs') {\n\t\t\treturn {\n\t\t\t\tformat: 'builtin',\n\t\t\t\tshortCircuit: true,\n\t\t\t\turl: 'node:original-fs'\n\t\t\t};\n\t\t}\n\n\t\t// Defer to the next hook in the chain, which would be the\n\t\t// Node.js default resolve if this is the last user-specified loader.\n\t\treturn nextResolve(specifier, context);\n\t}`;\n\tregister(`data:text/javascript;base64,${Buffer.from(jsCode).toString('base64')}`, import.meta.url);\n}\n\n// Prepare globals that are needed for running\nglobalThis._VSCODE_PRODUCT_JSON = { ...product };\nif (process.env['VSCODE_DEV']) {\n\ttry {\n\t\tconst overrides = require('../product.overrides.json');\n\t\tglobalThis._VSCODE_PRODUCT_JSON = Object.assign(globalThis._VSCODE_PRODUCT_JSON, overrides);\n\t} catch (error) { /* ignore */ }\n}\nglobalThis._VSCODE_PACKAGE_JSON = { ...pkg };\nglobalThis._VSCODE_FILE_ROOT = __dirname;\n\n//#region NLS helpers\n\nlet setupNLSResult: Promise<INLSConfiguration | undefined> | undefined = undefined;\n\nfunction setupNLS(): Promise<INLSConfiguration | undefined> {\n\tif (!setupNLSResult) {\n\t\tsetupNLSResult = doSetupNLS();\n\t}\n\n\treturn setupNLSResult;\n}\n\nasync function doSetupNLS(): Promise<INLSConfiguration | undefined> {\n\tperformance.mark('code/willLoadNls');\n\n\tlet nlsConfig: INLSConfiguration | undefined = undefined;\n\n\tlet messagesFile: string | undefined;\n\tif (process.env['VSCODE_NLS_CONFIG']) {\n\t\ttry {\n\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\tif (nlsConfig?.languagePack?.messagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.languagePack.messagesFile;\n\t\t\t} else if (nlsConfig?.defaultMessagesFile) {\n\t\t\t\tmessagesFile = nlsConfig.defaultMessagesFile;\n\t\t\t}\n\n\t\t\tglobalThis._VSCODE_NLS_LANGUAGE = nlsConfig?.resolvedLanguage;\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error reading VSCODE_NLS_CONFIG from environment: ${e}`);\n\t\t}\n\t}\n\n\tif (\n\t\tprocess.env['VSCODE_DEV'] ||\t// no NLS support in dev mode\n\t\t!messagesFile\t\t\t\t\t// no NLS messages file\n\t) {\n\t\treturn undefined;\n\t}\n\n\ttry {\n\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(messagesFile)).toString());\n\t} catch (error) {\n\t\tconsole.error(`Error reading NLS messages file ${messagesFile}: ${error}`);\n\n\t\t// Mark as corrupt: this will re-create the language pack cache next startup\n\t\tif (nlsConfig?.languagePack?.corruptMarkerFile) {\n\t\t\ttry {\n\t\t\t\tawait fs.promises.writeFile(nlsConfig.languagePack.corruptMarkerFile, 'corrupted');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error writing corrupted NLS marker file: ${error}`);\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to the default message file to ensure english translation at least\n\t\tif (nlsConfig?.defaultMessagesFile && nlsConfig.defaultMessagesFile !== messagesFile) {\n\t\t\ttry {\n\t\t\t\tglobalThis._VSCODE_NLS_MESSAGES = JSON.parse((await fs.promises.readFile(nlsConfig.defaultMessagesFile)).toString());\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error reading default NLS messages file ${nlsConfig.defaultMessagesFile}: ${error}`);\n\t\t\t}\n\t\t}\n\t}\n\n\tperformance.mark('code/didLoadNls');\n\n\treturn nlsConfig;\n}\n\n//#endregion\n\nexport async function bootstrapESM(): Promise<void> {\n\n\t// NLS\n\tawait setupNLS();\n}\n"],
  "mappings": ";;AAKA,YAAY,UAAU;AACtB,YAAY,QAAQ;AACpB,SAAS,qBAAqB;AAC9B,SAAS,eAAe,gBAAgB;AACxC,SAAS,SAAS,WAAW;AAC7B,OAAO;AACP,YAAY,iBAAiB;AAC7B,SAAS,yBAAyB;AAElC,MAAMA,WAAU,cAAc,YAAY,GAAG;AAC7C,MAAM,YAAY,KAAK,QAAQ,cAAc,YAAY,GAAG,CAAC;AAG7D,IAAI,QAAQ,IAAI,sBAAsB,KAAK,QAAQ,SAAS,UAAU,GAAG;AACxE,QAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcf,WAAS,+BAA+B,OAAO,KAAK,MAAM,EAAE,SAAS,QAAQ,CAAC,IAAI,YAAY,GAAG;AAClG;AAGA,WAAW,uBAAuB,EAAE,GAAG,QAAQ;AAC/C,IAAI,QAAQ,IAAI,YAAY,GAAG;AAC9B,MAAI;AACH,UAAM,YAAYA,SAAQ,2BAA2B;AACrD,eAAW,uBAAuB,OAAO,OAAO,WAAW,sBAAsB,SAAS;AAAA,EAC3F,SAAS,OAAO;AAAA,EAAe;AAChC;AACA,WAAW,uBAAuB,EAAE,GAAG,IAAI;AAC3C,WAAW,oBAAoB;AAI/B,IAAI,iBAAqE;AAEzE,SAAS,WAAmD;AAC3D,MAAI,CAAC,gBAAgB;AACpB,qBAAiB,WAAW;AAAA,EAC7B;AAEA,SAAO;AACR;AANS;AAQT,eAAe,aAAqD;AACnE,cAAY,KAAK,kBAAkB;AAEnC,MAAI,YAA2C;AAE/C,MAAI;AACJ,MAAI,QAAQ,IAAI,mBAAmB,GAAG;AACrC,QAAI;AACH,kBAAY,KAAK,MAAM,QAAQ,IAAI,mBAAmB,CAAC;AACvD,UAAI,WAAW,cAAc,cAAc;AAC1C,uBAAe,UAAU,aAAa;AAAA,MACvC,WAAW,WAAW,qBAAqB;AAC1C,uBAAe,UAAU;AAAA,MAC1B;AAEA,iBAAW,uBAAuB,WAAW;AAAA,IAC9C,SAAS,GAAG;AACX,cAAQ,MAAM,qDAAqD,CAAC,EAAE;AAAA,IACvE;AAAA,EACD;AAEA,MACC,QAAQ,IAAI,YAAY;AAAA,EACxB,CAAC,cACA;AACD,WAAO;AAAA,EACR;AAEA,MAAI;AACH,eAAW,uBAAuB,KAAK,OAAO,MAAM,GAAG,SAAS,SAAS,YAAY,GAAG,SAAS,CAAC;AAAA,EACnG,SAAS,OAAO;AACf,YAAQ,MAAM,mCAAmC,YAAY,KAAK,KAAK,EAAE;AAGzE,QAAI,WAAW,cAAc,mBAAmB;AAC/C,UAAI;AACH,cAAM,GAAG,SAAS,UAAU,UAAU,aAAa,mBAAmB,WAAW;AAAA,MAClF,SAASC,QAAO;AACf,gBAAQ,MAAM,4CAA4CA,MAAK,EAAE;AAAA,MAClE;AAAA,IACD;AAGA,QAAI,WAAW,uBAAuB,UAAU,wBAAwB,cAAc;AACrF,UAAI;AACH,mBAAW,uBAAuB,KAAK,OAAO,MAAM,GAAG,SAAS,SAAS,UAAU,mBAAmB,GAAG,SAAS,CAAC;AAAA,MACpH,SAASA,QAAO;AACf,gBAAQ,MAAM,2CAA2C,UAAU,mBAAmB,KAAKA,MAAK,EAAE;AAAA,MACnG;AAAA,IACD;AAAA,EACD;AAEA,cAAY,KAAK,iBAAiB;AAElC,SAAO;AACR;AAvDe;AA2Df,eAAsB,eAA8B;AAGnD,QAAM,SAAS;AAChB;AAJsB;",
  "names": ["require", "error"]
}
