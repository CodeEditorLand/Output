{
  "version": 3,
  "sources": ["../../../../../Dependency/Land/Dependency/Editor/Source/bootstrap-import.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// *********************************************************************\n// *                                                                   *\n// *  We need this to redirect to node_modules from the remote-folder. *\n// *  This ONLY applies  when running out of source.                   *\n// *                                                                   *\n// *********************************************************************\n\nimport { fileURLToPath, pathToFileURL } from 'node:url';\nimport { promises } from 'node:fs';\nimport { join } from 'node:path';\n\n// SEE https://nodejs.org/docs/latest/api/module.html#initialize\n\nconst _specifierToUrl: Record<string, string> = {};\n\nexport async function initialize(injectPath: string): Promise<void> {\n\t// populate mappings\n\n\tconst injectPackageJSONPath = fileURLToPath(new URL('../package.json', pathToFileURL(injectPath)));\n\tconst packageJSON = JSON.parse(String(await promises.readFile(injectPackageJSONPath)));\n\n\tfor (const [name] of Object.entries(packageJSON.dependencies)) {\n\t\ttry {\n\t\t\tconst path = join(injectPackageJSONPath, `../node_modules/${name}/package.json`);\n\t\t\tlet { main } = JSON.parse(String(await promises.readFile(path)));\n\n\t\t\tif (!main) {\n\t\t\t\tmain = 'index.js';\n\t\t\t}\n\t\t\tif (!main.endsWith('.js')) {\n\t\t\t\tmain += '.js';\n\t\t\t}\n\t\t\tconst mainPath = join(injectPackageJSONPath, `../node_modules/${name}/${main}`);\n\t\t\t_specifierToUrl[name] = pathToFileURL(mainPath).href;\n\n\t\t} catch (err) {\n\t\t\tconsole.error(name);\n\t\t\tconsole.error(err);\n\t\t}\n\t}\n\n\tconsole.log(`[bootstrap-import] Initialized node_modules redirector for: ${injectPath}`);\n}\n\nexport async function resolve(specifier: string | number, context: any, nextResolve: (arg0: any, arg1: any) => any) {\n\n\tconst newSpecifier = _specifierToUrl[specifier];\n\tif (newSpecifier !== undefined) {\n\t\treturn {\n\t\t\tformat: 'commonjs',\n\t\t\tshortCircuit: true,\n\t\t\turl: newSpecifier\n\t\t};\n\t}\n\n\t// Defer to the next hook in the chain, which would be the\n\t// Node.js default resolve if this is the last user-specified loader.\n\treturn nextResolve(specifier, context);\n}\n"],
  "mappings": ";;AAYA,SAAS,eAAe,qBAAqB;AAC7C,SAAS,gBAAgB;AACzB,SAAS,YAAY;AAIrB,MAAM,kBAA0C,CAAC;AAEjD,eAAsB,WAAW,YAAmC;AAGnE,QAAM,wBAAwB,cAAc,IAAI,IAAI,mBAAmB,cAAc,UAAU,CAAC,CAAC;AACjG,QAAM,cAAc,KAAK,MAAM,OAAO,MAAM,SAAS,SAAS,qBAAqB,CAAC,CAAC;AAErF,aAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,YAAY,YAAY,GAAG;AAC9D,QAAI;AACH,YAAM,OAAO,KAAK,uBAAuB,mBAAmB,IAAI,eAAe;AAC/E,UAAI,EAAE,KAAK,IAAI,KAAK,MAAM,OAAO,MAAM,SAAS,SAAS,IAAI,CAAC,CAAC;AAE/D,UAAI,CAAC,MAAM;AACV,eAAO;AAAA,MACR;AACA,UAAI,CAAC,KAAK,SAAS,KAAK,GAAG;AAC1B,gBAAQ;AAAA,MACT;AACA,YAAM,WAAW,KAAK,uBAAuB,mBAAmB,IAAI,IAAI,IAAI,EAAE;AAC9E,sBAAgB,IAAI,IAAI,cAAc,QAAQ,EAAE;AAAA,IAEjD,SAAS,KAAK;AACb,cAAQ,MAAM,IAAI;AAClB,cAAQ,MAAM,GAAG;AAAA,IAClB;AAAA,EACD;AAEA,UAAQ,IAAI,+DAA+D,UAAU,EAAE;AACxF;AA3BsB;AA6BtB,eAAsB,QAAQ,WAA4B,SAAc,aAA4C;AAEnH,QAAM,eAAe,gBAAgB,SAAS;AAC9C,MAAI,iBAAiB,QAAW;AAC/B,WAAO;AAAA,MACN,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,KAAK;AAAA,IACN;AAAA,EACD;AAIA,SAAO,YAAY,WAAW,OAAO;AACtC;AAdsB;",
  "names": []
}
