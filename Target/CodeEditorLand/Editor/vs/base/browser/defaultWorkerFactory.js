import{createTrustedTypesPolicy as f}from"./trustedTypes.js";import{onUnexpectedError as d}from"../common/errors.js";import{COI as k,FileAccess as p}from"../common/network.js";import"../common/uri.js";import{logOnceWebWorkerWarning as m,SimpleWorkerClient as W}from"../common/worker/simpleWorker.js";import{Disposable as y,toDisposable as h}from"../common/lifecycle.js";import{coalesce as b}from"../common/arrays.js";import{getNLSLanguage as I,getNLSMessages as T}from"../../nls.js";let a;typeof self=="object"&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope"&&globalThis.workerttPolicy!==void 0?a=globalThis.workerttPolicy:a=f("defaultWorkerFactory",{createScriptURL:r=>r});function G(r,e){if(!r.startsWith("blob:"))throw new URIError("Not a blob-url: "+r);return new Worker(a?a.createScriptURL(r):r,{...e,type:"module"})}function w(r,e){const o=globalThis.MonacoEnvironment;if(o){if(typeof o.getWorker=="function")return o.getWorker("workerMain.js",e);if(typeof o.getWorkerUrl=="function"){const t=o.getWorkerUrl("workerMain.js",e);return new Worker(a?a.createScriptURL(t):t,{name:e,type:"module"})}}if(r){const t=E(e,r.toString(!0)),n=new Worker(a?a.createScriptURL(t):t,{name:e,type:"module"});return L(n)}throw new Error("You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker")}function E(r,e){if(!(/^((http:)|(https:)|(file:))/.test(e)&&e.substring(0,globalThis.origin.length)!==globalThis.origin)){const t=e.lastIndexOf("?"),n=e.lastIndexOf("#",t),s=t>0?new URLSearchParams(e.substring(t+1,~n?n:void 0)):new URLSearchParams;k.addSearchParam(s,!0,!0),s.toString()?e=`${e}?${s.toString()}#${r}`:e=`${e}#${r}`}const o=new Blob([b([`/*${r}*/`,`globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(T())};`,`globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(I())};`,`globalThis._VSCODE_FILE_ROOT = ${JSON.stringify(globalThis._VSCODE_FILE_ROOT)};`,"const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });","globalThis.workerttPolicy = ttPolicy;",`await import(ttPolicy?.createScriptURL(${JSON.stringify(e)}) ?? ${JSON.stringify(e)});`,"globalThis.postMessage({ type: 'vscode-worker-ready' });",`/*${r}*/`]).join("")],{type:"application/javascript"});return URL.createObjectURL(o)}function L(r){return new Promise((e,o)=>{r.onmessage=function(t){t.data.type==="vscode-worker-ready"&&(r.onmessage=null,e(r))},r.onerror=o})}function R(r){return typeof r.then=="function"}class v extends y{id;label;worker;constructor(e,o,t,n,s,c){super(),this.id=t,this.label=n;const l=w(e,n);R(l)?this.worker=l:this.worker=Promise.resolve(l),this.postMessage(o,[]),this.worker.then(i=>{i.onmessage=function(g){s(g.data)},i.onmessageerror=c,typeof i.addEventListener=="function"&&i.addEventListener("error",c)}),this._register(h(()=>{this.worker?.then(i=>{i.onmessage=null,i.onmessageerror=null,i.removeEventListener("error",c),i.terminate()}),this.worker=null}))}getId(){return this.id}postMessage(e,o){this.worker?.then(t=>{try{t.postMessage(e,o)}catch(n){d(n),d(new Error(`FAILED to post message to '${this.label}'-worker`,{cause:n}))}})}}class P{constructor(e,o){this.moduleId=e;this.label=o;this.esmModuleLocation=p.asBrowserUri(`${e}Main.js`)}esmModuleLocation}class u{static LAST_WORKER_ID=0;_webWorkerFailedBeforeError;constructor(){this._webWorkerFailedBeforeError=!1}create(e,o,t){const n=++u.LAST_WORKER_ID;if(this._webWorkerFailedBeforeError)throw this._webWorkerFailedBeforeError;return new v(e.esmModuleLocation,e.moduleId,n,e.label||"anonymous"+n,o,s=>{m(s),this._webWorkerFailedBeforeError=s,t(s)})}}function V(r,e){const o=typeof r=="string"?new P(r,e):r;return new W(new u,o)}export{P as WorkerDescriptor,G as createBlobWorker,V as createWebWorker};
