import*as s from"path";import*as i from"fs";import*as f from"../common/performance.js";async function J({userLocale:n,osLocale:e,userDataPath:r,commit:y,nlsMetadataPath:t}){if(f.mark("code/willGenerateNls"),process.env.VSCODE_DEV||n==="pseudo"||n.startsWith("en")||!y||!r)return c(n,e,t);try{const l=await O(r);if(!l)return c(n,e,t);const o=R(l,n);if(!o)return c(n,e,t);const a=l[o],d=a?.translations?.vscode;if(!a||typeof a.hash!="string"||!a.translations||typeof d!="string"||!await k(d))return c(n,e,t);const P=`${a.hash}.${o}`,g=s.join(r,"clp",P),u=s.join(g,y),j=s.join(u,"nls.messages.json"),m=s.join(g,"tcf.json"),p=s.join(g,"corrupted.info");await k(p)&&await i.promises.rm(g,{recursive:!0,force:!0,maxRetries:3});const w={userLocale:n,osLocale:e,resolvedLanguage:o,defaultMessagesFile:s.join(t,"nls.messages.json"),languagePack:{translationsConfigFile:m,messagesFile:j,corruptMarkerFile:p},locale:n,availableLanguages:{"*":o},_languagePackId:P,_languagePackSupport:!0,_translationsConfigFile:m,_cacheRoot:g,_resolvedLanguagePackCoreLocation:u,_corruptedFile:p};if(await k(u))return _(u).catch(()=>{}),f.mark("code/didGenerateNls"),w;const[,F,S,v]=await Promise.all([i.promises.mkdir(u,{recursive:!0}),JSON.parse(await i.promises.readFile(s.join(t,"nls.keys.json"),"utf-8")),JSON.parse(await i.promises.readFile(s.join(t,"nls.messages.json"),"utf-8")),JSON.parse(await i.promises.readFile(d,"utf-8"))]),C=[];let N=0;for(const[I,h]of F){const L=v.contents[I];for(const x of h)C.push(L?.[x]||S[N]),N++}return await Promise.all([i.promises.writeFile(j,JSON.stringify(C),"utf-8"),i.promises.writeFile(m,JSON.stringify(a.translations),"utf-8")]),f.mark("code/didGenerateNls"),w}catch{}return c(n,e,t)}async function O(n){const e=s.join(n,"languagepacks.json");try{return JSON.parse(await i.promises.readFile(e,"utf-8"))}catch{return}}function R(n,e){try{for(;e;){if(n[e])return e;const r=e.lastIndexOf("-");if(r>0)e=e.substring(0,r);else return}}catch{}}function c(n,e,r){return f.mark("code/didGenerateNls"),{userLocale:n,osLocale:e,resolvedLanguage:"en",defaultMessagesFile:s.join(r,"nls.messages.json"),locale:n,availableLanguages:{}}}async function k(n){try{return await i.promises.access(n),!0}catch{return!1}}function _(n){const e=new Date;return i.promises.utimes(n,e,e)}export{J as resolveNLSConfiguration};
