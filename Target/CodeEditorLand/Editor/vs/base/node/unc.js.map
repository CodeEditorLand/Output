{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/base/node/unc.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport function getUNCHostAllowlist(): string[] {\n\tconst allowlist = processUNCHostAllowlist();\n\tif (allowlist) {\n\t\treturn Array.from(allowlist);\n\t}\n\n\treturn [];\n}\n\nfunction processUNCHostAllowlist(): Set<string> {\n\n\t// The property `process.uncHostAllowlist` is not available in official node.js\n\t// releases, only in our own builds, so we have to probe for availability\n\n\treturn (process as any).uncHostAllowlist;\n}\n\nexport function addUNCHostToAllowlist(allowedHost: string | string[]): void {\n\tif (process.platform !== 'win32') {\n\t\treturn;\n\t}\n\n\tconst allowlist = processUNCHostAllowlist();\n\tif (allowlist) {\n\t\tif (typeof allowedHost === 'string') {\n\t\t\tallowlist.add(allowedHost.toLowerCase()); // UNC hosts are case-insensitive\n\t\t} else {\n\t\t\tfor (const host of toSafeStringArray(allowedHost)) {\n\t\t\t\taddUNCHostToAllowlist(host);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction toSafeStringArray(arg0: unknown): string[] {\n\tconst allowedUNCHosts = new Set<string>();\n\n\tif (Array.isArray(arg0)) {\n\t\tfor (const host of arg0) {\n\t\t\tif (typeof host === 'string') {\n\t\t\t\tallowedUNCHosts.add(host);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Array.from(allowedUNCHosts);\n}\n\nexport function getUNCHost(maybeUNCPath: string | undefined | null): string | undefined {\n\tif (typeof maybeUNCPath !== 'string') {\n\t\treturn undefined; // require a valid string\n\t}\n\n\tconst uncRoots = [\n\t\t'\\\\\\\\.\\\\UNC\\\\',\t// DOS Device paths (https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats)\n\t\t'\\\\\\\\?\\\\UNC\\\\',\n\t\t'\\\\\\\\'\t\t\t// standard UNC path\n\t];\n\n\tlet host = undefined;\n\n\tfor (const uncRoot of uncRoots) {\n\t\tconst indexOfUNCRoot = maybeUNCPath.indexOf(uncRoot);\n\t\tif (indexOfUNCRoot !== 0) {\n\t\t\tcontinue; // not matching any of our expected UNC roots\n\t\t}\n\n\t\tconst indexOfUNCPath = maybeUNCPath.indexOf('\\\\', uncRoot.length);\n\t\tif (indexOfUNCPath === -1) {\n\t\t\tcontinue; // no path component found\n\t\t}\n\n\t\tconst hostCandidate = maybeUNCPath.substring(uncRoot.length, indexOfUNCPath);\n\t\tif (hostCandidate) {\n\t\t\thost = hostCandidate;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn host;\n}\n\nexport function disableUNCAccessRestrictions(): void {\n\tif (process.platform !== 'win32') {\n\t\treturn;\n\t}\n\n\t(process as any).restrictUNCAccess = false;\n}\n\nexport function isUNCAccessRestrictionsDisabled(): boolean {\n\tif (process.platform !== 'win32') {\n\t\treturn true;\n\t}\n\n\treturn (process as any).restrictUNCAccess === false;\n}\n"],
  "mappings": ";;AAKO,SAAS,sBAAgC;AAC/C,QAAM,YAAY,wBAAwB;AAC1C,MAAI,WAAW;AACd,WAAO,MAAM,KAAK,SAAS;AAAA,EAC5B;AAEA,SAAO,CAAC;AACT;AAPgB;AAShB,SAAS,0BAAuC;AAK/C,SAAQ,QAAgB;AACzB;AANS;AAQF,SAAS,sBAAsB,aAAsC;AAC3E,MAAI,QAAQ,aAAa,SAAS;AACjC;AAAA,EACD;AAEA,QAAM,YAAY,wBAAwB;AAC1C,MAAI,WAAW;AACd,QAAI,OAAO,gBAAgB,UAAU;AACpC,gBAAU,IAAI,YAAY,YAAY,CAAC;AAAA,IACxC,OAAO;AACN,iBAAW,QAAQ,kBAAkB,WAAW,GAAG;AAClD,8BAAsB,IAAI;AAAA,MAC3B;AAAA,IACD;AAAA,EACD;AACD;AAfgB;AAiBhB,SAAS,kBAAkB,MAAyB;AACnD,QAAM,kBAAkB,oBAAI,IAAY;AAExC,MAAI,MAAM,QAAQ,IAAI,GAAG;AACxB,eAAW,QAAQ,MAAM;AACxB,UAAI,OAAO,SAAS,UAAU;AAC7B,wBAAgB,IAAI,IAAI;AAAA,MACzB;AAAA,IACD;AAAA,EACD;AAEA,SAAO,MAAM,KAAK,eAAe;AAClC;AAZS;AAcF,SAAS,WAAW,cAA6D;AACvF,MAAI,OAAO,iBAAiB,UAAU;AACrC,WAAO;AAAA,EACR;AAEA,QAAM,WAAW;AAAA,IAChB;AAAA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EACD;AAEA,MAAI,OAAO;AAEX,aAAW,WAAW,UAAU;AAC/B,UAAM,iBAAiB,aAAa,QAAQ,OAAO;AACnD,QAAI,mBAAmB,GAAG;AACzB;AAAA,IACD;AAEA,UAAM,iBAAiB,aAAa,QAAQ,MAAM,QAAQ,MAAM;AAChE,QAAI,mBAAmB,IAAI;AAC1B;AAAA,IACD;AAEA,UAAM,gBAAgB,aAAa,UAAU,QAAQ,QAAQ,cAAc;AAC3E,QAAI,eAAe;AAClB,aAAO;AACP;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAhCgB;AAkCT,SAAS,+BAAqC;AACpD,MAAI,QAAQ,aAAa,SAAS;AACjC;AAAA,EACD;AAEA,EAAC,QAAgB,oBAAoB;AACtC;AANgB;AAQT,SAAS,kCAA2C;AAC1D,MAAI,QAAQ,aAAa,SAAS;AACjC,WAAO;AAAA,EACR;AAEA,SAAQ,QAAgB,sBAAsB;AAC/C;AANgB;",
  "names": []
}
