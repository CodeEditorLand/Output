import{spawn as y}from"child_process";import{chmodSync as I,existsSync as F,readFileSync as L,statSync as N,truncateSync as q,unlinkSync as U}from"fs";import{homedir as B,release as W,tmpdir as G}from"os";import{Event as g}from"../../base/common/event.js";import{isAbsolute as M,resolve as z,join as R,dirname as O}from"../../base/common/path.js";import{isMacintosh as J,isWindows as x}from"../../base/common/platform.js";import{randomPort as K}from"../../base/common/ports.js";import{whenDeleted as V,writeFileSync as w}from"../../base/node/pfs.js";import{findFreePort as D}from"../../base/node/ports.js";import{watchFileContents as Q}from"../../platform/files/node/watcher/nodejs/nodejsWatcherLib.js";import"../../platform/environment/common/argv.js";import{NATIVE_CLI_COMMANDS as X}from"../../platform/environment/node/argv.js";import{addArg as d,parseCLIProcessArgv as Y}from"../../platform/environment/node/argvHelper.js";import{getStdinFilePath as Z,hasStdinWithoutTty as ee,readFromStdin as te,stdinDataListener as oe}from"../../platform/environment/node/stdin.js";import{createWaitMarkerFileSync as re}from"../../platform/environment/node/wait.js";import T from"../../platform/product/common/product.js";import{CancellationTokenSource as ie}from"../../base/common/cancellation.js";import{isUNC as se,randomPath as H}from"../../base/common/extpath.js";import{Utils as ne}from"../../platform/profiling/common/profiling.js";import{FileAccess as ae}from"../../base/common/network.js";import{cwd as le}from"../../base/common/process.js";import{addUNCHostToAllowlist as ce}from"../../base/node/unc.js";import{URI as pe}from"../../base/common/uri.js";import{DeferredPromise as fe}from"../../base/common/async.js";function de(r){return!!r["install-source"]||!!r["list-extensions"]||!!r["install-extension"]||!!r["uninstall-extension"]||!!r["update-extensions"]||!!r["locate-extension"]||!!r.telemetry}async function me(r){let t;try{t=Y(r)}catch{return}for(const o of X)if(t[o]){if(!T.tunnelApplicationName)return;const n={...process.env};delete n.ELECTRON_RUN_AS_NODE;const a=r.slice(r.indexOf(o)+1);return new Promise((i,m)=>{let l;const u=["ignore","pipe","pipe"];if(process.env.VSCODE_DEV)l=y("cargo",["run","--",o,...a],{cwd:R(ue(),"cli"),stdio:u,env:n});else{const P=process.platform==="darwin"?R(O(O(process.execPath)),"Resources","app"):O(process.execPath),e=R(P,"bin",`${T.tunnelApplicationName}${x?".exe":""}`);l=y(e,[o,...a],{cwd:le(),stdio:u,env:n})}l.stdout.pipe(process.stdout),l.stderr.pipe(process.stderr),l.on("exit",i),l.on("error",m)})}if(t.help){const o=`${T.applicationName}${x?".exe":""}`}else if(!t.version)if(t["locate-shell-integration-path"]){let o;switch(t["locate-shell-integration-path"]){case"bash":o="shellIntegration-bash.sh";break;case"pwsh":o="shellIntegration.ps1";break;case"zsh":o="shellIntegration-rc.zsh";break;case"fish":o="fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish";break;default:throw new Error("Error using --locate-shell-integration-path: Invalid shell type")}}else if(de(t)){let o;process.env.VSCODE_DEV?o="./cliProcessMain.js":o="./vs/code/node/cliProcessMain.js",await(await import(o)).main(t);return}else if(t["file-write"]){const o=t._[0];if(!o||!M(o)||!F(o)||!N(o).isFile())throw new Error("Using --file-write with invalid arguments.");let n,a;try{const i=JSON.parse(L(o,"utf8"));n=i.source,a=i.target}catch{throw new Error("Using --file-write with invalid arguments.")}if(x)for(const i of[n,a])typeof i=="string"&&se(i)&&ce(pe.file(i).authority);if(!n||!a||n===a||!M(n)||!M(a)||!F(n)||!N(n).isFile()||!F(a)||!N(a).isFile())throw new Error("Using --file-write with invalid arguments.");try{let i=0,m=!1;t["file-chmod"]&&(i=N(a).mode,i&128||(I(a,i|128),m=!0));const l=L(n);x?(q(a,0),w(a,l,{flag:"r+"})):w(a,l),m&&I(a,i)}catch(i){throw i.message=`Error using --file-write: ${i.message}`,i}}else{const o={...process.env,ELECTRON_NO_ATTACH_CONSOLE:"1"};delete o.ELECTRON_RUN_AS_NODE;const n=[];t.verbose&&(o.ELECTRON_ENABLE_LOGGING="1"),(t.verbose||t.status)&&n.push(async e=>{e.stdout?.on("data",s=>{}),e.stderr?.on("data",s=>{}),await g.toPromise(g.fromNodeEventEmitter(e,"exit"))});const a=t._.some(e=>e==="-");a&&(t._=t._.filter(e=>e!=="-"),r=r.filter(e=>e!=="-"));let i;if(ee())if(a){i=Z();try{const e=new fe;await te(i,!!t.verbose,()=>e.complete()),t.wait||n.push(()=>e.p),d(r,i),d(r,"--skip-add-to-recently-opened")}catch{i=void 0}}else n.push(e=>oe(1e3).then(s=>{}));const m=J&&W()>"20.0.0";let l;if(t.wait&&(l=re(t.verbose),l&&d(r,"--waitMarkerFilePath",l),n.push(async e=>{let s;m?s=new Promise(c=>{e.on("exit",(h,p)=>{(h!==0||p)&&c()})}):s=g.toPromise(g.fromNodeEventEmitter(e,"exit"));try{await Promise.race([V(l),g.toPromise(g.fromNodeEventEmitter(e,"error")),s])}finally{i&&U(i)}})),t["prof-startup"]){const e="127.0.0.1",s=await D(K(),10,3e3),c=await D(s+1,10,3e3),h=await D(c+1,10,3e3);if(s*c*h===0)throw new Error("Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.");const p=H(B(),"prof");d(r,`--inspect-brk=${e}:${s}`),d(r,`--remote-debugging-port=${e}:${c}`),d(r,`--inspect-brk-extensions=${e}:${h}`),d(r,"--prof-startup-prefix",p),d(r,"--no-cached-data"),w(p,r.slice(-6).join("|")),n.push(async v=>{class E{static async start(_,C,A){const k=await import("v8-inspect-profiler");let b;try{b=await k.startProfiling({...A,host:e})}catch{}return{async stop(){if(!b)return;let S="";const f=await b.stop();process.env.VSCODE_DEV||(f.profile=ne.rewriteAbsolutePaths(f.profile,"piiRemoved"),S=".txt"),w(`${C}.${_}.cpuprofile${S}`,JSON.stringify(f.profile,void 0,4))}}}}try{const $=E.start("main",p,{port:s}),_=E.start("extHost",p,{port:h,tries:300}),C=E.start("renderer",p,{port:c,tries:200,target:function(S){return S.filter(f=>f.webSocketDebuggerUrl?f.type==="page"?f.url.indexOf("workbench/workbench.html")>0||f.url.indexOf("workbench/workbench-dev.html")>0:!0:!1)[0]}}),A=await $,k=await _,b=await C;await V(p),await A.stop(),await b.stop(),await k.stop(),w(p,"")}catch{}})}const u={detached:!0,env:o};t.verbose||(u.stdio="ignore");let P;if(!m)!t.verbose&&t.status&&(u.stdio=["ignore","pipe","ignore"]),P=y(process.execPath,r.slice(2),u);else{const e=["-n","-g"];if(e.push("-a",process.execPath),t.verbose||t.status){e.push("--wait-apps");for(const s of t.verbose?["stdout","stderr"]:["stdout"]){const c=H(G(),`code-${s}`);w(c,""),e.push(`--${s}`,c),n.push(async h=>{try{const p=s==="stdout"?process.stdout:process.stderr,v=new ie;h.on("close",()=>{setTimeout(()=>v.dispose(!0),200)}),await Q(c,E=>p.write(E),()=>{},v.token)}finally{U(c)}})}}for(const s in o)s!=="_"&&(e.push("--env"),e.push(`${s}=${o[s]}`));if(e.push("--args",...r.slice(2)),o.VSCODE_DEV){const s=".",c=e.indexOf(s);c!==-1&&(e[c]=z(s))}P=y("open",e,{...u,env:{}})}return Promise.all(n.map(e=>e(P)))}}function ue(){return O(ae.asFileUri("").fsPath)}function j(r){setTimeout(()=>process.exit(r),0)}me(process.argv).then(()=>j(0)).then(null,r=>{j(1)});export{me as main};
