import{spawn as y}from"child_process";import{chmodSync as D,existsSync as T,readFileSync as j,statSync as k,truncateSync as q,unlinkSync as I}from"fs";import{homedir as B,release as W,tmpdir as G}from"os";import{Event as w}from"../../base/common/event.js";import{isAbsolute as L,resolve as z,join as F,dirname as N}from"../../base/common/path.js";import{isMacintosh as J,isWindows as S}from"../../base/common/platform.js";import{randomPort as K}from"../../base/common/ports.js";import{whenDeleted as V,writeFileSync as g}from"../../base/node/pfs.js";import{findFreePort as M}from"../../base/node/ports.js";import{watchFileContents as Q}from"../../platform/files/node/watcher/nodejs/nodejsWatcherLib.js";import"../../platform/environment/common/argv.js";import{NATIVE_CLI_COMMANDS as X}from"../../platform/environment/node/argv.js";import{addArg as d,parseCLIProcessArgv as Y}from"../../platform/environment/node/argvHelper.js";import{getStdinFilePath as Z,hasStdinWithoutTty as ee,readFromStdin as te,stdinDataListener as oe}from"../../platform/environment/node/stdin.js";import{createWaitMarkerFileSync as re}from"../../platform/environment/node/wait.js";import R from"../../platform/product/common/product.js";import{CancellationTokenSource as se}from"../../base/common/cancellation.js";import{isUNC as ie,randomPath as H}from"../../base/common/extpath.js";import{Utils as ne}from"../../platform/profiling/common/profiling.js";import{FileAccess as ae}from"../../base/common/network.js";import{cwd as ce}from"../../base/common/process.js";import{addUNCHostToAllowlist as le}from"../../base/node/unc.js";import{URI as pe}from"../../base/common/uri.js";import{DeferredPromise as fe}from"../../base/common/async.js";function de(r){return!!r["install-source"]||!!r["list-extensions"]||!!r["install-extension"]||!!r["uninstall-extension"]||!!r["update-extensions"]||!!r["locate-extension"]||!!r.telemetry}async function me(r){let o;try{o=Y(r)}catch{return}for(const t of X)if(o[t]){if(!R.tunnelApplicationName)return;const s={...process.env};delete s.ELECTRON_RUN_AS_NODE;const n=r.slice(r.indexOf(t)+1);return new Promise((c,m)=>{let l;const u=["ignore","pipe","pipe"];if(process.env.VSCODE_DEV)l=y("cargo",["run","--",t,...n],{cwd:F(ue(),"cli"),stdio:u,env:s});else{const P=process.platform==="darwin"?F(N(N(process.execPath)),"Resources","app"):N(process.execPath),e=F(P,"bin",`${R.tunnelApplicationName}${S?".exe":""}`);l=y(e,[t,...n],{cwd:ce(),stdio:u,env:s})}l.stdout.pipe(process.stdout),l.stderr.pipe(process.stderr),l.on("exit",c),l.on("error",m)})}if(o.help){const t=`${R.applicationName}${S?".exe":""}`}else if(!o.version)if(o["locate-shell-integration-path"]){let t;switch(o["locate-shell-integration-path"]){case"bash":t="shellIntegration-bash.sh";break;case"pwsh":t="shellIntegration.ps1";break;case"zsh":t="shellIntegration-rc.zsh";break;case"fish":t="fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish";break;default:throw new Error("Error using --locate-shell-integration-path: Invalid shell type")}}else if(de(o)){let t;process.env.VSCODE_DEV?t="./cliProcessMain.js":t="./vs/code/node/cliProcessMain.js",await(await import(t)).main(o);return}else if(o["file-write"]){const t=o._[0],s=o._[1];if(S)for(const n of[t,s])ie(n)&&le(pe.file(n).authority);if(!t||!s||t===s||!L(t)||!L(s)||!T(t)||!k(t).isFile()||!T(s)||!k(s).isFile())throw new Error("Using --file-write with invalid arguments.");try{let n=0,c=!1;o["file-chmod"]&&(n=k(s).mode,n&128||(D(s,n|128),c=!0));const m=j(t);S?(q(s,0),g(s,m,{flag:"r+"})):g(s,m),c&&D(s,n)}catch(n){throw n.message=`Error using --file-write: ${n.message}`,n}}else{const t={...process.env,ELECTRON_NO_ATTACH_CONSOLE:"1"};delete t.ELECTRON_RUN_AS_NODE;const s=[];o.verbose&&(t.ELECTRON_ENABLE_LOGGING="1"),(o.verbose||o.status)&&s.push(async e=>{e.stdout?.on("data",i=>{}),e.stderr?.on("data",i=>{}),await w.toPromise(w.fromNodeEventEmitter(e,"exit"))});const n=o._.some(e=>e==="-");n&&(o._=o._.filter(e=>e!=="-"),r=r.filter(e=>e!=="-"));let c;if(ee())if(n){c=Z();try{const e=new fe;await te(c,!!o.verbose,()=>e.complete()),o.wait||s.push(()=>e.p),d(r,c),d(r,"--skip-add-to-recently-opened")}catch{c=void 0}}else s.push(e=>oe(1e3).then(i=>{}));const m=J&&W()>"20.0.0";let l;if(o.wait&&(l=re(o.verbose),l&&d(r,"--waitMarkerFilePath",l),s.push(async e=>{let i;m?i=new Promise(a=>{e.on("exit",(h,p)=>{(h!==0||p)&&a()})}):i=w.toPromise(w.fromNodeEventEmitter(e,"exit"));try{await Promise.race([V(l),w.toPromise(w.fromNodeEventEmitter(e,"error")),i])}finally{c&&I(c)}})),o["prof-startup"]){const e="127.0.0.1",i=await M(K(),10,3e3),a=await M(i+1,10,3e3),h=await M(a+1,10,3e3);if(i*a*h===0)throw new Error("Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.");const p=H(B(),"prof");d(r,`--inspect-brk=${e}:${i}`),d(r,`--remote-debugging-port=${e}:${a}`),d(r,`--inspect-brk-extensions=${e}:${h}`),d(r,"--prof-startup-prefix",p),d(r,"--no-cached-data"),g(p,r.slice(-6).join("|")),s.push(async O=>{class b{static async start($,v,C){const A=await import("v8-inspect-profiler");let E;try{E=await A.startProfiling({...C,host:e})}catch{}return{async stop(){if(!E)return;let x="";const f=await E.stop();process.env.VSCODE_DEV||(f.profile=ne.rewriteAbsolutePaths(f.profile,"piiRemoved"),x=".txt"),g(`${v}.${$}.cpuprofile${x}`,JSON.stringify(f.profile,void 0,4))}}}}try{const _=b.start("main",p,{port:i}),$=b.start("extHost",p,{port:h,tries:300}),v=b.start("renderer",p,{port:a,tries:200,target:function(x){return x.filter(f=>f.webSocketDebuggerUrl?f.type==="page"?f.url.indexOf("workbench/workbench.html")>0||f.url.indexOf("workbench/workbench-dev.html")>0:!0:!1)[0]}}),C=await _,A=await $,E=await v;await V(p),await C.stop(),await E.stop(),await A.stop(),g(p,"")}catch{}})}const u={detached:!0,env:t};o.verbose||(u.stdio="ignore");let P;if(!m)!o.verbose&&o.status&&(u.stdio=["ignore","pipe","ignore"]),P=y(process.execPath,r.slice(2),u);else{const e=["-n","-g"];if(e.push("-a",process.execPath),o.verbose||o.status){e.push("--wait-apps");for(const i of o.verbose?["stdout","stderr"]:["stdout"]){const a=H(G(),`code-${i}`);g(a,""),e.push(`--${i}`,a),s.push(async h=>{try{const p=i==="stdout"?process.stdout:process.stderr,O=new se;h.on("close",()=>{setTimeout(()=>O.dispose(!0),200)}),await Q(a,b=>p.write(b),()=>{},O.token)}finally{I(a)}})}}for(const i in t)i!=="_"&&(e.push("--env"),e.push(`${i}=${t[i]}`));if(e.push("--args",...r.slice(2)),t.VSCODE_DEV){const i=".",a=e.indexOf(i);a!==-1&&(e[a]=z(i))}P=y("open",e,{...u,env:{}})}return Promise.all(s.map(e=>e(P)))}}function ue(){return N(ae.asFileUri("").fsPath)}function U(r){setTimeout(()=>process.exit(r),0)}me(process.argv).then(()=>U(0)).then(null,r=>{U(1)});export{me as main};
