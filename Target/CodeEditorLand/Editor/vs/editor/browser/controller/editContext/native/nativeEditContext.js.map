{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/browser/controller/editContext/native/nativeEditContext.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './nativeEditContext.css';\nimport { isFirefox } from '../../../../../base/browser/browser.js';\nimport { addDisposableListener, getActiveWindow, getWindow, getWindowId } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { StandardKeyboardEvent } from '../../../../../base/browser/keyboardEvent.js';\nimport { KeyCode } from '../../../../../base/common/keyCodes.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { EndOfLinePreference, EndOfLineSequence, IModelDeltaDecoration } from '../../../../common/model.js';\nimport { ViewConfigurationChangedEvent, ViewCursorStateChangedEvent } from '../../../../common/viewEvents.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { RestrictedRenderingContext, RenderingContext } from '../../../view/renderingContext.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { ClipboardStoredMetadata, getDataToCopy, InMemoryClipboardMetadataManager } from '../clipboardUtils.js';\nimport { AbstractEditContext } from '../editContext.js';\nimport { editContextAddDisposableListener, FocusTracker, ITypeData } from './nativeEditContextUtils.js';\nimport { ScreenReaderSupport } from './screenReaderSupport.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { IVisibleRangeProvider } from '../textArea/textAreaEditContext.js';\nimport { PositionOffsetTransformer } from '../../../../common/core/positionToOffset.js';\nimport { IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { EditContext } from './editContextFactory.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\n\n// Corresponds to classes in nativeEditContext.css\nenum CompositionClassName {\n\tNONE = 'edit-context-composition-none',\n\tSECONDARY = 'edit-context-composition-secondary',\n\tPRIMARY = 'edit-context-composition-primary',\n}\n\nexport class NativeEditContext extends AbstractEditContext {\n\n\tpublic readonly domNode: FastDomNode<HTMLDivElement>;\n\tprivate readonly _editContext: EditContext;\n\tprivate readonly _screenReaderSupport: ScreenReaderSupport;\n\n\t// Overflow guard container\n\tprivate _parent: HTMLElement | undefined;\n\tprivate _decorations: string[] = [];\n\tprivate _primarySelection: Selection = new Selection(1, 1, 1, 1);\n\n\tprivate _textStartPositionWithinEditor: Position = new Position(1, 1);\n\n\tprivate _targetWindowId: number = -1;\n\n\tprivate readonly _focusTracker: FocusTracker;\n\n\tprivate readonly _selectionChangeListener: MutableDisposable<IDisposable>;\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\toverflowGuardContainer: FastDomNode<HTMLElement>,\n\t\tviewController: ViewController,\n\t\tprivate readonly _visibleRangeProvider: IVisibleRangeProvider,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper(context);\n\n\t\tthis.domNode = new FastDomNode(document.createElement('div'));\n\t\tthis.domNode.setClassName(`native-edit-context`);\n\t\tthis._updateDomAttributes();\n\n\t\toverflowGuardContainer.appendChild(this.domNode);\n\t\tthis._parent = overflowGuardContainer.domNode;\n\n\t\tthis._selectionChangeListener = this._register(new MutableDisposable());\n\t\tthis._focusTracker = this._register(new FocusTracker(this.domNode.domNode, (newFocusValue: boolean) => {\n\t\t\tthis._selectionChangeListener.value = newFocusValue ? this._setSelectionChangeListener(viewController) : undefined;\n\t\t\tthis._context.viewModel.setHasFocus(newFocusValue);\n\t\t}));\n\n\t\tconst window = getWindow(this.domNode.domNode);\n\t\tthis._editContext = EditContext.create(window);\n\t\tthis.setEditContextOnDomNode();\n\n\t\tthis._screenReaderSupport = instantiationService.createInstance(ScreenReaderSupport, this.domNode, context);\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'copy', () => this._ensureClipboardGetsEditorSelection(clipboardService)));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'cut', () => {\n\t\t\tthis._ensureClipboardGetsEditorSelection(clipboardService);\n\t\t\tviewController.cut();\n\t\t}));\n\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keyup', (e) => viewController.emitKeyUp(new StandardKeyboardEvent(e))));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'keydown', async (e) => {\n\n\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(e);\n\n\t\t\t// When the IME is visible, the keys, like arrow-left and arrow-right, should be used to navigate in the IME, and should not be propagated further\n\t\t\tif (standardKeyboardEvent.keyCode === KeyCode.KEY_IN_COMPOSITION) {\n\t\t\t\tstandardKeyboardEvent.stopPropagation();\n\t\t\t}\n\t\t\tviewController.emitKeyDown(standardKeyboardEvent);\n\t\t}));\n\t\tthis._register(addDisposableListener(this.domNode.domNode, 'beforeinput', async (e) => {\n\t\t\tif (e.inputType === 'insertParagraph' || e.inputType === 'insertLineBreak') {\n\t\t\t\tthis._onType(viewController, { text: this._context.viewModel.model.getEOL(), replacePrevCharCnt: 0, replaceNextCharCnt: 0, positionDelta: 0 });\n\t\t\t}\n\t\t}));\n\n\t\t// Edit context events\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textformatupdate', (e) => this._handleTextFormatUpdate(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'characterboundsupdate', (e) => this._updateCharacterBounds(e)));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'textupdate', (e) => {\n\t\t\tthis._emitTypeEvent(viewController, e);\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionstart', (e) => {\n\t\t\t// Utlimately fires onDidCompositionStart() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionStart();\n\t\t\t// Emits ViewCompositionStartEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionStart();\n\t\t}));\n\t\tthis._register(editContextAddDisposableListener(this._editContext, 'compositionend', (e) => {\n\t\t\t// Utlimately fires compositionEnd() on the editor to notify for example suggest model of composition state\n\t\t\t// Updates the composition state of the cursor controller which determines behavior of typing with interceptors\n\t\t\tviewController.compositionEnd();\n\t\t\t// Emits ViewCompositionEndEvent which can be depended on by ViewEventHandlers\n\t\t\tthis._context.viewModel.onCompositionEnd();\n\t\t}));\n\t}\n\n\t// --- Public methods ---\n\n\tpublic override dispose(): void {\n\t\t// Force blue the dom node so can write in pane with no native edit context after disposal\n\t\tthis.domNode.domNode.blur();\n\t\tthis.domNode.domNode.remove();\n\t\tsuper.dispose();\n\t}\n\n\tpublic setAriaOptions(): void {\n\t\tthis._screenReaderSupport.setAriaOptions();\n\t}\n\n\t/* Last rendered data needed for correct hit-testing and determining the mouse position.\n\t * Without this, the selection will blink as incorrect mouse position is calculated */\n\tpublic getLastRenderData(): Position | null {\n\t\treturn this._primarySelection.getPosition();\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._screenReaderSupport.prepareRender(ctx);\n\t\tthis._updateEditContext();\n\t\tthis._updateSelectionAndControlBounds(ctx);\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tthis._screenReaderSupport.render(ctx);\n\t}\n\n\tpublic override onCursorStateChanged(e: ViewCursorStateChangedEvent): boolean {\n\t\tthis._primarySelection = e.modelSelections[0] ?? new Selection(1, 1, 1, 1);\n\t\tthis._screenReaderSupport.onCursorStateChanged(e);\n\t\treturn true;\n\t}\n\n\tpublic override onConfigurationChanged(e: ViewConfigurationChangedEvent): boolean {\n\t\tthis._screenReaderSupport.onConfigurationChanged(e);\n\t\tthis._updateDomAttributes();\n\t\treturn true;\n\t}\n\n\tpublic writeScreenReaderContent(): void {\n\t\tthis._screenReaderSupport.writeScreenReaderContent();\n\t}\n\n\tpublic isFocused(): boolean { return this._focusTracker.isFocused; }\n\n\tpublic focus(): void { this._focusTracker.focus(); }\n\n\tpublic refreshFocusState(): void { }\n\n\t// TODO: added as a workaround fix for https://github.com/microsoft/vscode/issues/229825\n\t// When this issue will be fixed the following should be removed.\n\tpublic setEditContextOnDomNode(): void {\n\t\tconst targetWindow = getWindow(this.domNode.domNode);\n\t\tconst targetWindowId = getWindowId(targetWindow);\n\t\tif (this._targetWindowId !== targetWindowId) {\n\t\t\tthis.domNode.domNode.editContext = this._editContext;\n\t\t\tthis._targetWindowId = targetWindowId;\n\t\t}\n\t}\n\n\t// --- Private methods ---\n\n\tprivate _updateDomAttributes(): void {\n\t\tconst options = this._context.configuration.options;\n\t\tthis.domNode.domNode.setAttribute('tabindex', String(options.get(EditorOption.tabIndex)));\n\t}\n\n\tprivate _updateEditContext(): void {\n\t\tconst editContextState = this._getNewEditContextState();\n\t\tthis._editContext.updateText(0, Number.MAX_SAFE_INTEGER, editContextState.text);\n\t\tthis._editContext.updateSelection(editContextState.selectionStartOffset, editContextState.selectionEndOffset);\n\t\tthis._textStartPositionWithinEditor = editContextState.textStartPositionWithinEditor;\n\t}\n\n\tprivate _emitTypeEvent(viewController: ViewController, e: TextUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._context.viewModel.model;\n\t\tconst offsetOfStartOfText = model.getOffsetAt(this._textStartPositionWithinEditor);\n\t\tconst offsetOfSelectionEnd = model.getOffsetAt(this._primarySelection.getEndPosition());\n\t\tconst offsetOfSelectionStart = model.getOffsetAt(this._primarySelection.getStartPosition());\n\t\tconst selectionEndOffset = offsetOfSelectionEnd - offsetOfStartOfText;\n\t\tconst selectionStartOffset = offsetOfSelectionStart - offsetOfStartOfText;\n\n\t\tlet replaceNextCharCnt = 0;\n\t\tlet replacePrevCharCnt = 0;\n\t\tif (e.updateRangeEnd > selectionEndOffset) {\n\t\t\treplaceNextCharCnt = e.updateRangeEnd - selectionEndOffset;\n\t\t}\n\t\tif (e.updateRangeStart < selectionStartOffset) {\n\t\t\treplacePrevCharCnt = selectionStartOffset - e.updateRangeStart;\n\t\t}\n\t\tlet text = '';\n\t\tif (selectionStartOffset < e.updateRangeStart) {\n\t\t\ttext += this._editContext.text.substring(selectionStartOffset, e.updateRangeStart);\n\t\t}\n\t\ttext += e.text;\n\t\tif (selectionEndOffset > e.updateRangeEnd) {\n\t\t\ttext += this._editContext.text.substring(e.updateRangeEnd, selectionEndOffset);\n\t\t}\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext,\n\t\t\treplacePrevCharCnt,\n\t\t\treplaceNextCharCnt,\n\t\t\tpositionDelta: 0,\n\t\t};\n\t\tthis._onType(viewController, typeInput);\n\n\t\t// It could be that the typed letter does not produce a change in the editor text,\n\t\t// for example if an extension registers a custom typing command, and the typing operation does something else like scrolling\n\t\t// Need to update the edit context to reflect this\n\t\tthis._updateEditContext();\n\t}\n\n\tprivate _onType(viewController: ViewController, typeInput: ITypeData): void {\n\t\tif (typeInput.replacePrevCharCnt || typeInput.replaceNextCharCnt || typeInput.positionDelta) {\n\t\t\tviewController.compositionType(typeInput.text, typeInput.replacePrevCharCnt, typeInput.replaceNextCharCnt, typeInput.positionDelta);\n\t\t} else {\n\t\t\tviewController.type(typeInput.text);\n\t\t}\n\t}\n\n\tprivate _getNewEditContextState(): { text: string; selectionStartOffset: number; selectionEndOffset: number; textStartPositionWithinEditor: Position } {\n\t\tconst model = this._context.viewModel.model;\n\t\tconst primarySelectionStartLine = this._primarySelection.startLineNumber;\n\t\tconst primarySelectionEndLine = this._primarySelection.endLineNumber;\n\t\tconst endColumnOfEndLineNumber = model.getLineMaxColumn(primarySelectionEndLine);\n\t\tconst rangeOfText = new Range(primarySelectionStartLine, 1, primarySelectionEndLine, endColumnOfEndLineNumber);\n\t\tconst text = model.getValueInRange(rangeOfText, EndOfLinePreference.TextDefined);\n\t\tconst selectionStartOffset = this._primarySelection.startColumn - 1;\n\t\tconst selectionEndOffset = text.length + this._primarySelection.endColumn - endColumnOfEndLineNumber;\n\t\tconst textStartPositionWithinEditor = rangeOfText.getStartPosition();\n\t\treturn {\n\t\t\ttext,\n\t\t\tselectionStartOffset,\n\t\t\tselectionEndOffset,\n\t\t\ttextStartPositionWithinEditor\n\t\t};\n\t}\n\n\tprivate _handleTextFormatUpdate(e: TextFormatUpdateEvent): void {\n\t\tif (!this._editContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst formats = e.getTextFormats();\n\t\tconst textStartPositionWithinEditor = this._textStartPositionWithinEditor;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tformats.forEach(f => {\n\t\t\tconst textModel = this._context.viewModel.model;\n\t\t\tconst offsetOfEditContextText = textModel.getOffsetAt(textStartPositionWithinEditor);\n\t\t\tconst startPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeStart);\n\t\t\tconst endPositionOfDecoration = textModel.getPositionAt(offsetOfEditContextText + f.rangeEnd);\n\t\t\tconst decorationRange = Range.fromPositions(startPositionOfDecoration, endPositionOfDecoration);\n\t\t\tconst thickness = f.underlineThickness.toLowerCase();\n\t\t\tlet decorationClassName: string = CompositionClassName.NONE;\n\t\t\tswitch (thickness) {\n\t\t\t\tcase 'thin':\n\t\t\t\t\tdecorationClassName = CompositionClassName.SECONDARY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'thick':\n\t\t\t\t\tdecorationClassName = CompositionClassName.PRIMARY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdecorations.push({\n\t\t\t\trange: decorationRange,\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'textFormatDecoration',\n\t\t\t\t\tinlineClassName: decorationClassName,\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tthis._decorations = this._context.viewModel.model.deltaDecorations(this._decorations, decorations);\n\t}\n\n\tprivate _updateSelectionAndControlBounds(ctx: RenderingContext) {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\t\tconst modelStartPosition = this._primarySelection.getStartPosition();\n\t\tconst viewStartPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelStartPosition);\n\t\tconst verticalOffsetStart = this._context.viewLayout.getVerticalOffsetForLineNumber(viewStartPosition.lineNumber);\n\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\t\tconst editorScrollLeft = this._context.viewLayout.getCurrentScrollLeft();\n\n\t\tconst top = parentBounds.top + verticalOffsetStart - editorScrollTop;\n\t\tconst height = (this._primarySelection.endLineNumber - this._primarySelection.startLineNumber + 1) * lineHeight;\n\t\tlet left = parentBounds.left + contentLeft - editorScrollLeft;\n\t\tlet width: number;\n\n\t\tif (this._primarySelection.isEmpty()) {\n\t\t\tconst linesVisibleRanges = ctx.visibleRangeForPosition(viewStartPosition);\n\t\t\tif (linesVisibleRanges) {\n\t\t\t\tleft += linesVisibleRanges.left;\n\t\t\t}\n\t\t\twidth = 0;\n\t\t} else {\n\t\t\twidth = parentBounds.width - contentLeft;\n\t\t}\n\n\t\tconst selectionBounds = new DOMRect(left, top, width, height);\n\t\tthis._editContext.updateSelectionBounds(selectionBounds);\n\t\tthis._editContext.updateControlBounds(selectionBounds);\n\t}\n\n\tprivate _updateCharacterBounds(e: CharacterBoundsUpdateEvent): void {\n\t\tif (!this._parent) {\n\t\t\treturn;\n\t\t}\n\t\tconst options = this._context.configuration.options;\n\t\tconst typicalHalfWidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tconst lineHeight = options.get(EditorOption.lineHeight);\n\t\tconst contentLeft = options.get(EditorOption.layoutInfo).contentLeft;\n\t\tconst parentBounds = this._parent.getBoundingClientRect();\n\n\t\tconst characterBounds: DOMRect[] = [];\n\t\tconst offsetTransformer = new PositionOffsetTransformer(this._editContext.text);\n\t\tfor (let offset = e.rangeStart; offset < e.rangeEnd; offset++) {\n\t\t\tconst editContextStartPosition = offsetTransformer.getPosition(offset);\n\t\t\tconst textStartLineOffsetWithinEditor = this._textStartPositionWithinEditor.lineNumber - 1;\n\t\t\tconst characterStartPosition = new Position(textStartLineOffsetWithinEditor + editContextStartPosition.lineNumber, editContextStartPosition.column);\n\t\t\tconst characterEndPosition = characterStartPosition.delta(0, 1);\n\t\t\tconst characterModelRange = Range.fromPositions(characterStartPosition, characterEndPosition);\n\t\t\tconst characterViewRange = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(characterModelRange);\n\t\t\tconst characterLinesVisibleRanges = this._visibleRangeProvider.linesVisibleRangesForRange(characterViewRange, true) ?? [];\n\t\t\tconst characterVerticalOffset = this._context.viewLayout.getVerticalOffsetForLineNumber(characterViewRange.startLineNumber);\n\t\t\tconst editorScrollTop = this._context.viewLayout.getCurrentScrollTop();\n\t\t\tconst editorScrollLeft = this._context.viewLayout.getCurrentScrollLeft();\n\t\t\tconst top = parentBounds.top + characterVerticalOffset - editorScrollTop;\n\n\t\t\tlet left = 0;\n\t\t\tlet width = typicalHalfWidthCharacterWidth;\n\t\t\tif (characterLinesVisibleRanges.length > 0) {\n\t\t\t\tfor (const visibleRange of characterLinesVisibleRanges[0].ranges) {\n\t\t\t\t\tleft = visibleRange.left;\n\t\t\t\t\twidth = visibleRange.width;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcharacterBounds.push(new DOMRect(parentBounds.left + contentLeft + left - editorScrollLeft, top, width, lineHeight));\n\t\t}\n\t\tthis._editContext.updateCharacterBounds(e.rangeStart, characterBounds);\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(clipboardService: IClipboardService): void {\n\t\tconst options = this._context.configuration.options;\n\t\tconst emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tconst copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tconst selections = this._context.viewModel.getCursorStates().map(cursorState => cursorState.modelState.selection);\n\t\tconst dataToCopy = getDataToCopy(this._context.viewModel, selections, emptySelectionClipboard, copyWithSyntaxHighlighting);\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\t\tclipboardService.writeText(dataToCopy.text);\n\t}\n\n\tprivate _setSelectionChangeListener(viewController: ViewController): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\treturn addDisposableListener(this.domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!this.isFocused() || !isScreenReaderOptimized) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst screenReaderContentState = this._screenReaderSupport.screenReaderContentState;\n\t\t\tif (!screenReaderContentState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeDocument = getActiveWindow().document;\n\t\t\tconst activeDocumentSelection = activeDocument.getSelection();\n\t\t\tif (!activeDocumentSelection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rangeCount = activeDocumentSelection.rangeCount;\n\t\t\tif (rangeCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst range = activeDocumentSelection.getRangeAt(0);\n\t\t\tconst model = this._context.viewModel.model;\n\t\t\tconst offsetOfStartOfScreenReaderContent = model.getOffsetAt(screenReaderContentState.startPositionWithinEditor);\n\t\t\tlet offsetOfSelectionStart = range.startOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tlet offsetOfSelectionEnd = range.endOffset + offsetOfStartOfScreenReaderContent;\n\t\t\tconst modelUsesCRLF = this._context.viewModel.model.getEndOfLineSequence() === EndOfLineSequence.CRLF;\n\t\t\tif (modelUsesCRLF) {\n\t\t\t\tconst screenReaderContentText = screenReaderContentState.value;\n\t\t\t\tconst offsetTransformer = new PositionOffsetTransformer(screenReaderContentText);\n\t\t\t\tconst positionOfStartWithinText = offsetTransformer.getPosition(range.startOffset);\n\t\t\t\tconst positionOfEndWithinText = offsetTransformer.getPosition(range.endOffset);\n\t\t\t\toffsetOfSelectionStart += positionOfStartWithinText.lineNumber - 1;\n\t\t\t\toffsetOfSelectionEnd += positionOfEndWithinText.lineNumber - 1;\n\t\t\t}\n\t\t\tconst positionOfSelectionStart = model.getPositionAt(offsetOfSelectionStart);\n\t\t\tconst positionOfSelectionEnd = model.getPositionAt(offsetOfSelectionEnd);\n\t\t\tconst newSelection = Selection.fromPositions(positionOfSelectionStart, positionOfSelectionEnd);\n\t\t\tviewController.setSelection(newSelection);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["CompositionClassName"]
}
