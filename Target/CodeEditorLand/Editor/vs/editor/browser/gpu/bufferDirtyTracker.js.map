{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/browser/gpu/bufferDirtyTracker.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IBufferDirtyTrackerReader {\n\t/**\n\t * The index of the first dirty index.\n\t */\n\treadonly dataOffset: number | undefined;\n\t/**\n\t * The index of the last dirty index (inclusive).\n\t */\n\treadonly dirtySize: number | undefined;\n\t/**\n\t * Whether the buffer is dirty.\n\t */\n\treadonly isDirty: boolean;\n\t/**\n\t * Clear the dirty state.\n\t */\n\tclear(): void;\n}\n\n/**\n * A simple tracker for dirty regions in a buffer.\n */\nexport class BufferDirtyTracker implements IBufferDirtyTrackerReader {\n\n\tprivate _startIndex: number | undefined;\n\tprivate _endIndex: number | undefined;\n\n\tget dataOffset(): number | undefined {\n\t\treturn this._startIndex;\n\t}\n\n\tget dirtySize(): number | undefined {\n\t\tif (this._startIndex === undefined || this._endIndex === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._endIndex - this._startIndex + 1;\n\t}\n\n\tget isDirty(): boolean { return this._startIndex !== undefined; }\n\n\t/**\n\t * Flag the index(es) as modified. Returns the index flagged.\n\t * @param index An index to flag.\n\t * @param length An optional length to flag. Defaults to 1.\n\t */\n\tflag(index: number, length: number = 1): number {\n\t\tthis._flag(index);\n\t\tif (length > 1) {\n\t\t\tthis._flag(index + length - 1);\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate _flag(index: number) {\n\t\tif (this._startIndex === undefined || index < this._startIndex) {\n\t\t\tthis._startIndex = index;\n\t\t}\n\t\tif (this._endIndex === undefined || index > this._endIndex) {\n\t\t\tthis._endIndex = index;\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._startIndex = undefined;\n\t\tthis._endIndex = undefined;\n\t}\n}\n"],
  "mappings": ";;AA2BO,MAAM,mBAAwD;AAAA,EA3BrE,OA2BqE;AAAA;AAAA;AAAA,EAE5D;AAAA,EACA;AAAA,EAER,IAAI,aAAiC;AACpC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,IAAI,YAAgC;AACnC,QAAI,KAAK,gBAAgB,UAAa,KAAK,cAAc,QAAW;AACnE,aAAO;AAAA,IACR;AACA,WAAO,KAAK,YAAY,KAAK,cAAc;AAAA,EAC5C;AAAA,EAEA,IAAI,UAAmB;AAAE,WAAO,KAAK,gBAAgB;AAAA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhE,KAAK,OAAe,SAAiB,GAAW;AAC/C,SAAK,MAAM,KAAK;AAChB,QAAI,SAAS,GAAG;AACf,WAAK,MAAM,QAAQ,SAAS,CAAC;AAAA,IAC9B;AACA,WAAO;AAAA,EACR;AAAA,EAEQ,MAAM,OAAe;AAC5B,QAAI,KAAK,gBAAgB,UAAa,QAAQ,KAAK,aAAa;AAC/D,WAAK,cAAc;AAAA,IACpB;AACA,QAAI,KAAK,cAAc,UAAa,QAAQ,KAAK,WAAW;AAC3D,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,QAAQ;AACP,SAAK,cAAc;AACnB,SAAK,YAAY;AAAA,EAClB;AACD;",
  "names": []
}
