{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/browser/gpu/rectangleRenderer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from '../../../base/browser/dom.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IReference, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { EditorOption } from '../../common/config/editorOptions.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nimport type { ViewScrollChangedEvent } from '../../common/viewEvents.js';\nimport type { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport type { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { GPULifecycle } from './gpuDisposable.js';\nimport { observeDevicePixelDimensions, quadVertices } from './gpuUtils.js';\nimport { createObjectCollectionBuffer, type IObjectCollectionBuffer, type IObjectCollectionBufferEntry } from './objectCollectionBuffer.js';\nimport { RectangleRendererBindingId, rectangleRendererWgsl } from './rectangleRenderer.wgsl.js';\n\nexport type RectangleRendererEntrySpec = [\n\t{ name: 'x' },\n\t{ name: 'y' },\n\t{ name: 'width' },\n\t{ name: 'height' },\n\t{ name: 'red' },\n\t{ name: 'green' },\n\t{ name: 'blue' },\n\t{ name: 'alpha' },\n];\n\nexport class RectangleRenderer extends ViewEventHandler {\n\n\tprivate _device!: GPUDevice;\n\tprivate _renderPassDescriptor!: GPURenderPassDescriptor;\n\tprivate _renderPassColorAttachment!: GPURenderPassColorAttachment;\n\tprivate _bindGroup!: GPUBindGroup;\n\tprivate _pipeline!: GPURenderPipeline;\n\n\tprivate _vertexBuffer!: GPUBuffer;\n\tprivate readonly _shapeBindBuffer: MutableDisposable<IReference<GPUBuffer>> = this._register(new MutableDisposable());\n\n\tprivate _scrollOffsetBindBuffer!: GPUBuffer;\n\tprivate _scrollOffsetValueBuffer!: Float32Array;\n\n\tprivate _initialized: boolean = false;\n\tprivate _scrollChanged: boolean = true;\n\n\tprivate readonly _shapeCollection: IObjectCollectionBuffer<RectangleRendererEntrySpec> = this._register(createObjectCollectionBuffer([\n\t\t{ name: 'x' },\n\t\t{ name: 'y' },\n\t\t{ name: 'width' },\n\t\t{ name: 'height' },\n\t\t{ name: 'red' },\n\t\t{ name: 'green' },\n\t\t{ name: 'blue' },\n\t\t{ name: 'alpha' },\n\t], 32));\n\n\tconstructor(\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _canvas: HTMLCanvasElement,\n\t\tprivate readonly _ctx: GPUCanvasContext,\n\t\tdevice: Promise<GPUDevice>,\n\t) {\n\t\tsuper();\n\n\t\tthis._context.addEventHandler(this);\n\n\t\tthis._initWebgpu(device);\n\t}\n\n\tprivate async _initWebgpu(device: Promise<GPUDevice>) {\n\n\t\t// #region General\n\n\t\tthis._device = await device;\n\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\t\tthis._ctx.configure({\n\t\t\tdevice: this._device,\n\t\t\tformat: presentationFormat,\n\t\t\talphaMode: 'premultiplied',\n\t\t});\n\n\t\tthis._renderPassColorAttachment = {\n\t\t\tview: null!, // Will be filled at render time\n\t\t\tloadOp: 'load',\n\t\t\tstoreOp: 'store',\n\t\t};\n\t\tthis._renderPassDescriptor = {\n\t\t\tlabel: 'Monaco rectangle renderer render pass',\n\t\t\tcolorAttachments: [this._renderPassColorAttachment],\n\t\t};\n\n\t\t// #endregion General\n\n\t\t// #region Uniforms\n\n\t\tlet layoutInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tconst enum Info {\n\t\t\t\tFloatsPerEntry = 6,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_CanvasWidth____ = 0,\n\t\t\t\tOffset_CanvasHeight___ = 1,\n\t\t\t\tOffset_ViewportOffsetX = 2,\n\t\t\t\tOffset_ViewportOffsetY = 3,\n\t\t\t\tOffset_ViewportWidth__ = 4,\n\t\t\t\tOffset_ViewportHeight_ = 5,\n\t\t\t}\n\t\t\tconst bufferValues = new Float32Array(Info.FloatsPerEntry);\n\t\t\tconst updateBufferValues = (canvasDevicePixelWidth: number = this._canvas.width, canvasDevicePixelHeight: number = this._canvas.height) => {\n\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] = canvasDevicePixelWidth;\n\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] = canvasDevicePixelHeight;\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX] = Math.ceil(this._context.configuration.options.get(EditorOption.layoutInfo).contentLeft * getActiveWindow().devicePixelRatio);\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY] = 0;\n\t\t\t\tbufferValues[Info.Offset_ViewportWidth__] = bufferValues[Info.Offset_CanvasWidth____] - bufferValues[Info.Offset_ViewportOffsetX];\n\t\t\t\tbufferValues[Info.Offset_ViewportHeight_] = bufferValues[Info.Offset_CanvasHeight___] - bufferValues[Info.Offset_ViewportOffsetY];\n\t\t\t\treturn bufferValues;\n\t\t\t};\n\t\t\tlayoutInfoUniformBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer uniform buffer',\n\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t}, () => updateBufferValues())).object;\n\t\t\tthis._register(observeDevicePixelDimensions(this._canvas, getActiveWindow(), (w, h) => {\n\t\t\t\tthis._device.queue.writeBuffer(layoutInfoUniformBuffer, 0, updateBufferValues(w, h));\n\t\t\t}));\n\t\t}\n\n\t\tconst scrollOffsetBufferSize = 2;\n\t\tthis._scrollOffsetBindBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer scroll offset buffer',\n\t\t\tsize: scrollOffsetBufferSize * Float32Array.BYTES_PER_ELEMENT,\n\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t})).object;\n\t\tthis._scrollOffsetValueBuffer = new Float32Array(scrollOffsetBufferSize);\n\n\t\t// #endregion Uniforms\n\n\t\t// #region Storage buffers\n\n\t\tconst createShapeBindBuffer = () => {\n\t\t\treturn GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer shape buffer',\n\t\t\t\tsize: this._shapeCollection.buffer.byteLength,\n\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t\t});\n\t\t};\n\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\tthis._register(Event.runAndSubscribe(this._shapeCollection.onDidChangeBuffer, () => {\n\t\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\t\tif (this._pipeline) {\n\t\t\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\t\t\t}\n\t\t}));\n\n\t\t// #endregion Storage buffers\n\n\t\t// #region Vertex buffer\n\n\t\tthis._vertexBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer vertex buffer',\n\t\t\tsize: quadVertices.byteLength,\n\t\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t\t}, quadVertices)).object;\n\n\t\t// #endregion Vertex buffer\n\n\t\t// #region Shader module\n\n\t\tconst module = this._device.createShaderModule({\n\t\t\tlabel: 'Monaco rectangle renderer shader module',\n\t\t\tcode: rectangleRendererWgsl,\n\t\t});\n\n\t\t// #endregion Shader module\n\n\t\t// #region Pipeline\n\n\t\tthis._pipeline = this._device.createRenderPipeline({\n\t\t\tlabel: 'Monaco rectangle renderer render pipeline',\n\t\t\tlayout: 'auto',\n\t\t\tvertex: {\n\t\t\t\tmodule,\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tarrayStride: 2 * Float32Array.BYTES_PER_ELEMENT, // 2 floats, 4 bytes each\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{ shaderLocation: 0, offset: 0, format: 'float32x2' },  // position\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule,\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: presentationFormat,\n\t\t\t\t\t\tblend: {\n\t\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\talpha: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\t// #endregion Pipeline\n\n\t\t// #region Bind group\n\n\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\n\t\t// endregion Bind group\n\n\t\tthis._initialized = true;\n\t}\n\n\tprivate _updateBindGroup(pipeline: GPURenderPipeline, layoutInfoUniformBuffer: GPUBuffer) {\n\t\tthis._bindGroup = this._device.createBindGroup({\n\t\t\tlabel: 'Monaco rectangle renderer bind group',\n\t\t\tlayout: pipeline.getBindGroupLayout(0),\n\t\t\tentries: [\n\t\t\t\t{ binding: RectangleRendererBindingId.Shapes, resource: { buffer: this._shapeBindBuffer.value!.object } },\n\t\t\t\t{ binding: RectangleRendererBindingId.LayoutInfoUniform, resource: { buffer: layoutInfoUniformBuffer } },\n\t\t\t\t{ binding: RectangleRendererBindingId.ScrollOffset, resource: { buffer: this._scrollOffsetBindBuffer } },\n\t\t\t],\n\t\t});\n\t}\n\n\tregister(x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number): IObjectCollectionBufferEntry<RectangleRendererEntrySpec> {\n\t\treturn this._shapeCollection.createEntry({ x, y, width, height, red, green, blue, alpha });\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\tthis._scrollChanged = true;\n\t\treturn super.onScrollChanged(e);\n\t}\n\n\t// --- end event handlers\n\n\tprivate _update() {\n\t\tconst shapes = this._shapeCollection;\n\t\tif (shapes.dirtyTracker.isDirty) {\n\t\t\tthis._device.queue.writeBuffer(this._shapeBindBuffer.value!.object, 0, shapes.buffer, shapes.dirtyTracker.dataOffset, shapes.dirtyTracker.dirtySize! * shapes.view.BYTES_PER_ELEMENT);\n\t\t\tshapes.dirtyTracker.clear();\n\t\t}\n\n\t\t// Update scroll offset\n\t\tif (this._scrollChanged) {\n\t\t\tconst dpr = getActiveWindow().devicePixelRatio;\n\t\t\tthis._scrollOffsetValueBuffer[0] = this._context.viewLayout.getCurrentScrollLeft() * dpr;\n\t\t\tthis._scrollOffsetValueBuffer[1] = this._context.viewLayout.getCurrentScrollTop() * dpr;\n\t\t\tthis._device.queue.writeBuffer(this._scrollOffsetBindBuffer, 0, this._scrollOffsetValueBuffer);\n\t\t}\n\t}\n\n\tdraw(viewportData: ViewportData) {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._update();\n\n\t\tconst encoder = this._device.createCommandEncoder({ label: 'Monaco rectangle renderer command encoder' });\n\n\t\tthis._renderPassColorAttachment.view = this._ctx.getCurrentTexture().createView();\n\t\tconst pass = encoder.beginRenderPass(this._renderPassDescriptor);\n\t\tpass.setPipeline(this._pipeline);\n\t\tpass.setVertexBuffer(0, this._vertexBuffer);\n\t\tpass.setBindGroup(0, this._bindGroup);\n\n\t\tpass.draw(quadVertices.length / 2, this._shapeCollection.entryCount);\n\t\tpass.end();\n\n\t\tconst commandBuffer = encoder.finish();\n\t\tthis._device.queue.submit([commandBuffer]);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["Info"]
}
