import{findLastIdxMonotonous as f}from"../../../base/common/arraysFind.js";import{OffsetRange as o}from"./offsetRange.js";import{Position as h}from"./position.js";import{Range as g}from"./range.js";import{TextLength as n}from"./textLength.js";class L{constructor(t){this.text=t;this.lineStartOffsetByLineIdx=[],this.lineEndOffsetByLineIdx=[],this.lineStartOffsetByLineIdx.push(0);for(let e=0;e<t.length;e++)t.charAt(e)===`
`&&(this.lineStartOffsetByLineIdx.push(e+1),e>0&&t.charAt(e-1)==="\r"?this.lineEndOffsetByLineIdx.push(e-1):this.lineEndOffsetByLineIdx.push(e));this.lineEndOffsetByLineIdx.push(t.length)}lineStartOffsetByLineIdx;lineEndOffsetByLineIdx;getOffset(t){return this.lineStartOffsetByLineIdx[t.lineNumber-1]+t.column-1}getOffsetRange(t){return new o(this.getOffset(t.getStartPosition()),this.getOffset(t.getEndPosition()))}getPosition(t){const e=f(this.lineStartOffsetByLineIdx,r=>r<=t),i=e+1,s=t-this.lineStartOffsetByLineIdx[e]+1;return new h(i,s)}getRange(t){return g.fromPositions(this.getPosition(t.start),this.getPosition(t.endExclusive))}getTextLength(t){return n.ofRange(this.getRange(t))}get textLength(){const t=this.lineStartOffsetByLineIdx.length-1;return new n(t,this.text.length-this.lineStartOffsetByLineIdx[t])}getLineLength(t){return this.lineEndOffsetByLineIdx[t-1]-this.lineStartOffsetByLineIdx[t-1]}}export{L as PositionOffsetTransformer};
