{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/common/diff/rangeMapping.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupAdjacentBy } from '../../../base/common/arrays.js';\nimport { assertFn, checkAdjacentItems } from '../../../base/common/assert.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { AbstractText, SingleTextEdit, TextEdit } from '../core/textEdit.js';\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n\tpublic static inverse(mapping: readonly LineRangeMapping[], originalLineCount: number, modifiedLineCount: number): LineRangeMapping[] {\n\t\tconst result: LineRangeMapping[] = [];\n\t\tlet lastOriginalEndLineNumber = 1;\n\t\tlet lastModifiedEndLineNumber = 1;\n\n\t\tfor (const m of mapping) {\n\t\t\tconst r = new LineRangeMapping(\n\t\t\t\tnew LineRange(lastOriginalEndLineNumber, m.original.startLineNumber),\n\t\t\t\tnew LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber),\n\t\t\t);\n\t\t\tif (!r.modified.isEmpty) {\n\t\t\t\tresult.push(r);\n\t\t\t}\n\t\t\tlastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n\t\t\tlastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n\t\t}\n\t\tconst r = new LineRangeMapping(\n\t\t\tnew LineRange(lastOriginalEndLineNumber, originalLineCount + 1),\n\t\t\tnew LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1),\n\t\t);\n\t\tif (!r.modified.isEmpty) {\n\t\t\tresult.push(r);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static clip(mapping: readonly LineRangeMapping[], originalRange: LineRange, modifiedRange: LineRange): LineRangeMapping[] {\n\t\tconst result: LineRangeMapping[] = [];\n\t\tfor (const m of mapping) {\n\t\t\tconst original = m.original.intersect(originalRange);\n\t\t\tconst modified = m.modified.intersect(modifiedRange);\n\t\t\tif (original && !original.isEmpty && modified && !modified.isEmpty) {\n\t\t\t\tresult.push(new LineRangeMapping(original, modified));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The line range in the original text model.\n\t */\n\tpublic readonly original: LineRange;\n\n\t/**\n\t * The line range in the modified text model.\n\t */\n\tpublic readonly modified: LineRange;\n\n\tconstructor(\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange\n\t) {\n\t\tthis.original = originalRange;\n\t\tthis.modified = modifiedRange;\n\t}\n\n\n\tpublic toString(): string {\n\t\treturn `{${this.original.toString()}->${this.modified.toString()}}`;\n\t}\n\n\tpublic flip(): LineRangeMapping {\n\t\treturn new LineRangeMapping(this.modified, this.original);\n\t}\n\n\tpublic join(other: LineRangeMapping): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.original.join(other.original),\n\t\t\tthis.modified.join(other.modified)\n\t\t);\n\t}\n\n\tpublic get changedLineCount() {\n\t\treturn Math.max(this.original.length, this.modified.length);\n\t}\n\n\t/**\n\t * This method assumes that the LineRangeMapping describes a valid diff!\n\t * I.e. if one range is empty, the other range cannot be the entire document.\n\t * It avoids various problems when the line range points to non-existing line-numbers.\n\t*/\n\tpublic toRangeMapping(): RangeMapping {\n\t\tconst origInclusiveRange = this.original.toInclusiveRange();\n\t\tconst modInclusiveRange = this.modified.toInclusiveRange();\n\t\tif (origInclusiveRange && modInclusiveRange) {\n\t\t\treturn new RangeMapping(origInclusiveRange, modInclusiveRange);\n\t\t} else if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {\n\t\t\tif (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) {\n\t\t\t\t// If one line range starts at 1, the other one must start at 1 as well.\n\t\t\t\tthrow new BugIndicatingError('not a valid diff');\n\t\t\t}\n\n\t\t\t// Because one range is empty and both ranges start at line 1, none of the ranges can cover all lines.\n\t\t\t// Thus, `endLineNumberExclusive` is a valid line number.\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1),\n\t\t\t\tnew Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1),\n\t\t\t);\n\t\t} else {\n\t\t\t// We can assume here that both startLineNumbers are greater than 1.\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER),\n\t\t\t\tnew Range(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER, this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * This method assumes that the LineRangeMapping describes a valid diff!\n\t * I.e. if one range is empty, the other range cannot be the entire document.\n\t * It avoids various problems when the line range points to non-existing line-numbers.\n\t*/\n\tpublic toRangeMapping2(original: string[], modified: string[]): RangeMapping {\n\t\tif (isValidLineNumber(this.original.endLineNumberExclusive, original)\n\t\t\t&& isValidLineNumber(this.modified.endLineNumberExclusive, modified)) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tnew Range(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1),\n\t\t\t\tnew Range(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1),\n\t\t\t);\n\t\t}\n\n\t\tif (!this.original.isEmpty && !this.modified.isEmpty) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnew Position(this.original.startLineNumber, 1),\n\t\t\t\t\tnormalizePosition(new Position(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), original)\n\t\t\t\t),\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnew Position(this.modified.startLineNumber, 1),\n\t\t\t\t\tnormalizePosition(new Position(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), modified)\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\tif (this.original.startLineNumber > 1 && this.modified.startLineNumber > 1) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnormalizePosition(new Position(this.original.startLineNumber - 1, Number.MAX_SAFE_INTEGER), original),\n\t\t\t\t\tnormalizePosition(new Position(this.original.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), original)\n\t\t\t\t),\n\t\t\t\tRange.fromPositions(\n\t\t\t\t\tnormalizePosition(new Position(this.modified.startLineNumber - 1, Number.MAX_SAFE_INTEGER), modified),\n\t\t\t\t\tnormalizePosition(new Position(this.modified.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER), modified)\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\t\t// Situation now: one range is empty and one range touches the last line and one range starts at line 1.\n\t\t// I don't think this can happen.\n\n\t\tthrow new BugIndicatingError();\n\t}\n}\n\nfunction normalizePosition(position: Position, content: string[]): Position {\n\tif (position.lineNumber < 1) {\n\t\treturn new Position(1, 1);\n\t}\n\tif (position.lineNumber > content.length) {\n\t\treturn new Position(content.length, content[content.length - 1].length + 1);\n\t}\n\tconst line = content[position.lineNumber - 1];\n\tif (position.column > line.length + 1) {\n\t\treturn new Position(position.lineNumber, line.length + 1);\n\t}\n\treturn position;\n}\n\nfunction isValidLineNumber(lineNumber: number, lines: string[]): boolean {\n\treturn lineNumber >= 1 && lineNumber <= lines.length;\n}\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n\tpublic static fromRangeMappings(rangeMappings: RangeMapping[]): DetailedLineRangeMapping {\n\t\tconst originalRange = LineRange.join(rangeMappings.map(r => LineRange.fromRangeInclusive(r.originalRange)));\n\t\tconst modifiedRange = LineRange.join(rangeMappings.map(r => LineRange.fromRangeInclusive(r.modifiedRange)));\n\t\treturn new DetailedLineRangeMapping(originalRange, modifiedRange, rangeMappings);\n\t}\n\n\t/**\n\t * If inner changes have not been computed, this is set to undefined.\n\t * Otherwise, it represents the character-level diff in this line range.\n\t * The original range of each range mapping should be contained in the original line range (same for modified), exceptions are new-lines.\n\t * Must not be an empty array.\n\t */\n\tpublic readonly innerChanges: RangeMapping[] | undefined;\n\n\tconstructor(\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange,\n\t\tinnerChanges: RangeMapping[] | undefined\n\t) {\n\t\tsuper(originalRange, modifiedRange);\n\t\tthis.innerChanges = innerChanges;\n\t}\n\n\tpublic override flip(): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(this.modified, this.original, this.innerChanges?.map(c => c.flip()));\n\t}\n\n\tpublic withInnerChangesFromLineRanges(): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(this.original, this.modified, [this.toRangeMapping()]);\n\t}\n}\n\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n\tpublic static fromEdit(edit: TextEdit): RangeMapping[] {\n\t\tconst newRanges = edit.getNewRanges();\n\t\tconst result = edit.edits.map((e, idx) => new RangeMapping(e.range, newRanges[idx]));\n\t\treturn result;\n\t}\n\n\tpublic static fromEditJoin(edit: TextEdit): RangeMapping {\n\t\tconst newRanges = edit.getNewRanges();\n\t\tconst result = edit.edits.map((e, idx) => new RangeMapping(e.range, newRanges[idx]));\n\t\treturn RangeMapping.join(result);\n\t}\n\n\tpublic static join(rangeMappings: RangeMapping[]): RangeMapping {\n\t\tif (rangeMappings.length === 0) {\n\t\t\tthrow new BugIndicatingError('Cannot join an empty list of range mappings');\n\t\t}\n\t\tlet result = rangeMappings[0];\n\t\tfor (let i = 1; i < rangeMappings.length; i++) {\n\t\t\tresult = result.join(rangeMappings[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static assertSorted(rangeMappings: RangeMapping[]): void {\n\t\tfor (let i = 1; i < rangeMappings.length; i++) {\n\t\t\tconst previous = rangeMappings[i - 1];\n\t\t\tconst current = rangeMappings[i];\n\t\t\tif (!(\n\t\t\t\tprevious.originalRange.getEndPosition().isBeforeOrEqual(current.originalRange.getStartPosition())\n\t\t\t\t&& previous.modifiedRange.getEndPosition().isBeforeOrEqual(current.modifiedRange.getStartPosition())\n\t\t\t)) {\n\t\t\t\tthrow new BugIndicatingError('Range mappings must be sorted');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The original range.\n\t */\n\treadonly originalRange: Range;\n\n\t/**\n\t * The modified range.\n\t */\n\treadonly modifiedRange: Range;\n\n\tconstructor(\n\t\toriginalRange: Range,\n\t\tmodifiedRange: Range\n\t) {\n\t\tthis.originalRange = originalRange;\n\t\tthis.modifiedRange = modifiedRange;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n\t}\n\n\tpublic flip(): RangeMapping {\n\t\treturn new RangeMapping(this.modifiedRange, this.originalRange);\n\t}\n\n\t/**\n\t * Creates a single text edit that describes the change from the original to the modified text.\n\t*/\n\tpublic toTextEdit(modified: AbstractText): SingleTextEdit {\n\t\tconst newText = modified.getValueOfRange(this.modifiedRange);\n\t\treturn new SingleTextEdit(this.originalRange, newText);\n\t}\n\n\tpublic join(other: RangeMapping): RangeMapping {\n\t\treturn new RangeMapping(\n\t\t\tthis.originalRange.plusRange(other.originalRange),\n\t\t\tthis.modifiedRange.plusRange(other.modifiedRange)\n\t\t);\n\t}\n}\n\nexport function lineRangeMappingFromRangeMappings(alignments: readonly RangeMapping[], originalLines: AbstractText, modifiedLines: AbstractText, dontAssertStartLine: boolean = false): DetailedLineRangeMapping[] {\n\tconst changes: DetailedLineRangeMapping[] = [];\n\tfor (const g of groupAdjacentBy(\n\t\talignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)),\n\t\t(a1, a2) =>\n\t\t\ta1.original.overlapOrTouch(a2.original)\n\t\t\t|| a1.modified.overlapOrTouch(a2.modified)\n\t)) {\n\t\tconst first = g[0];\n\t\tconst last = g[g.length - 1];\n\n\t\tchanges.push(new DetailedLineRangeMapping(\n\t\t\tfirst.original.join(last.original),\n\t\t\tfirst.modified.join(last.modified),\n\t\t\tg.map(a => a.innerChanges![0]),\n\t\t));\n\t}\n\n\tassertFn(() => {\n\t\tif (!dontAssertStartLine && changes.length > 0) {\n\t\t\tif (changes[0].modified.startLineNumber !== changes[0].original.startLineNumber) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (modifiedLines.length.lineCount - changes[changes.length - 1].modified.endLineNumberExclusive !== originalLines.length.lineCount - changes[changes.length - 1].original.endLineNumberExclusive) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn checkAdjacentItems(changes,\n\t\t\t(m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\n\t\t\t\tm1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n\t\t\t\tm1.modified.endLineNumberExclusive < m2.modified.startLineNumber,\n\t\t);\n\t});\n\n\treturn changes;\n}\n\nexport function getLineRangeMapping(rangeMapping: RangeMapping, originalLines: AbstractText, modifiedLines: AbstractText): DetailedLineRangeMapping {\n\tlet lineStartDelta = 0;\n\tlet lineEndDelta = 0;\n\n\t// rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\n\n\t// original: ]xxx \\n <- this line is not modified\n\t// modified: ]xx  \\n\n\tif (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\n\t\t&& rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\n\t\t&& rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\n\t\t// We can only do this if the range is not empty yet\n\t\tlineEndDelta = -1;\n\t}\n\n\t// original: xxx[ \\n <- this line is not modified\n\t// modified: xxx[ \\n\n\tif (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines.getLineLength(rangeMapping.modifiedRange.startLineNumber)\n\t\t&& rangeMapping.originalRange.startColumn - 1 >= originalLines.getLineLength(rangeMapping.originalRange.startLineNumber)\n\t\t&& rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta\n\t\t&& rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\n\t\t// We can only do this if the range is not empty yet\n\t\tlineStartDelta = 1;\n\t}\n\n\tconst originalLineRange = new LineRange(\n\t\trangeMapping.originalRange.startLineNumber + lineStartDelta,\n\t\trangeMapping.originalRange.endLineNumber + 1 + lineEndDelta\n\t);\n\tconst modifiedLineRange = new LineRange(\n\t\trangeMapping.modifiedRange.startLineNumber + lineStartDelta,\n\t\trangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta\n\t);\n\n\treturn new DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\n}\n"],
  "mappings": "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",
  "names": ["r"]
}
