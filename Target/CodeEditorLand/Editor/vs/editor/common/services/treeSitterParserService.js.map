{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/common/services/treeSitterParserService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../model.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { Range } from '../core/range.js';\n\nexport const EDITOR_EXPERIMENTAL_PREFER_TREESITTER = 'editor.experimental.preferTreeSitter';\n\nexport const ITreeSitterParserService = createDecorator<ITreeSitterParserService>('treeSitterParserService');\n\nexport interface ITreeSitterParserService {\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }>;\n\tgetOrInitLanguage(languageId: string): Parser.Language | undefined;\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined;\n\tgetTree(content: string, languageId: string): Promise<Parser.Tree | undefined>;\n\tonDidUpdateTree: Event<{ textModel: ITextModel; ranges: Range[] }>;\n}\n\nexport interface ITreeSitterParseResult {\n\treadonly tree: Parser.Tree | undefined;\n\treadonly language: Parser.Language;\n}\n"],
  "mappings": "AAMA,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,uBAAuB;AAChC,SAAS,aAAa;AAEf,MAAM,wCAAwC;AAE9C,MAAM,2BAA2B,gBAA0C,yBAAyB;",
  "names": []
}
