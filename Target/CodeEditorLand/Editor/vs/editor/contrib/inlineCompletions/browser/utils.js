import{Permutation as c,compareBy as d}from"../../../../base/common/arrays.js";import{BugIndicatingError as y}from"../../../../base/common/errors.js";import"../../../../base/common/lifecycle.js";import{observableValue as l,autorun as g,transaction as x}from"../../../../base/common/observable.js";import{splitLinesIncludeSeparators as p}from"../../../../base/common/strings.js";import"../../../../platform/contextkey/common/contextkey.js";import{bindContextKey as f}from"../../../../platform/observable/common/platformObservableUtils.js";import{Position as u}from"../../../common/core/position.js";import{Range as b}from"../../../common/core/range.js";import{TextEdit as v}from"../../../common/core/textEdit.js";const T=[];function F(){return T}class L{constructor(e,r){this.startColumn=e;this.endColumnExclusive=r;if(e>r)throw new y(`startColumn ${e} cannot be after endColumnExclusive ${r}`)}toRange(e){return new b(e,this.startColumn,e,this.endColumnExclusive)}equals(e){return this.startColumn===e.startColumn&&this.endColumnExclusive===e.endColumnExclusive}}function U(t,e){return new u(t.lineNumber+e.lineNumber-1,e.lineNumber===1?t.column+e.column-1:e.column)}function j(t,e){return new u(t.lineNumber-e.lineNumber+1,t.lineNumber-e.lineNumber===0?t.column-e.column+1:t.column)}function z(t,e){let r="";const n=p(t);for(let i=e.lineNumber-1;i<n.length;i++)r+=n[i].substring(i===e.lineNumber-1?e.column-1:0);return r}function G(t){const e=c.createSortPermutation(t,d(o=>o.range,b.compareRangesUsingStarts)),n=new v(e.apply(t)).getNewRanges();return e.inverse().apply(n).map(o=>o.getEndPosition())}function H(t,e){const r=l("result",[]),n=[];return e.add(g(i=>{const o=t.read(i);x(s=>{if(o.length!==n.length){n.length=o.length;for(let a=0;a<n.length;a++)n[a]||(n[a]=l("item",o[a]));r.set([...n],s)}n.forEach((a,m)=>a.set(o[m],s))})})),r}class J{constructor(e){this._contextKeyService=e}bind(e,r){return f(e,this._contextKeyService,r instanceof Function?r:n=>r.read(n))}}export{L as ColumnRange,J as ObservableContextKeyService,U as addPositions,H as convertItemsToStableObservables,G as getEndPositionsAfterApplying,F as getReadonlyEmptyArray,z as substringPos,j as subtractPositions};
