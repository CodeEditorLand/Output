{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/editor/standalone/browser/standaloneTreeSitterService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Parser } from '@vscode/tree-sitter-wasm';\nimport { Event } from '../../../base/common/event.js';\nimport { ITextModel } from '../../common/model.js';\nimport { ITreeSitterParseResult, ITreeSitterParserService } from '../../common/services/treeSitterParserService.js';\nimport { Range } from '../../common/core/range.js';\n\n/**\n * The monaco build doesn't like the dynamic import of tree sitter in the real service.\n * We use a dummy sertive here to make the build happy.\n */\nexport class StandaloneTreeSitterParserService implements ITreeSitterParserService {\n\tasync getTree(content: string, languageId: string): Promise<Parser.Tree | undefined> {\n\t\treturn undefined;\n\t}\n\tonDidUpdateTree: Event<{ textModel: ITextModel; ranges: Range[] }> = Event.None;\n\treadonly _serviceBrand: undefined;\n\tonDidAddLanguage: Event<{ id: string; language: Parser.Language }> = Event.None;\n\n\tgetOrInitLanguage(_languageId: string): Parser.Language | undefined {\n\t\treturn undefined;\n\t}\n\tgetParseResult(textModel: ITextModel): ITreeSitterParseResult | undefined {\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB,gCAAgC;AACjE,SAAS,aAAa;AAMf,MAAM,kCAAsE;AAAA,EAfnF,OAemF;AAAA;AAAA;AAAA,EAClF,MAAM,QAAQ,SAAiB,YAAsD;AACpF,WAAO;AAAA,EACR;AAAA,EACA,kBAAqE,MAAM;AAAA,EAClE;AAAA,EACT,mBAAqE,MAAM;AAAA,EAE3E,kBAAkB,aAAkD;AACnE,WAAO;AAAA,EACR;AAAA,EACA,eAAe,WAA2D;AACzE,WAAO;AAAA,EACR;AACD;",
  "names": []
}
