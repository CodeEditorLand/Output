var v=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=(a,e,n,r)=>{for(var i=r>1?void 0:r?p(e,n):e,s=a.length-1,o;s>=0;s--)(o=a[s])&&(i=(r?o(e,n,i):o(i))||i);return r&&i&&v(e,n,i),i},l=(a,e)=>(n,r)=>e(n,r,a);import{getErrorMessage as m}from"../../../base/common/errors.js";import"../../extensions/common/extensions.js";import{createDecorator as S}from"../../instantiation/common/instantiation.js";import{ILogService as x,LogLevel as y}from"../../log/common/log.js";import{ITelemetryService as h}from"../../telemetry/common/telemetry.js";import{ExtensionSignatureVerificationCode as E}from"../common/extensionManagement.js";const b=S("IExtensionSignatureVerificationService");let c=class{constructor(e,n){this.logService=e;this.telemetryService=n}moduleLoadingPromise;vsceSign(){return this.moduleLoadingPromise||(this.moduleLoadingPromise=this.resolveVsceSign()),this.moduleLoadingPromise}async resolveVsceSign(){return import("@vscode/vsce-sign")}async verify(e,n,r,i,s){let o;try{o=await this.vsceSign()}catch(u){this.logService.error("Could not load vsce-sign module",m(u)),this.logService.info(`Extension signature verification is not done: ${e}`);return}const f=new Date().getTime();let t;try{this.logService.trace(`Verifying extension signature for ${e}...`),t=await o.verify(r,i,this.logService.getLevel()===y.Trace)}catch(u){t={code:E.UnknownError,didExecute:!1,output:m(u)}}const d=new Date().getTime()-f;return this.logService.info(`Extension signature verification result for ${e}: ${t.code}. Executed: ${t.didExecute}. Duration: ${d}ms.`),this.logService.trace(`Extension signature verification output for ${e}:
${t.output}`),this.telemetryService.publicLog2("extensionsignature:verification",{extensionId:e,extensionVersion:n,code:t.code,internalCode:t.internalCode,duration:d,didExecute:t.didExecute,clientTargetPlatform:s}),{code:t.code}}};c=g([l(0,x),l(1,h)],c);export{c as ExtensionSignatureVerificationService,b as IExtensionSignatureVerificationService};
