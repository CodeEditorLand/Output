{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/platform/observable/common/wrapInHotClass.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isHotReloadEnabled } from '../../../base/common/hotReload.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { autorunWithStore, IObservable } from '../../../base/common/observable.js';\nimport { BrandedService, GetLeadingNonServiceArgs, IInstantiationService } from '../../instantiation/common/instantiation.js';\n\nexport function hotClassGetOriginalInstance<T>(value: T): T {\n\tif (value instanceof BaseClass) {\n\t\treturn value._instance as any;\n\t}\n\treturn value;\n}\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n*/\nexport function wrapInHotClass0<TArgs extends BrandedService[]>(clazz: IObservable<Result<TArgs>>): Result<GetLeadingNonServiceArgs<TArgs>> {\n\treturn !isHotReloadEnabled() ? clazz.get() : createWrapper(clazz, BaseClass0);\n}\n\ntype Result<TArgs extends any[]> = new (...args: TArgs) => IDisposable;\n\nclass BaseClass {\n\tpublic _instance: unknown;\n\n\tconstructor(\n\t\tpublic readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tpublic init(...params: any[]): void { }\n}\n\nfunction createWrapper<T extends any[]>(clazz: IObservable<any>, B: new (...args: T) => BaseClass) {\n\treturn (class ReloadableWrapper extends B {\n\t\tprivate _autorun: IDisposable | undefined = undefined;\n\n\t\toverride init(...params: any[]) {\n\t\t\tthis._autorun = autorunWithStore((reader, store) => {\n\t\t\t\tconst clazz_ = clazz.read(reader);\n\t\t\t\tthis._instance = store.add(this.instantiationService.createInstance(clazz_, ...params) as IDisposable);\n\t\t\t});\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._autorun?.dispose();\n\t\t}\n\t}) as any;\n}\n\nclass BaseClass0 extends BaseClass {\n\tconstructor(@IInstantiationService i: IInstantiationService) { super(i); this.init(); }\n}\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n*/\nexport function wrapInHotClass1<TArgs extends [any, ...BrandedService[]]>(clazz: IObservable<Result<TArgs>>): Result<GetLeadingNonServiceArgs<TArgs>> {\n\treturn !isHotReloadEnabled() ? clazz.get() : createWrapper(clazz, BaseClass1);\n}\n\nclass BaseClass1 extends BaseClass {\n\tconstructor(param1: any, @IInstantiationService i: IInstantiationService,) { super(i); this.init(param1); }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAIA,SAAS,0BAA0B;AACnC,SAAS,mBAAmB;AAC5B,SAAS,kBAAkB,mBAAmB;AAC9C,SAAS,gBAAgB,0BAA0B,6BAA6B;AAEzE,SAAS,4BAA+B,OAAa;AAC3D,MAAI,iBAAiB,WAAW;AAC/B,WAAO,MAAM;AAAA,EACd;AACA,SAAO;AACR;AALgB;AAYT,SAAS,gBAAgD,OAA4E;AAC3I,SAAO,CAAC,mBAAmB,IAAI,MAAM,IAAI,IAAI,cAAc,OAAO,UAAU;AAC7E;AAFgB;AAMhB,MAAM,UAAU;AAAA,EAGf,YACiB,sBACf;AADe;AAAA,EACb;AAAA,EAhCL,OA2BgB;AAAA;AAAA;AAAA,EACR;AAAA,EAMA,QAAQ,QAAqB;AAAA,EAAE;AACvC;AAEA,SAAS,cAA+B,OAAyB,GAAkC;AAClG,SAAQ,MAAM,0BAA0B,EAAE;AAAA,IAtC3C,OAsC2C;AAAA;AAAA;AAAA,IACjC,WAAoC;AAAA,IAEnC,QAAQ,QAAe;AAC/B,WAAK,WAAW,iBAAiB,CAAC,QAAQ,UAAU;AACnD,cAAM,SAAS,MAAM,KAAK,MAAM;AAChC,aAAK,YAAY,MAAM,IAAI,KAAK,qBAAqB,eAAe,QAAQ,GAAG,MAAM,CAAgB;AAAA,MACtG,CAAC;AAAA,IACF;AAAA,IAEA,UAAgB;AACf,WAAK,UAAU,QAAQ;AAAA,IACxB;AAAA,EACD;AACD;AAfS;AAiBT,IAAM,aAAN,cAAyB,UAAU;AAAA,EAtDnC,OAsDmC;AAAA;AAAA;AAAA,EAClC,YAAmC,GAA0B;AAAE,UAAM,CAAC;AAAG,SAAK,KAAK;AAAA,EAAG;AACvF;AAFM,aAAN;AAAA,EACc;AAAA,GADR;AASC,SAAS,gBAA0D,OAA4E;AACrJ,SAAO,CAAC,mBAAmB,IAAI,MAAM,IAAI,IAAI,cAAc,OAAO,UAAU;AAC7E;AAFgB;AAIhB,IAAM,aAAN,cAAyB,UAAU;AAAA,EAnEnC,OAmEmC;AAAA;AAAA;AAAA,EAClC,YAAY,QAAoC,GAA2B;AAAE,UAAM,CAAC;AAAG,SAAK,KAAK,MAAM;AAAA,EAAG;AAC3G;AAFM,aAAN;AAAA,EAC2B;AAAA,GADrB;",
  "names": []
}
