var R=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var h=(a,l,e,r)=>{for(var o=r>1?void 0:r?g(l,e):l,t=a.length-1,s;t>=0;t--)(s=a[t])&&(o=(r?s(l,e,o):s(o))||o);return r&&o&&R(l,e,o),o},n=(a,l)=>(e,r)=>l(e,r,a);import{session as P}from"electron";import{Disposable as p,toDisposable as m}from"../../../base/common/lifecycle.js";import{COI as u,FileAccess as I,Schemas as i}from"../../../base/common/network.js";import{basename as b,extname as F,normalize as f}from"../../../base/common/path.js";import{isLinux as S}from"../../../base/common/platform.js";import{TernarySearchTree as U}from"../../../base/common/ternarySearchTree.js";import{URI as d}from"../../../base/common/uri.js";import{generateUuid as C}from"../../../base/common/uuid.js";import{validatedIpcMain as v}from"../../../base/parts/ipc/electron-main/ipcMain.js";import{INativeEnvironmentService as w}from"../../environment/common/environment.js";import{ILogService as y}from"../../log/common/log.js";import"./protocol.js";import{IUserDataProfilesService as T}from"../../userDataProfile/common/userDataProfile.js";let c=class extends p{constructor(e,r,o){super();this.environmentService=e;this.logService=o;this.addValidFileRoot(e.appRoot),this.addValidFileRoot(e.extensionsPath),this.addValidFileRoot(r.defaultProfile.globalStorageHome.with({scheme:i.file}).fsPath),this.addValidFileRoot(e.workspaceStorageHome.with({scheme:i.file}).fsPath),this.handleProtocols()}validRoots=U.forPaths(!S);validExtensions=new Set([".svg",".png",".jpg",".jpeg",".gif",".bmp",".webp",".mp4"]);handleProtocols(){const{defaultSession:e}=P;e.protocol.registerFileProtocol(i.vscodeFileResource,(r,o)=>this.handleResourceRequest(r,o)),e.protocol.interceptFileProtocol(i.file,(r,o)=>this.handleFileRequest(r,o)),this._register(m(()=>{e.protocol.unregisterProtocol(i.vscodeFileResource),e.protocol.uninterceptProtocol(i.file)}))}addValidFileRoot(e){const r=f(e);return this.validRoots.get(r)?p.None:(this.validRoots.set(r,!0),m(()=>this.validRoots.delete(r)))}handleFileRequest(e,r){const o=d.parse(e.url);return this.logService.error(`Refused to load resource ${o.fsPath} from ${i.file}: protocol (original URL: ${e.url})`),r({error:-3})}handleResourceRequest(e,r){const o=this.requestToNormalizedFilePath(e);let t;if(this.environmentService.crossOriginIsolated){const s=b(o);s==="workbench.html"||s==="workbench-dev.html"?t=u.CoopAndCoep:t=u.getHeadersFromQuery(e.url)}return this.validRoots.findSubstr(o)?r({path:o,headers:t}):this.validExtensions.has(F(o).toLowerCase())?r({path:o}):(this.logService.error(`${i.vscodeFileResource}: Refused to load resource ${o} from ${i.vscodeFileResource}: protocol (original URL: ${e.url})`),r({error:-3}))}requestToNormalizedFilePath(e){const r=d.parse(e.url),o=I.uriToFileUri(r);return f(o.fsPath)}createIPCObjectUrl(){let e;const r=d.from({scheme:"vscode",path:C()}),o=r.toString(),t=async()=>e;return v.handle(o,t),this.logService.trace(`IPC Object URL: Registered new channel ${o}.`),{resource:r,update:s=>e=s,dispose:()=>{this.logService.trace(`IPC Object URL: Removed channel ${o}.`),v.removeHandler(o)}}}};c=h([n(0,w),n(1,T),n(2,y)],c);export{c as ProtocolMainService};
