{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/platform/sign/node/signService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractSignService, IVsdaValidator } from '../common/abstractSignService.js';\nimport { ISignService } from '../common/sign.js';\n\ndeclare module vsda {\n\t// the signer is a native module that for historical reasons uses a lower case class name\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class signer {\n\t\tsign(arg: string): string;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class validator {\n\t\tcreateNewMessage(arg: string): string;\n\t\tvalidate(arg: string): 'ok' | 'error';\n\t}\n}\n\nexport class SignService extends AbstractSignService implements ISignService {\n\tprotected override getValidator(): Promise<IVsdaValidator> {\n\t\treturn this.vsda().then(vsda => new vsda.validator());\n\t}\n\tprotected override signValue(arg: string): Promise<string> {\n\t\treturn this.vsda().then(vsda => new vsda.signer().sign(arg));\n\t}\n\n\tprivate async vsda(): Promise<typeof vsda> {\n\t\tconst mod = 'vsda';\n\t\tconst { default: vsda } = await import(mod);\n\t\treturn vsda;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,qBAAqB,sBAAsB;AACpD,SAAS,oBAAoB;AAgBtB,MAAM,oBAAoB,oBAA4C;AAAA,EAtB7E,OAsB6E;AAAA;AAAA;AAAA,EACzD,eAAwC;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,UAAQ,IAAI,KAAK,UAAU,CAAC;AAAA,EACrD;AAAA,EACmB,UAAU,KAA8B;AAC1D,WAAO,KAAK,KAAK,EAAE,KAAK,UAAQ,IAAI,KAAK,OAAO,EAAE,KAAK,GAAG,CAAC;AAAA,EAC5D;AAAA,EAEA,MAAc,OAA6B;AAC1C,UAAM,MAAM;AACZ,UAAM,EAAE,SAAS,KAAK,IAAI,MAAM,OAAO;AACvC,WAAO;AAAA,EACR;AACD;",
  "names": []
}
