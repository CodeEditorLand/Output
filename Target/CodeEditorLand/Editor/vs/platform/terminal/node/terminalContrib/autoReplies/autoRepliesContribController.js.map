{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/platform/terminal/node/terminalContrib/autoReplies/autoRepliesContribController.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from '../../../../log/common/log.js';\nimport type { IPtyServiceContribution, ITerminalChildProcess } from '../../../common/terminal.js';\nimport { TerminalAutoResponder } from './terminalAutoResponder.js';\n\nexport class AutoRepliesPtyServiceContribution implements IPtyServiceContribution {\n\tprivate readonly _autoReplies: Map<string, string> = new Map();\n\tprivate readonly _terminalProcesses: Map<number, ITerminalChildProcess> = new Map();\n\tprivate readonly _autoResponders: Map<number, Map<string, TerminalAutoResponder>> = new Map();\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t}\n\n\tasync installAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.set(match, reply);\n\t\t// If the auto reply exists on any existing terminals it will be overridden\n\t\tfor (const persistentProcessId of this._autoResponders.keys()) {\n\t\t\tconst process = this._terminalProcesses.get(persistentProcessId);\n\t\t\tif (!process) {\n\t\t\t\tthis._logService.error('Could not find terminal process to install auto reply');\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._processInstallAutoReply(persistentProcessId, process, match, reply);\n\t\t}\n\t}\n\n\tasync uninstallAllAutoReplies() {\n\t\tfor (const match of this._autoReplies.keys()) {\n\t\t\tfor (const processAutoResponders of this._autoResponders.values()) {\n\t\t\t\tprocessAutoResponders.get(match)?.dispose();\n\t\t\t\tprocessAutoResponders.delete(match);\n\t\t\t}\n\t\t}\n\t}\n\n\thandleProcessReady(persistentProcessId: number, process: ITerminalChildProcess): void {\n\t\tthis._terminalProcesses.set(persistentProcessId, process);\n\t\tthis._autoResponders.set(persistentProcessId, new Map());\n\t\tfor (const [match, reply] of this._autoReplies.entries()) {\n\t\t\tthis._processInstallAutoReply(persistentProcessId, process, match, reply);\n\t\t}\n\t}\n\n\thandleProcessDispose(persistentProcessId: number): void {\n\t\tconst processAutoResponders = this._autoResponders.get(persistentProcessId);\n\t\tif (processAutoResponders) {\n\t\t\tfor (const e of processAutoResponders.values()) {\n\t\t\t\te.dispose();\n\t\t\t}\n\t\t\tprocessAutoResponders.clear();\n\t\t}\n\t}\n\n\thandleProcessInput(persistentProcessId: number, data: string) {\n\t\tconst processAutoResponders = this._autoResponders.get(persistentProcessId);\n\t\tif (processAutoResponders) {\n\t\t\tfor (const listener of processAutoResponders.values()) {\n\t\t\t\tlistener.handleInput();\n\t\t\t}\n\t\t}\n\t}\n\n\thandleProcessResize(persistentProcessId: number, cols: number, rows: number) {\n\t\tconst processAutoResponders = this._autoResponders.get(persistentProcessId);\n\t\tif (processAutoResponders) {\n\t\t\tfor (const listener of processAutoResponders.values()) {\n\t\t\t\tlistener.handleResize();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _processInstallAutoReply(persistentProcessId: number, terminalProcess: ITerminalChildProcess, match: string, reply: string) {\n\t\tconst processAutoResponders = this._autoResponders.get(persistentProcessId);\n\t\tif (processAutoResponders) {\n\t\t\tprocessAutoResponders.get(match)?.dispose();\n\t\t\tprocessAutoResponders.set(match, new TerminalAutoResponder(terminalProcess, match, reply, this._logService));\n\t\t}\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB;AAE5B,SAAS,6BAA6B;AAE/B,IAAM,oCAAN,MAA2E;AAAA,EAKjF,YAC+B,aAC7B;AAD6B;AAAA,EAE/B;AAAA,EAjBD,OASkF;AAAA;AAAA;AAAA,EAChE,eAAoC,oBAAI,IAAI;AAAA,EAC5C,qBAAyD,oBAAI,IAAI;AAAA,EACjE,kBAAmE,oBAAI,IAAI;AAAA,EAO5F,MAAM,iBAAiB,OAAe,OAAe;AACpD,SAAK,aAAa,IAAI,OAAO,KAAK;AAElC,eAAW,uBAAuB,KAAK,gBAAgB,KAAK,GAAG;AAC9D,YAAM,UAAU,KAAK,mBAAmB,IAAI,mBAAmB;AAC/D,UAAI,CAAC,SAAS;AACb,aAAK,YAAY,MAAM,uDAAuD;AAC9E;AAAA,MACD;AACA,WAAK,yBAAyB,qBAAqB,SAAS,OAAO,KAAK;AAAA,IACzE;AAAA,EACD;AAAA,EAEA,MAAM,0BAA0B;AAC/B,eAAW,SAAS,KAAK,aAAa,KAAK,GAAG;AAC7C,iBAAW,yBAAyB,KAAK,gBAAgB,OAAO,GAAG;AAClE,8BAAsB,IAAI,KAAK,GAAG,QAAQ;AAC1C,8BAAsB,OAAO,KAAK;AAAA,MACnC;AAAA,IACD;AAAA,EACD;AAAA,EAEA,mBAAmB,qBAA6B,SAAsC;AACrF,SAAK,mBAAmB,IAAI,qBAAqB,OAAO;AACxD,SAAK,gBAAgB,IAAI,qBAAqB,oBAAI,IAAI,CAAC;AACvD,eAAW,CAAC,OAAO,KAAK,KAAK,KAAK,aAAa,QAAQ,GAAG;AACzD,WAAK,yBAAyB,qBAAqB,SAAS,OAAO,KAAK;AAAA,IACzE;AAAA,EACD;AAAA,EAEA,qBAAqB,qBAAmC;AACvD,UAAM,wBAAwB,KAAK,gBAAgB,IAAI,mBAAmB;AAC1E,QAAI,uBAAuB;AAC1B,iBAAW,KAAK,sBAAsB,OAAO,GAAG;AAC/C,UAAE,QAAQ;AAAA,MACX;AACA,4BAAsB,MAAM;AAAA,IAC7B;AAAA,EACD;AAAA,EAEA,mBAAmB,qBAA6B,MAAc;AAC7D,UAAM,wBAAwB,KAAK,gBAAgB,IAAI,mBAAmB;AAC1E,QAAI,uBAAuB;AAC1B,iBAAW,YAAY,sBAAsB,OAAO,GAAG;AACtD,iBAAS,YAAY;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AAAA,EAEA,oBAAoB,qBAA6B,MAAc,MAAc;AAC5E,UAAM,wBAAwB,KAAK,gBAAgB,IAAI,mBAAmB;AAC1E,QAAI,uBAAuB;AAC1B,iBAAW,YAAY,sBAAsB,OAAO,GAAG;AACtD,iBAAS,aAAa;AAAA,MACvB;AAAA,IACD;AAAA,EACD;AAAA,EAEQ,yBAAyB,qBAA6B,iBAAwC,OAAe,OAAe;AACnI,UAAM,wBAAwB,KAAK,gBAAgB,IAAI,mBAAmB;AAC1E,QAAI,uBAAuB;AAC1B,4BAAsB,IAAI,KAAK,GAAG,QAAQ;AAC1C,4BAAsB,IAAI,OAAO,IAAI,sBAAsB,iBAAiB,OAAO,OAAO,KAAK,WAAW,CAAC;AAAA,IAC5G;AAAA,EACD;AACD;AA3Ea,oCAAN;AAAA,EAMJ;AAAA,GANU;",
  "names": []
}
