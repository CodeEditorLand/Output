import*as o from"../../../../nls.js";import{Color as e,RGBA as c}from"../../../../base/common/color.js";import{registerColor as r,transparent as t,lessProminent as F,darken as u,lighten as d}from"../colorUtils.js";import{foreground as i,contrastBorder as l,activeContrastBorder as n}from"./baseColors.js";import{scrollbarShadow as T,badgeBackground as k}from"./miscColors.js";const s=r("editor.background",{light:"#ffffff",dark:"#1E1E1E",hcDark:e.black,hcLight:e.white},o.localize("editorBackground","Editor background color.")),U=r("editor.foreground",{light:"#333333",dark:"#BBBBBB",hcDark:e.white,hcLight:i},o.localize("editorForeground","Editor default foreground color.")),j=r("editorStickyScroll.background",s,o.localize("editorStickyScrollBackground","Background color of sticky scroll in the editor")),J=r("editorStickyScrollHover.background",{dark:"#2A2D2E",light:"#F0F0F0",hcDark:null,hcLight:e.fromHex("#0F4A85").transparent(.1)},o.localize("editorStickyScrollHoverBackground","Background color of sticky scroll on hover in the editor")),K=r("editorStickyScroll.border",{dark:null,light:null,hcDark:l,hcLight:l},o.localize("editorStickyScrollBorder","Border color of sticky scroll in the editor")),N=r("editorStickyScroll.shadow",T,o.localize("editorStickyScrollShadow"," Shadow color of sticky scroll in the editor")),f=r("editorWidget.background",{dark:"#252526",light:"#F3F3F3",hcDark:"#0C141F",hcLight:e.white},o.localize("editorWidgetBackground","Background color of editor widgets, such as find/replace.")),E=r("editorWidget.foreground",i,o.localize("editorWidgetForeground","Foreground color of editor widgets, such as find/replace.")),S=r("editorWidget.border",{dark:"#454545",light:"#C8C8C8",hcDark:l,hcLight:l},o.localize("editorWidgetBorder","Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.")),Q=r("editorWidget.resizeBorder",null,o.localize("editorWidgetResizeBorder","Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.")),V=r("editorError.background",null,o.localize("editorError.background","Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),R=r("editorError.foreground",{dark:"#F14C4C",light:"#E51400",hcDark:"#F48771",hcLight:"#B5200D"},o.localize("editorError.foreground","Foreground color of error squigglies in the editor.")),X=r("editorError.border",{dark:null,light:null,hcDark:e.fromHex("#E47777").transparent(.8),hcLight:"#B5200D"},o.localize("errorBorder","If set, color of double underlines for errors in the editor.")),Y=r("editorWarning.background",null,o.localize("editorWarning.background","Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),A=r("editorWarning.foreground",{dark:"#CCA700",light:"#BF8803",hcDark:"#FFD370",hcLight:"#895503"},o.localize("editorWarning.foreground","Foreground color of warning squigglies in the editor.")),Z=r("editorWarning.border",{dark:null,light:null,hcDark:e.fromHex("#FFCC00").transparent(.8),hcLight:e.fromHex("#FFCC00").transparent(.8)},o.localize("warningBorder","If set, color of double underlines for warnings in the editor.")),_=r("editorInfo.background",null,o.localize("editorInfo.background","Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations."),!0),W=r("editorInfo.foreground",{dark:"#3794FF",light:"#1a85ff",hcDark:"#3794FF",hcLight:"#1a85ff"},o.localize("editorInfo.foreground","Foreground color of info squigglies in the editor.")),$=r("editorInfo.border",{dark:null,light:null,hcDark:e.fromHex("#3794FF").transparent(.8),hcLight:"#292929"},o.localize("infoBorder","If set, color of double underlines for infos in the editor.")),oo=r("editorHint.foreground",{dark:e.fromHex("#eeeeee").transparent(.7),light:"#6c6c6c",hcDark:null,hcLight:null},o.localize("editorHint.foreground","Foreground color of hint squigglies in the editor.")),ro=r("editorHint.border",{dark:null,light:null,hcDark:e.fromHex("#eeeeee").transparent(.8),hcLight:"#292929"},o.localize("hintBorder","If set, color of double underlines for hints in the editor.")),eo=r("editorLink.activeForeground",{dark:"#4E94CE",light:e.blue,hcDark:e.cyan,hcLight:"#292929"},o.localize("activeLinkForeground","Color of active links.")),a=r("editor.selectionBackground",{light:"#ADD6FF",dark:"#264F78",hcDark:"#f3f518",hcLight:"#0F4A85"},o.localize("editorSelectionBackground","Color of the editor selection.")),to=r("editor.selectionForeground",{light:null,dark:null,hcDark:"#000000",hcLight:e.white},o.localize("editorSelectionForeground","Color of the selected text for high contrast.")),io=r("editor.inactiveSelectionBackground",{light:t(a,.5),dark:t(a,.5),hcDark:t(a,.7),hcLight:t(a,.5)},o.localize("editorInactiveSelection","Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."),!0),no=r("editor.selectionHighlightBackground",{light:F(a,s,.3,.6),dark:F(a,s,.3,.6),hcDark:null,hcLight:null},o.localize("editorSelectionHighlight","Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations."),!0),lo=r("editor.selectionHighlightBorder",{light:null,dark:null,hcDark:n,hcLight:n},o.localize("editorSelectionHighlightBorder","Border color for regions with the same content as the selection.")),co=r("editor.compositionBorder",{light:"#000000",dark:"#ffffff",hcLight:"#000000",hcDark:"#ffffff"},o.localize("editorCompositionBorder","The border color for an IME composition.")),ao=r("editor.findMatchBackground",{light:"#A8AC94",dark:"#515C6A",hcDark:null,hcLight:null},o.localize("editorFindMatch","Color of the current search match.")),go=r("editor.findMatchForeground",null,o.localize("editorFindMatchForeground","Text color of the current search match.")),ho=r("editor.findMatchHighlightBackground",{light:"#EA5C0055",dark:"#EA5C0055",hcDark:null,hcLight:null},o.localize("findMatchHighlight","Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."),!0),uo=r("editor.findMatchHighlightForeground",null,o.localize("findMatchHighlightForeground","Foreground color of the other search matches."),!0),so=r("editor.findRangeHighlightBackground",{dark:"#3a3d4166",light:"#b4b4b44d",hcDark:null,hcLight:null},o.localize("findRangeHighlight","Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."),!0),fo=r("editor.findMatchBorder",{light:null,dark:null,hcDark:n,hcLight:n},o.localize("editorFindMatchBorder","Border color of the current search match.")),ko=r("editor.findMatchHighlightBorder",{light:null,dark:null,hcDark:n,hcLight:n},o.localize("findMatchHighlightBorder","Border color of the other search matches.")),po=r("editor.findRangeHighlightBorder",{dark:null,light:null,hcDark:t(n,.4),hcLight:t(n,.4)},o.localize("findRangeHighlightBorder","Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."),!0),mo=r("editor.hoverHighlightBackground",{light:"#ADD6FF26",dark:"#264f7840",hcDark:"#ADD6FF26",hcLight:null},o.localize("hoverHighlight","Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations."),!0),v=r("editorHoverWidget.background",f,o.localize("hoverBackground","Background color of the editor hover.")),Bo=r("editorHoverWidget.foreground",E,o.localize("hoverForeground","Foreground color of the editor hover.")),bo=r("editorHoverWidget.border",S,o.localize("hoverBorder","Border color of the editor hover.")),Fo=r("editorHoverWidget.statusBarBackground",{dark:d(v,.2),light:u(v,.05),hcDark:f,hcLight:f},o.localize("statusBarBackground","Background color of the editor hover status bar.")),x=r("editorInlayHint.foreground",{dark:"#969696",light:"#969696",hcDark:e.white,hcLight:e.black},o.localize("editorInlayHintForeground","Foreground color of inline hints")),H=r("editorInlayHint.background",{dark:t(k,.1),light:t(k,.1),hcDark:t(e.white,.1),hcLight:t(k,.1)},o.localize("editorInlayHintBackground","Background color of inline hints")),vo=r("editorInlayHint.typeForeground",x,o.localize("editorInlayHintForegroundTypes","Foreground color of inline hints for types")),xo=r("editorInlayHint.typeBackground",H,o.localize("editorInlayHintBackgroundTypes","Background color of inline hints for types")),Ho=r("editorInlayHint.parameterForeground",x,o.localize("editorInlayHintForegroundParameter","Foreground color of inline hints for parameters")),zo=r("editorInlayHint.parameterBackground",H,o.localize("editorInlayHintBackgroundParameter","Background color of inline hints for parameters")),q=r("editorLightBulb.foreground",{dark:"#FFCC00",light:"#DDB100",hcDark:"#FFCC00",hcLight:"#007ACC"},o.localize("editorLightBulbForeground","The color used for the lightbulb actions icon.")),Co=r("editorLightBulbAutoFix.foreground",{dark:"#75BEFF",light:"#007ACC",hcDark:"#75BEFF",hcLight:"#007ACC"},o.localize("editorLightBulbAutoFixForeground","The color used for the lightbulb auto fix actions icon.")),wo=r("editorLightBulbAi.foreground",q,o.localize("editorLightBulbAiForeground","The color used for the lightbulb AI icon.")),Lo=r("editor.snippetTabstopHighlightBackground",{dark:new e(new c(124,124,124,.3)),light:new e(new c(10,50,100,.2)),hcDark:new e(new c(124,124,124,.3)),hcLight:new e(new c(10,50,100,.2))},o.localize("snippetTabstopHighlightBackground","Highlight background color of a snippet tabstop.")),Do=r("editor.snippetTabstopHighlightBorder",null,o.localize("snippetTabstopHighlightBorder","Highlight border color of a snippet tabstop.")),yo=r("editor.snippetFinalTabstopHighlightBackground",null,o.localize("snippetFinalTabstopHighlightBackground","Highlight background color of the final tabstop of a snippet.")),Io=r("editor.snippetFinalTabstopHighlightBorder",{dark:"#525252",light:new e(new c(10,50,100,.5)),hcDark:"#525252",hcLight:"#292929"},o.localize("snippetFinalTabstopHighlightBorder","Highlight border color of the final tabstop of a snippet.")),z=new e(new c(155,185,85,.2)),C=new e(new c(255,0,0,.2)),To=r("diffEditor.insertedTextBackground",{dark:"#9ccc2c33",light:"#9ccc2c40",hcDark:null,hcLight:null},o.localize("diffEditorInserted","Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations."),!0),Eo=r("diffEditor.removedTextBackground",{dark:"#ff000033",light:"#ff000033",hcDark:null,hcLight:null},o.localize("diffEditorRemoved","Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations."),!0),So=r("diffEditor.insertedLineBackground",{dark:z,light:z,hcDark:null,hcLight:null},o.localize("diffEditorInsertedLines","Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations."),!0),Ro=r("diffEditor.removedLineBackground",{dark:C,light:C,hcDark:null,hcLight:null},o.localize("diffEditorRemovedLines","Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations."),!0),Ao=r("diffEditorGutter.insertedLineBackground",null,o.localize("diffEditorInsertedLineGutter","Background color for the margin where lines got inserted.")),Wo=r("diffEditorGutter.removedLineBackground",null,o.localize("diffEditorRemovedLineGutter","Background color for the margin where lines got removed.")),qo=r("diffEditorOverview.insertedForeground",null,o.localize("diffEditorOverviewInserted","Diff overview ruler foreground for inserted content.")),Mo=r("diffEditorOverview.removedForeground",null,o.localize("diffEditorOverviewRemoved","Diff overview ruler foreground for removed content.")),Oo=r("diffEditor.insertedTextBorder",{dark:null,light:null,hcDark:"#33ff2eff",hcLight:"#374E06"},o.localize("diffEditorInsertedOutline","Outline color for the text that got inserted.")),Go=r("diffEditor.removedTextBorder",{dark:null,light:null,hcDark:"#FF008F",hcLight:"#AD0707"},o.localize("diffEditorRemovedOutline","Outline color for text that got removed.")),Po=r("diffEditor.border",{dark:null,light:null,hcDark:l,hcLight:l},o.localize("diffEditorBorder","Border color between the two text editors.")),Uo=r("diffEditor.diagonalFill",{dark:"#cccccc33",light:"#22222233",hcDark:null,hcLight:null},o.localize("diffDiagonalFill","Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.")),jo=r("diffEditor.unchangedRegionBackground","sideBar.background",o.localize("diffEditor.unchangedRegionBackground","The background color of unchanged blocks in the diff editor.")),Jo=r("diffEditor.unchangedRegionForeground","foreground",o.localize("diffEditor.unchangedRegionForeground","The foreground color of unchanged blocks in the diff editor.")),Ko=r("diffEditor.unchangedCodeBackground",{dark:"#74747429",light:"#b8b8b829",hcDark:null,hcLight:null},o.localize("diffEditor.unchangedCodeBackground","The background color of unchanged code in the diff editor.")),No=r("widget.shadow",{dark:t(e.black,.36),light:t(e.black,.16),hcDark:null,hcLight:null},o.localize("widgetShadow","Shadow color of widgets such as find/replace inside the editor.")),Qo=r("widget.border",{dark:null,light:null,hcDark:l,hcLight:l},o.localize("widgetBorder","Border color of widgets such as find/replace inside the editor.")),w=r("toolbar.hoverBackground",{dark:"#5a5d5e50",light:"#b8b8b850",hcDark:null,hcLight:null},o.localize("toolbarHoverBackground","Toolbar background when hovering over actions using the mouse")),Vo=r("toolbar.hoverOutline",{dark:null,light:null,hcDark:n,hcLight:n},o.localize("toolbarHoverOutline","Toolbar outline when hovering over actions using the mouse")),Xo=r("toolbar.activeBackground",{dark:d(w,.1),light:u(w,.1),hcDark:null,hcLight:null},o.localize("toolbarActiveBackground","Toolbar background when holding the mouse over actions")),Yo=r("breadcrumb.foreground",t(i,.8),o.localize("breadcrumbsFocusForeground","Color of focused breadcrumb items.")),Zo=r("breadcrumb.background",s,o.localize("breadcrumbsBackground","Background color of breadcrumb items.")),_o=r("breadcrumb.focusForeground",{light:u(i,.2),dark:d(i,.1),hcDark:d(i,.1),hcLight:d(i,.1)},o.localize("breadcrumbsFocusForeground","Color of focused breadcrumb items.")),$o=r("breadcrumb.activeSelectionForeground",{light:u(i,.2),dark:d(i,.1),hcDark:d(i,.1),hcLight:d(i,.1)},o.localize("breadcrumbsSelectedForeground","Color of selected breadcrumb items.")),or=r("breadcrumbPicker.background",f,o.localize("breadcrumbsSelectedBackground","Background color of breadcrumb item picker.")),L=.5,D=e.fromHex("#40C8AE").transparent(L),y=e.fromHex("#40A6FF").transparent(L),I=e.fromHex("#606060").transparent(.4),p=.4,g=1,m=r("merge.currentHeaderBackground",{dark:D,light:D,hcDark:null,hcLight:null},o.localize("mergeCurrentHeaderBackground","Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),rr=r("merge.currentContentBackground",t(m,p),o.localize("mergeCurrentContentBackground","Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),B=r("merge.incomingHeaderBackground",{dark:y,light:y,hcDark:null,hcLight:null},o.localize("mergeIncomingHeaderBackground","Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),er=r("merge.incomingContentBackground",t(B,p),o.localize("mergeIncomingContentBackground","Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),b=r("merge.commonHeaderBackground",{dark:I,light:I,hcDark:null,hcLight:null},o.localize("mergeCommonHeaderBackground","Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),tr=r("merge.commonContentBackground",t(b,p),o.localize("mergeCommonContentBackground","Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations."),!0),h=r("merge.border",{dark:null,light:null,hcDark:"#C3DF6F",hcLight:"#007ACC"},o.localize("mergeBorder","Border color on headers and the splitter in inline merge-conflicts.")),ir=r("editorOverviewRuler.currentContentForeground",{dark:t(m,g),light:t(m,g),hcDark:h,hcLight:h},o.localize("overviewRulerCurrentContentForeground","Current overview ruler foreground for inline merge-conflicts.")),nr=r("editorOverviewRuler.incomingContentForeground",{dark:t(B,g),light:t(B,g),hcDark:h,hcLight:h},o.localize("overviewRulerIncomingContentForeground","Incoming overview ruler foreground for inline merge-conflicts.")),dr=r("editorOverviewRuler.commonContentForeground",{dark:t(b,g),light:t(b,g),hcDark:h,hcLight:h},o.localize("overviewRulerCommonContentForeground","Common ancestor overview ruler foreground for inline merge-conflicts.")),lr=r("editorOverviewRuler.findMatchForeground",{dark:"#d186167e",light:"#d186167e",hcDark:"#AB5A00",hcLight:"#AB5A00"},o.localize("overviewRulerFindMatchForeground","Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations."),!0),cr=r("editorOverviewRuler.selectionHighlightForeground","#A0A0A0CC",o.localize("overviewRulerSelectionHighlightForeground","Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations."),!0),ar=r("problemsErrorIcon.foreground",R,o.localize("problemsErrorIconForeground","The color used for the problems error icon.")),gr=r("problemsWarningIcon.foreground",A,o.localize("problemsWarningIconForeground","The color used for the problems warning icon.")),hr=r("problemsInfoIcon.foreground",W,o.localize("problemsInfoIconForeground","The color used for the problems info icon."));export{$o as breadcrumbsActiveSelectionForeground,Zo as breadcrumbsBackground,_o as breadcrumbsFocusForeground,Yo as breadcrumbsForeground,or as breadcrumbsPickerBackground,z as defaultInsertColor,C as defaultRemoveColor,Po as diffBorder,Uo as diffDiagonalFill,To as diffInserted,So as diffInsertedLine,Ao as diffInsertedLineGutter,Oo as diffInsertedOutline,qo as diffOverviewRulerInserted,Mo as diffOverviewRulerRemoved,Eo as diffRemoved,Ro as diffRemovedLine,Wo as diffRemovedLineGutter,Go as diffRemovedOutline,jo as diffUnchangedRegionBackground,Jo as diffUnchangedRegionForeground,Ko as diffUnchangedTextBackground,eo as editorActiveLinkForeground,s as editorBackground,co as editorCompositionBorder,V as editorErrorBackground,X as editorErrorBorder,R as editorErrorForeground,ao as editorFindMatch,fo as editorFindMatchBorder,go as editorFindMatchForeground,ho as editorFindMatchHighlight,ko as editorFindMatchHighlightBorder,uo as editorFindMatchHighlightForeground,so as editorFindRangeHighlight,po as editorFindRangeHighlightBorder,U as editorForeground,ro as editorHintBorder,oo as editorHintForeground,v as editorHoverBackground,bo as editorHoverBorder,Bo as editorHoverForeground,mo as editorHoverHighlight,Fo as editorHoverStatusBarBackground,io as editorInactiveSelection,_ as editorInfoBackground,$ as editorInfoBorder,W as editorInfoForeground,H as editorInlayHintBackground,x as editorInlayHintForeground,zo as editorInlayHintParameterBackground,Ho as editorInlayHintParameterForeground,xo as editorInlayHintTypeBackground,vo as editorInlayHintTypeForeground,wo as editorLightBulbAiForeground,Co as editorLightBulbAutoFixForeground,q as editorLightBulbForeground,a as editorSelectionBackground,to as editorSelectionForeground,no as editorSelectionHighlight,lo as editorSelectionHighlightBorder,j as editorStickyScrollBackground,K as editorStickyScrollBorder,J as editorStickyScrollHoverBackground,N as editorStickyScrollShadow,Y as editorWarningBackground,Z as editorWarningBorder,A as editorWarningForeground,f as editorWidgetBackground,S as editorWidgetBorder,E as editorWidgetForeground,Q as editorWidgetResizeBorder,h as mergeBorder,tr as mergeCommonContentBackground,b as mergeCommonHeaderBackground,rr as mergeCurrentContentBackground,m as mergeCurrentHeaderBackground,er as mergeIncomingContentBackground,B as mergeIncomingHeaderBackground,dr as overviewRulerCommonContentForeground,ir as overviewRulerCurrentContentForeground,lr as overviewRulerFindMatchForeground,nr as overviewRulerIncomingContentForeground,cr as overviewRulerSelectionHighlightForeground,ar as problemsErrorIconForeground,hr as problemsInfoIconForeground,gr as problemsWarningIconForeground,yo as snippetFinalTabstopHighlightBackground,Io as snippetFinalTabstopHighlightBorder,Lo as snippetTabstopHighlightBackground,Do as snippetTabstopHighlightBorder,Xo as toolbarActiveBackground,w as toolbarHoverBackground,Vo as toolbarHoverOutline,Qo as widgetBorder,No as widgetShadow};
