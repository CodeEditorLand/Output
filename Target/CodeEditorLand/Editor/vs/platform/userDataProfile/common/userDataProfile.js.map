{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/platform/userDataProfile/common/userDataProfile.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hash } from '../../../base/common/hash.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { basename, joinPath } from '../../../base/common/resources.js';\nimport { URI, UriDto } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { IEnvironmentService } from '../../environment/common/environment.js';\nimport { FileOperationResult, IFileService, toFileOperationResult } from '../../files/common/files.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { IAnyWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier } from '../../workspace/common/workspace.js';\nimport { IStringDictionary } from '../../../base/common/collections.js';\nimport { IUriIdentityService } from '../../uriIdentity/common/uriIdentity.js';\nimport { Promises } from '../../../base/common/async.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { escapeRegExpCharacters } from '../../../base/common/strings.js';\nimport { isString, Mutable } from '../../../base/common/types.js';\n\nexport const enum ProfileResourceType {\n\tSettings = 'settings',\n\tKeybindings = 'keybindings',\n\tSnippets = 'snippets',\n\tTasks = 'tasks',\n\tExtensions = 'extensions',\n\tGlobalState = 'globalState',\n}\n\n/**\n * Flags to indicate whether to use the default profile or not.\n */\nexport type UseDefaultProfileFlags = { [key in ProfileResourceType]?: boolean };\nexport type ProfileResourceTypeFlags = UseDefaultProfileFlags;\n\nexport interface IUserDataProfile {\n\treadonly id: string;\n\treadonly isDefault: boolean;\n\treadonly name: string;\n\treadonly icon?: string;\n\treadonly location: URI;\n\treadonly globalStorageHome: URI;\n\treadonly settingsResource: URI;\n\treadonly keybindingsResource: URI;\n\treadonly tasksResource: URI;\n\treadonly snippetsHome: URI;\n\treadonly extensionsResource: URI;\n\treadonly cacheHome: URI;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly isTransient?: boolean;\n\treadonly workspaces?: readonly URI[];\n}\n\nexport function isUserDataProfile(thing: unknown): thing is IUserDataProfile {\n\tconst candidate = thing as IUserDataProfile | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& typeof candidate.id === 'string'\n\t\t&& typeof candidate.isDefault === 'boolean'\n\t\t&& typeof candidate.name === 'string'\n\t\t&& URI.isUri(candidate.location)\n\t\t&& URI.isUri(candidate.globalStorageHome)\n\t\t&& URI.isUri(candidate.settingsResource)\n\t\t&& URI.isUri(candidate.keybindingsResource)\n\t\t&& URI.isUri(candidate.tasksResource)\n\t\t&& URI.isUri(candidate.snippetsHome)\n\t\t&& URI.isUri(candidate.extensionsResource)\n\t);\n}\n\nexport type DidChangeProfilesEvent = { readonly added: readonly IUserDataProfile[]; readonly removed: readonly IUserDataProfile[]; readonly updated: readonly IUserDataProfile[]; readonly all: readonly IUserDataProfile[] };\n\nexport type WillCreateProfileEvent = {\n\tprofile: IUserDataProfile;\n\tjoin(promise: Promise<void>): void;\n};\n\nexport type WillRemoveProfileEvent = {\n\tprofile: IUserDataProfile;\n\tjoin(promise: Promise<void>): void;\n};\n\nexport interface IUserDataProfileOptions {\n\treadonly icon?: string;\n\treadonly useDefaultFlags?: UseDefaultProfileFlags;\n\treadonly transient?: boolean;\n\treadonly workspaces?: readonly URI[];\n}\n\nexport interface IUserDataProfileUpdateOptions extends Omit<IUserDataProfileOptions, 'icon'> {\n\treadonly name?: string;\n\treadonly icon?: string | null;\n}\n\nexport const IUserDataProfilesService = createDecorator<IUserDataProfilesService>('IUserDataProfilesService');\nexport interface IUserDataProfilesService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly profilesHome: URI;\n\treadonly defaultProfile: IUserDataProfile;\n\n\treadonly onDidChangeProfiles: Event<DidChangeProfilesEvent>;\n\treadonly profiles: readonly IUserDataProfile[];\n\n\treadonly onDidResetWorkspaces: Event<void>;\n\n\tcreateNamedProfile(name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile>;\n\tcreateTransientProfile(workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile>;\n\tcreateProfile(id: string, name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile>;\n\tupdateProfile(profile: IUserDataProfile, options?: IUserDataProfileUpdateOptions,): Promise<IUserDataProfile>;\n\tremoveProfile(profile: IUserDataProfile): Promise<void>;\n\n\tsetProfileForWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier, profile: IUserDataProfile): Promise<void>;\n\tresetWorkspaces(): Promise<void>;\n\n\tcleanUp(): Promise<void>;\n\tcleanUpTransientProfiles(): Promise<void>;\n}\n\nexport function reviveProfile(profile: UriDto<IUserDataProfile>, scheme: string): IUserDataProfile {\n\treturn {\n\t\tid: profile.id,\n\t\tisDefault: profile.isDefault,\n\t\tname: profile.name,\n\t\ticon: profile.icon,\n\t\tlocation: URI.revive(profile.location).with({ scheme }),\n\t\tglobalStorageHome: URI.revive(profile.globalStorageHome).with({ scheme }),\n\t\tsettingsResource: URI.revive(profile.settingsResource).with({ scheme }),\n\t\tkeybindingsResource: URI.revive(profile.keybindingsResource).with({ scheme }),\n\t\ttasksResource: URI.revive(profile.tasksResource).with({ scheme }),\n\t\tsnippetsHome: URI.revive(profile.snippetsHome).with({ scheme }),\n\t\textensionsResource: URI.revive(profile.extensionsResource).with({ scheme }),\n\t\tcacheHome: URI.revive(profile.cacheHome).with({ scheme }),\n\t\tuseDefaultFlags: profile.useDefaultFlags,\n\t\tisTransient: profile.isTransient,\n\t\tworkspaces: profile.workspaces?.map(w => URI.revive(w)),\n\t};\n}\n\nexport function toUserDataProfile(id: string, name: string, location: URI, profilesCacheHome: URI, options?: IUserDataProfileOptions, defaultProfile?: IUserDataProfile): IUserDataProfile {\n\treturn {\n\t\tid,\n\t\tname,\n\t\tlocation,\n\t\tisDefault: false,\n\t\ticon: options?.icon,\n\t\tglobalStorageHome: defaultProfile && options?.useDefaultFlags?.globalState ? defaultProfile.globalStorageHome : joinPath(location, 'globalStorage'),\n\t\tsettingsResource: defaultProfile && options?.useDefaultFlags?.settings ? defaultProfile.settingsResource : joinPath(location, 'settings.json'),\n\t\tkeybindingsResource: defaultProfile && options?.useDefaultFlags?.keybindings ? defaultProfile.keybindingsResource : joinPath(location, 'keybindings.json'),\n\t\ttasksResource: defaultProfile && options?.useDefaultFlags?.tasks ? defaultProfile.tasksResource : joinPath(location, 'tasks.json'),\n\t\tsnippetsHome: defaultProfile && options?.useDefaultFlags?.snippets ? defaultProfile.snippetsHome : joinPath(location, 'snippets'),\n\t\textensionsResource: defaultProfile && options?.useDefaultFlags?.extensions ? defaultProfile.extensionsResource : joinPath(location, 'extensions.json'),\n\t\tcacheHome: joinPath(profilesCacheHome, id),\n\t\tuseDefaultFlags: options?.useDefaultFlags,\n\t\tisTransient: options?.transient,\n\t\tworkspaces: options?.workspaces,\n\t};\n}\n\nexport type UserDataProfilesObject = {\n\tprofiles: IUserDataProfile[];\n\temptyWindows: Map<string, IUserDataProfile>;\n};\n\nexport type StoredUserDataProfile = {\n\tname: string;\n\tlocation: URI;\n\ticon?: string;\n\tuseDefaultFlags?: UseDefaultProfileFlags;\n};\n\nexport type StoredProfileAssociations = {\n\tworkspaces?: IStringDictionary<string>;\n\temptyWindows?: IStringDictionary<string>;\n};\n\nexport class UserDataProfilesService extends Disposable implements IUserDataProfilesService {\n\n\tprotected static readonly PROFILES_KEY = 'userDataProfiles';\n\tprotected static readonly PROFILE_ASSOCIATIONS_KEY = 'profileAssociations';\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly profilesHome: URI;\n\tprivate readonly profilesCacheHome: URI;\n\n\tget defaultProfile(): IUserDataProfile { return this.profiles[0]; }\n\tget profiles(): IUserDataProfile[] { return [...this.profilesObject.profiles, ...this.transientProfilesObject.profiles]; }\n\n\tprotected readonly _onDidChangeProfiles = this._register(new Emitter<DidChangeProfilesEvent>());\n\treadonly onDidChangeProfiles = this._onDidChangeProfiles.event;\n\n\tprotected readonly _onWillCreateProfile = this._register(new Emitter<WillCreateProfileEvent>());\n\treadonly onWillCreateProfile = this._onWillCreateProfile.event;\n\n\tprotected readonly _onWillRemoveProfile = this._register(new Emitter<WillRemoveProfileEvent>());\n\treadonly onWillRemoveProfile = this._onWillRemoveProfile.event;\n\n\tprivate readonly _onDidResetWorkspaces = this._register(new Emitter<void>());\n\treadonly onDidResetWorkspaces = this._onDidResetWorkspaces.event;\n\n\tprivate profileCreationPromises = new Map<string, Promise<IUserDataProfile>>();\n\n\tprotected readonly transientProfilesObject: UserDataProfilesObject = {\n\t\tprofiles: [],\n\t\temptyWindows: new Map()\n\t};\n\n\tconstructor(\n\t\t@IEnvironmentService protected readonly environmentService: IEnvironmentService,\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.profilesHome = joinPath(this.environmentService.userRoamingDataHome, 'profiles');\n\t\tthis.profilesCacheHome = joinPath(this.environmentService.cacheHome, 'CachedProfilesData');\n\t}\n\n\tinit(): void {\n\t\tthis._profilesObject = undefined;\n\t}\n\n\tprotected _profilesObject: UserDataProfilesObject | undefined;\n\tprotected get profilesObject(): UserDataProfilesObject {\n\t\tif (!this._profilesObject) {\n\t\t\tconst defaultProfile = this.createDefaultProfile();\n\t\t\tconst profiles: Array<Mutable<IUserDataProfile>> = [defaultProfile];\n\t\t\ttry {\n\t\t\t\tfor (const storedProfile of this.getStoredProfiles()) {\n\t\t\t\t\tif (!storedProfile.name || !isString(storedProfile.name) || !storedProfile.location) {\n\t\t\t\t\t\tthis.logService.warn('Skipping the invalid stored profile', storedProfile.location || storedProfile.name);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tprofiles.push(toUserDataProfile(basename(storedProfile.location), storedProfile.name, storedProfile.location, this.profilesCacheHome, { icon: storedProfile.icon, useDefaultFlags: storedProfile.useDefaultFlags }, defaultProfile));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t\tconst emptyWindows = new Map<string, IUserDataProfile>();\n\t\t\tif (profiles.length) {\n\t\t\t\ttry {\n\t\t\t\t\tconst profileAssociaitions = this.getStoredProfileAssociations();\n\t\t\t\t\tif (profileAssociaitions.workspaces) {\n\t\t\t\t\t\tfor (const [workspacePath, profileId] of Object.entries(profileAssociaitions.workspaces)) {\n\t\t\t\t\t\t\tconst workspace = URI.parse(workspacePath);\n\t\t\t\t\t\t\tconst profile = profiles.find(p => p.id === profileId);\n\t\t\t\t\t\t\tif (profile) {\n\t\t\t\t\t\t\t\tconst workspaces = profile.workspaces ? profile.workspaces.slice(0) : [];\n\t\t\t\t\t\t\t\tworkspaces.push(workspace);\n\t\t\t\t\t\t\t\tprofile.workspaces = workspaces;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (profileAssociaitions.emptyWindows) {\n\t\t\t\t\t\tfor (const [windowId, profileId] of Object.entries(profileAssociaitions.emptyWindows)) {\n\t\t\t\t\t\t\tconst profile = profiles.find(p => p.id === profileId);\n\t\t\t\t\t\t\tif (profile) {\n\t\t\t\t\t\t\t\temptyWindows.set(windowId, profile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._profilesObject = { profiles, emptyWindows };\n\t\t}\n\t\treturn this._profilesObject;\n\t}\n\n\tprivate createDefaultProfile() {\n\t\tconst defaultProfile = toUserDataProfile('__default__profile__', localize('defaultProfile', \"Default\"), this.environmentService.userRoamingDataHome, this.profilesCacheHome);\n\t\treturn { ...defaultProfile, extensionsResource: this.getDefaultProfileExtensionsLocation() ?? defaultProfile.extensionsResource, isDefault: true };\n\t}\n\n\tasync createTransientProfile(workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tconst namePrefix = `Temp`;\n\t\tconst nameRegEx = new RegExp(`${escapeRegExpCharacters(namePrefix)}\\\\s(\\\\d+)`);\n\t\tlet nameIndex = 0;\n\t\tfor (const profile of this.profiles) {\n\t\t\tconst matches = nameRegEx.exec(profile.name);\n\t\t\tconst index = matches ? parseInt(matches[1]) : 0;\n\t\t\tnameIndex = index > nameIndex ? index : nameIndex;\n\t\t}\n\t\tconst name = `${namePrefix} ${nameIndex + 1}`;\n\t\treturn this.createProfile(hash(generateUuid()).toString(16), name, { transient: true }, workspaceIdentifier);\n\t}\n\n\tasync createNamedProfile(name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\treturn this.createProfile(hash(generateUuid()).toString(16), name, options, workspaceIdentifier);\n\t}\n\n\tasync createProfile(id: string, name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tconst profile = await this.doCreateProfile(id, name, options, workspaceIdentifier);\n\n\t\treturn profile;\n\t}\n\n\tprivate async doCreateProfile(id: string, name: string, options?: IUserDataProfileOptions, workspaceIdentifier?: IAnyWorkspaceIdentifier): Promise<IUserDataProfile> {\n\t\tif (!isString(name) || !name) {\n\t\t\tthrow new Error('Name of the profile is mandatory and must be of type `string`');\n\t\t}\n\n\t\tlet profileCreationPromise = this.profileCreationPromises.get(name);\n\t\tif (!profileCreationPromise) {\n\t\t\tprofileCreationPromise = (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst existing = this.profiles.find(p => p.id === id || (!p.isTransient && !options?.transient && p.name === name));\n\t\t\t\t\tif (existing) {\n\t\t\t\t\t\tthrow new Error(`Profile with ${name} name already exists`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst workspace = workspaceIdentifier ? this.getWorkspace(workspaceIdentifier) : undefined;\n\t\t\t\t\tif (URI.isUri(workspace)) {\n\t\t\t\t\t\toptions = { ...options, workspaces: [workspace] };\n\t\t\t\t\t}\n\t\t\t\t\tconst profile = toUserDataProfile(id, name, joinPath(this.profilesHome, id), this.profilesCacheHome, options, this.defaultProfile);\n\t\t\t\t\tawait this.fileService.createFolder(profile.location);\n\n\t\t\t\t\tconst joiners: Promise<void>[] = [];\n\t\t\t\t\tthis._onWillCreateProfile.fire({\n\t\t\t\t\t\tprofile,\n\t\t\t\t\t\tjoin(promise) {\n\t\t\t\t\t\t\tjoiners.push(promise);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tawait Promises.settled(joiners);\n\n\t\t\t\t\tif (workspace && !URI.isUri(workspace)) {\n\t\t\t\t\t\tthis.updateEmptyWindowAssociation(workspace, profile, !!profile.isTransient);\n\t\t\t\t\t}\n\t\t\t\t\tthis.updateProfiles([profile], [], []);\n\t\t\t\t\treturn profile;\n\t\t\t\t} finally {\n\t\t\t\t\tthis.profileCreationPromises.delete(name);\n\t\t\t\t}\n\t\t\t})();\n\t\t\tthis.profileCreationPromises.set(name, profileCreationPromise);\n\t\t}\n\t\treturn profileCreationPromise;\n\t}\n\n\tasync updateProfile(profile: IUserDataProfile, options: IUserDataProfileUpdateOptions): Promise<IUserDataProfile> {\n\t\tconst profilesToUpdate: IUserDataProfile[] = [];\n\t\tfor (const existing of this.profiles) {\n\t\t\tlet profileToUpdate: Mutable<IUserDataProfile> | undefined;\n\n\t\t\tif (profile.id === existing.id) {\n\t\t\t\tif (!existing.isDefault) {\n\t\t\t\t\tprofileToUpdate = toUserDataProfile(existing.id, options.name ?? existing.name, existing.location, this.profilesCacheHome, {\n\t\t\t\t\t\ticon: options.icon === null ? undefined : options.icon ?? existing.icon,\n\t\t\t\t\t\ttransient: options.transient ?? existing.isTransient,\n\t\t\t\t\t\tuseDefaultFlags: options.useDefaultFlags ?? existing.useDefaultFlags,\n\t\t\t\t\t\tworkspaces: options.workspaces ?? existing.workspaces,\n\t\t\t\t\t}, this.defaultProfile);\n\t\t\t\t} else if (options.workspaces) {\n\t\t\t\t\tprofileToUpdate = existing;\n\t\t\t\t\tprofileToUpdate.workspaces = options.workspaces;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (options.workspaces) {\n\t\t\t\tconst workspaces = existing.workspaces?.filter(w1 => !options.workspaces?.some(w2 => this.uriIdentityService.extUri.isEqual(w1, w2)));\n\t\t\t\tif (existing.workspaces?.length !== workspaces?.length) {\n\t\t\t\t\tprofileToUpdate = existing;\n\t\t\t\t\tprofileToUpdate.workspaces = workspaces;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (profileToUpdate) {\n\t\t\t\tprofilesToUpdate.push(profileToUpdate);\n\t\t\t}\n\t\t}\n\n\t\tif (!profilesToUpdate.length) {\n\t\t\tif (profile.isDefault) {\n\t\t\t\tthrow new Error('Cannot update default profile');\n\t\t\t}\n\t\t\tthrow new Error(`Profile '${profile.name}' does not exist`);\n\t\t}\n\n\t\tthis.updateProfiles([], [], profilesToUpdate);\n\n\t\tconst updatedProfile = this.profiles.find(p => p.id === profile.id);\n\t\tif (!updatedProfile) {\n\t\t\tthrow new Error(`Profile '${profile.name}' was not updated`);\n\t\t}\n\n\t\treturn updatedProfile;\n\t}\n\n\tasync removeProfile(profileToRemove: IUserDataProfile): Promise<void> {\n\t\tif (profileToRemove.isDefault) {\n\t\t\tthrow new Error('Cannot remove default profile');\n\t\t}\n\t\tconst profile = this.profiles.find(p => p.id === profileToRemove.id);\n\t\tif (!profile) {\n\t\t\tthrow new Error(`Profile '${profileToRemove.name}' does not exist`);\n\t\t}\n\n\t\tconst joiners: Promise<void>[] = [];\n\t\tthis._onWillRemoveProfile.fire({\n\t\t\tprofile,\n\t\t\tjoin(promise) {\n\t\t\t\tjoiners.push(promise);\n\t\t\t}\n\t\t});\n\n\t\ttry {\n\t\t\tawait Promise.allSettled(joiners);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\tthis.updateProfiles([], [profile], []);\n\n\t\ttry {\n\t\t\tawait this.fileService.del(profile.cacheHome, { recursive: true });\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync setProfileForWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier, profileToSet: IUserDataProfile): Promise<void> {\n\t\tconst profile = this.profiles.find(p => p.id === profileToSet.id);\n\t\tif (!profile) {\n\t\t\tthrow new Error(`Profile '${profileToSet.name}' does not exist`);\n\t\t}\n\n\t\tconst workspace = this.getWorkspace(workspaceIdentifier);\n\t\tif (URI.isUri(workspace)) {\n\t\t\tconst workspaces = profile.workspaces ? [...profile.workspaces] : [];\n\t\t\tif (!workspaces.some(w => this.uriIdentityService.extUri.isEqual(w, workspace))) {\n\t\t\t\tworkspaces.push(workspace);\n\t\t\t\tawait this.updateProfile(profile, { workspaces });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateEmptyWindowAssociation(workspace, profile, false);\n\t\t\tthis.updateStoredProfiles(this.profiles);\n\t\t}\n\t}\n\n\tunsetWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier, transient: boolean = false): void {\n\t\tconst workspace = this.getWorkspace(workspaceIdentifier);\n\t\tif (URI.isUri(workspace)) {\n\t\t\tconst currentlyAssociatedProfile = this.getProfileForWorkspace(workspaceIdentifier);\n\t\t\tif (currentlyAssociatedProfile) {\n\t\t\t\tthis.updateProfile(currentlyAssociatedProfile, { workspaces: currentlyAssociatedProfile.workspaces?.filter(w => !this.uriIdentityService.extUri.isEqual(w, workspace)) });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateEmptyWindowAssociation(workspace, undefined, transient);\n\t\t\tthis.updateStoredProfiles(this.profiles);\n\t\t}\n\t}\n\n\tasync resetWorkspaces(): Promise<void> {\n\t\tthis.transientProfilesObject.emptyWindows.clear();\n\t\tthis.profilesObject.emptyWindows.clear();\n\t\tfor (const profile of this.profiles) {\n\t\t\t(<Mutable<IUserDataProfile>>profile).workspaces = undefined;\n\t\t}\n\t\tthis.updateProfiles([], [], this.profiles);\n\t\tthis._onDidResetWorkspaces.fire();\n\t}\n\n\tasync cleanUp(): Promise<void> {\n\t\tif (await this.fileService.exists(this.profilesHome)) {\n\t\t\tconst stat = await this.fileService.resolve(this.profilesHome);\n\t\t\tawait Promise.all((stat.children || [])\n\t\t\t\t.filter(child => child.isDirectory && this.profiles.every(p => !this.uriIdentityService.extUri.isEqual(p.location, child.resource)))\n\t\t\t\t.map(child => this.fileService.del(child.resource, { recursive: true })));\n\t\t}\n\t}\n\n\tasync cleanUpTransientProfiles(): Promise<void> {\n\t\tconst unAssociatedTransientProfiles = this.transientProfilesObject.profiles.filter(p => !this.isProfileAssociatedToWorkspace(p));\n\t\tawait Promise.allSettled(unAssociatedTransientProfiles.map(p => this.removeProfile(p)));\n\t}\n\n\tgetProfileForWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier): IUserDataProfile | undefined {\n\t\tconst workspace = this.getWorkspace(workspaceIdentifier);\n\t\treturn URI.isUri(workspace)\n\t\t\t? this.profiles.find(p => p.workspaces?.some(w => this.uriIdentityService.extUri.isEqual(w, workspace)))\n\t\t\t: (this.profilesObject.emptyWindows.get(workspace) ?? this.transientProfilesObject.emptyWindows.get(workspace));\n\t}\n\n\tprotected getWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier): URI | string {\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn workspaceIdentifier.uri;\n\t\t}\n\t\tif (isWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn workspaceIdentifier.configPath;\n\t\t}\n\t\treturn workspaceIdentifier.id;\n\t}\n\n\tprivate isProfileAssociatedToWorkspace(profile: IUserDataProfile): boolean {\n\t\tif (profile.workspaces?.length) {\n\t\t\treturn true;\n\t\t}\n\t\tif ([...this.profilesObject.emptyWindows.values()].some(windowProfile => this.uriIdentityService.extUri.isEqual(windowProfile.location, profile.location))) {\n\t\t\treturn true;\n\t\t}\n\t\tif ([...this.transientProfilesObject.emptyWindows.values()].some(windowProfile => this.uriIdentityService.extUri.isEqual(windowProfile.location, profile.location))) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate updateProfiles(added: IUserDataProfile[], removed: IUserDataProfile[], updated: IUserDataProfile[]): void {\n\t\tconst allProfiles: Mutable<IUserDataProfile>[] = [...this.profiles, ...added];\n\n\t\tconst transientProfiles = this.transientProfilesObject.profiles;\n\t\tthis.transientProfilesObject.profiles = [];\n\n\t\tconst profiles: IUserDataProfile[] = [];\n\n\t\tfor (let profile of allProfiles) {\n\t\t\t// removed\n\t\t\tif (removed.some(p => profile.id === p.id)) {\n\t\t\t\tfor (const windowId of [...this.profilesObject.emptyWindows.keys()]) {\n\t\t\t\t\tif (profile.id === this.profilesObject.emptyWindows.get(windowId)?.id) {\n\t\t\t\t\t\tthis.profilesObject.emptyWindows.delete(windowId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!profile.isDefault) {\n\t\t\t\tprofile = updated.find(p => profile.id === p.id) ?? profile;\n\t\t\t\tconst transientProfile = transientProfiles.find(p => profile.id === p.id);\n\t\t\t\tif (profile.isTransient) {\n\t\t\t\t\tthis.transientProfilesObject.profiles.push(profile);\n\t\t\t\t} else {\n\t\t\t\t\tif (transientProfile) {\n\t\t\t\t\t\t// Move the empty window associations from the transient profile to the persisted profile\n\t\t\t\t\t\tfor (const [windowId, p] of this.transientProfilesObject.emptyWindows.entries()) {\n\t\t\t\t\t\t\tif (profile.id === p.id) {\n\t\t\t\t\t\t\t\tthis.transientProfilesObject.emptyWindows.delete(windowId);\n\t\t\t\t\t\t\t\tthis.profilesObject.emptyWindows.set(windowId, profile);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (profile.workspaces?.length === 0) {\n\t\t\t\tprofile.workspaces = undefined;\n\t\t\t}\n\n\t\t\tprofiles.push(profile);\n\t\t}\n\n\t\tthis.updateStoredProfiles(profiles);\n\t\tthis.triggerProfilesChanges(added, removed, updated);\n\t}\n\n\tprotected triggerProfilesChanges(added: IUserDataProfile[], removed: IUserDataProfile[], updated: IUserDataProfile[]) {\n\t\tthis._onDidChangeProfiles.fire({ added, removed, updated, all: this.profiles });\n\t}\n\n\tprivate updateEmptyWindowAssociation(windowId: string, newProfile: IUserDataProfile | undefined, transient: boolean): void {\n\t\t// Force transient if the new profile to associate is transient\n\t\ttransient = newProfile?.isTransient ? true : transient;\n\n\t\tif (transient) {\n\t\t\tif (newProfile) {\n\t\t\t\tthis.transientProfilesObject.emptyWindows.set(windowId, newProfile);\n\t\t\t} else {\n\t\t\t\tthis.transientProfilesObject.emptyWindows.delete(windowId);\n\t\t\t}\n\t\t}\n\n\t\telse {\n\t\t\t// Unset the transiet association if any\n\t\t\tthis.transientProfilesObject.emptyWindows.delete(windowId);\n\t\t\tif (newProfile) {\n\t\t\t\tthis.profilesObject.emptyWindows.set(windowId, newProfile);\n\t\t\t} else {\n\t\t\t\tthis.profilesObject.emptyWindows.delete(windowId);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateStoredProfiles(profiles: IUserDataProfile[]): void {\n\t\tconst storedProfiles: StoredUserDataProfile[] = [];\n\t\tconst workspaces: IStringDictionary<string> = {};\n\t\tconst emptyWindows: IStringDictionary<string> = {};\n\n\t\tfor (const profile of profiles) {\n\t\t\tif (profile.isTransient) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!profile.isDefault) {\n\t\t\t\tstoredProfiles.push({ location: profile.location, name: profile.name, icon: profile.icon, useDefaultFlags: profile.useDefaultFlags });\n\t\t\t}\n\t\t\tif (profile.workspaces) {\n\t\t\t\tfor (const workspace of profile.workspaces) {\n\t\t\t\t\tworkspaces[workspace.toString()] = profile.id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [windowId, profile] of this.profilesObject.emptyWindows.entries()) {\n\t\t\temptyWindows[windowId.toString()] = profile.id;\n\t\t}\n\n\t\tthis.saveStoredProfileAssociations({ workspaces, emptyWindows });\n\t\tthis.saveStoredProfiles(storedProfiles);\n\t\tthis._profilesObject = undefined;\n\t}\n\n\tprotected getStoredProfiles(): StoredUserDataProfile[] { return []; }\n\tprotected saveStoredProfiles(storedProfiles: StoredUserDataProfile[]): void { throw new Error('not implemented'); }\n\n\tprotected getStoredProfileAssociations(): StoredProfileAssociations { return {}; }\n\tprotected saveStoredProfileAssociations(storedProfileAssociations: StoredProfileAssociations): void { throw new Error('not implemented'); }\n\tprotected getDefaultProfileExtensionsLocation(): URI | undefined { return undefined; }\n}\n\nexport class InMemoryUserDataProfilesService extends UserDataProfilesService {\n\tprivate storedProfiles: StoredUserDataProfile[] = [];\n\tprotected override getStoredProfiles(): StoredUserDataProfile[] { return this.storedProfiles; }\n\tprotected override saveStoredProfiles(storedProfiles: StoredUserDataProfile[]): void { this.storedProfiles = storedProfiles; }\n\n\tprivate storedProfileAssociations: StoredProfileAssociations = {};\n\tprotected override getStoredProfileAssociations(): StoredProfileAssociations { return this.storedProfileAssociations; }\n\tprotected override saveStoredProfileAssociations(storedProfileAssociations: StoredProfileAssociations): void { this.storedProfileAssociations = storedProfileAssociations; }\n}\n"],
  "mappings": "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",
  "names": ["ProfileResourceType"]
}
