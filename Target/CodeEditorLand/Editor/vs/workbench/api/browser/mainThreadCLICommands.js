var h=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var f=(t,e,n,i)=>{for(var r=i>1?void 0:i?E(e,n):e,o=t.length-1,s;o>=0;o--)(s=t[o])&&(r=(i?s(e,n,r):s(r))||r);return i&&r&&h(e,n,r),r},a=(t,e)=>(n,i)=>e(n,i,t);import{Schemas as y}from"../../../base/common/network.js";import{isWeb as w}from"../../../base/common/platform.js";import{isString as S}from"../../../base/common/types.js";import{URI as u}from"../../../base/common/uri.js";import{localize as b}from"../../../nls.js";import{CommandsRegistry as d,ICommandService as x}from"../../../platform/commands/common/commands.js";import{IExtensionGalleryService as C,IExtensionManagementService as I}from"../../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionManagementCLI as M}from"../../../platform/extensionManagement/common/extensionManagementCLI.js";import{getExtensionId as A}from"../../../platform/extensionManagement/common/extensionManagementUtil.js";import"../../../platform/extensions/common/extensions.js";import{IInstantiationService as _}from"../../../platform/instantiation/common/instantiation.js";import{ServiceCollection as L}from"../../../platform/instantiation/common/serviceCollection.js";import{ILabelService as O}from"../../../platform/label/common/label.js";import{AbstractMessageLogger as W}from"../../../platform/log/common/log.js";import{IOpenerService as P}from"../../../platform/opener/common/opener.js";import"../../../platform/window/common/window.js";import{IWorkbenchEnvironmentService as U}from"../../services/environment/common/environmentService.js";import{IExtensionManagementServerService as k}from"../../services/extensionManagement/common/extensionManagement.js";import{IExtensionManifestPropertiesService as G}from"../../services/extensions/common/extensionManifestPropertiesService.js";d.registerCommand("_remoteCLI.openExternal",function(t,e){return t.get(P).open(S(e)?e:u.revive(e),{openExternal:!0,allowTunneling:!0})}),d.registerCommand("_remoteCLI.windowOpen",function(t,e,n){const i=t.get(x);return e.length?i.executeCommand("_files.windowOpen",e,n):i.executeCommand("_files.newWindow",n)}),d.registerCommand("_remoteCLI.getSystemStatus",function(t){return t.get(x).executeCommand("_issues.getSystemStatus")}),d.registerCommand("_remoteCLI.manageExtensions",async function(t,e){const n=t.get(_),r=t.get(k).remoteExtensionManagementServer?.extensionManagementService;if(!r)return;const o=[],s=new class extends W{log(c,v){o.push(v)}},p=n.createChild(new L([I,r]));try{const c=p.createInstance(l,s);if(e.list)await c.listExtensions(!!e.list.showVersions,e.list.category,void 0);else{const v=m=>m.map(g=>S(g)?g:u.revive(g));if(Array.isArray(e.install)&&e.install.length)try{await c.installExtensions(v(e.install),[],{isMachineScoped:!0},!!e.force)}catch(m){o.push(m.message)}if(Array.isArray(e.uninstall)&&e.uninstall.length)try{await c.uninstallExtensions(v(e.uninstall),!!e.force,void 0)}catch(m){o.push(m.message)}}return o.join(`
`)}finally{p.dispose()}});let l=class extends M{constructor(n,i,r,o,s,p){super(n,i,r);this._extensionManifestPropertiesService=p;const c=s.remoteAuthority;this._location=c?o.getHostLabel(y.vscodeRemote,c):void 0}_location;get location(){return this._location}validateExtensionKind(n){return!this._extensionManifestPropertiesService.canExecuteOnWorkspace(n)&&!(w&&this._extensionManifestPropertiesService.canExecuteOnWeb(n))?(this.logger.info(b("cannot be installed","Cannot install the '{0}' extension because it is declared to not run in this setup.",A(n.publisher,n.name))),!1):!0}};l=f([a(1,I),a(2,C),a(3,O),a(4,U),a(5,G)],l);
