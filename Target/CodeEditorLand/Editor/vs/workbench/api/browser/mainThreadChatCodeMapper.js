var d=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var C=(t,o,e)=>o in t?d(t,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[o]=e;var M=(t,o,e,r)=>{for(var s=r>1?void 0:r?x(o,e):o,p=t.length-1,n;p>=0;p--)(n=t[p])&&(s=(r?n(o,e,s):n(s))||s);return r&&s&&d(o,e,s),s},c=(t,o)=>(e,r)=>o(e,r,t);var v=(t,o,e)=>C(t,typeof o!="symbol"?o+"":o,e);import"../../../base/common/cancellation.js";import{Disposable as I,DisposableMap as P}from"../../../base/common/lifecycle.js";import{URI as g}from"../../../base/common/uri.js";import{ICodeMapperService as H}from"../../contrib/chat/common/chatCodeMapperService.js";import{extHostNamedCustomer as b}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as f,MainContext as y}from"../common/extHost.protocol.js";let i=class extends I{constructor(e,r){super();this.codeMapperService=r;this._proxy=e.getProxy(f.ExtHostCodeMapper)}providers=this._register(new P);_proxy;_responseMap=new Map;$registerCodeMapperProvider(e){const r={mapCode:async(p,n,l)=>{const a=String(i._requestHandlePool++);this._responseMap.set(a,n);const m={requestId:a,codeBlocks:p.codeBlocks,conversation:p.conversation};try{return await this._proxy.$mapCode(e,m,l).then(u=>u??void 0)}finally{this._responseMap.delete(a)}}},s=this.codeMapperService.registerCodeMapperProvider(e,r);this.providers.set(e,s)}$unregisterCodeMapperProvider(e){this.providers.deleteAndDispose(e)}$handleProgress(e,r){const s=this._responseMap.get(e);if(s){const p=g.revive(r.uri);s.textEdit(p,r.edits)}return Promise.resolve()}};v(i,"_requestHandlePool",0),i=M([b(y.MainThreadCodeMapper),c(1,H)],i);export{i as MainThreadChatCodemapper};
