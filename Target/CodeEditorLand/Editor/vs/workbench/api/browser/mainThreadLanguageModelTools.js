var c=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var i=(a,l,o,t)=>{for(var e=t>1?void 0:t?g(l,o):l,n=a.length-1,s;n>=0;n--)(s=a[n])&&(e=(t?s(l,o,e):s(e))||e);return t&&e&&c(l,o,e),e},T=(a,l)=>(o,t)=>l(o,t,a);import"../../../base/common/cancellation.js";import{Disposable as p,DisposableMap as u}from"../../../base/common/lifecycle.js";import{ILanguageModelToolsService as v}from"../../contrib/chat/common/languageModelToolsService.js";import{extHostNamedCustomer as h}from"../../services/extensions/common/extHostCustomers.js";import{ExtHostContext as d,MainContext as k}from"../common/extHost.protocol.js";let r=class extends p{constructor(o,t){super();this._languageModelToolsService=t;this._proxy=o.getProxy(d.ExtHostLanguageModelTools),this._register(this._languageModelToolsService.onDidChangeTools(e=>this._proxy.$onDidChangeTools([...this._languageModelToolsService.getTools()])))}_proxy;_tools=this._register(new u);_countTokenCallbacks=new Map;async $getTools(){return Array.from(this._languageModelToolsService.getTools())}async $invokeTool(o,t){return await this._languageModelToolsService.invokeTool(o,(e,n)=>this._proxy.$countTokensForInvocation(o.callId,e,n),t)}$countTokensForInvocation(o,t,e){const n=this._countTokenCallbacks.get(o);if(!n)throw new Error(`Tool invocation call ${o} not found`);return n(t,e)}$registerTool(o){const t=this._languageModelToolsService.registerToolImplementation(o,{invoke:async(e,n,s)=>{try{return this._countTokenCallbacks.set(e.callId,n),await this._proxy.$invokeTool(e,s)}finally{this._countTokenCallbacks.delete(e.callId)}},prepareToolInvocation:(e,n,s)=>this._proxy.$prepareToolInvocation(o,e,n,s)});this._tools.set(o,t)}$unregisterTool(o){this._tools.deleteAndDispose(o)}};r=i([h(k.MainThreadLanguageModelTools),T(1,v)],r);export{r as MainThreadLanguageModelTools};
