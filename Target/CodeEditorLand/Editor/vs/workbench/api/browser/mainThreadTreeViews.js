var w=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var T=(o,a,e,r)=>{for(var t=r>1?void 0:r?y(a,e):a,i=o.length-1,s;i>=0;i--)(s=o[i])&&(t=(r?s(a,e,t):s(t))||t);return r&&t&&w(a,e,t),t},h=(o,a)=>(e,r)=>a(e,r,o);import{Disposable as x,DisposableMap as D,DisposableStore as S}from"../../../base/common/lifecycle.js";import{ExtHostContext as C,MainContext as b}from"../common/extHost.protocol.js";import{Extensions as M,ResolvableTreeItem as v,NoTreeViewError as V}from"../../common/views.js";import{extHostNamedCustomer as P}from"../../services/extensions/common/extHostCustomers.js";import{distinct as _}from"../../../base/common/arrays.js";import{INotificationService as k}from"../../../platform/notification/common/notification.js";import{isUndefinedOrNull as u,isNumber as $}from"../../../base/common/types.js";import{Registry as E}from"../../../platform/registry/common/platform.js";import{IExtensionService as H}from"../../services/extensions/common/extensions.js";import{ILogService as R}from"../../../platform/log/common/log.js";import"../../../base/common/cancellation.js";import{createStringDataTransferItem as A,VSDataTransfer as F}from"../../../base/common/dataTransfer.js";import"../../../base/common/buffer.js";import{DataTransferFileCache as N}from"../common/shared/dataTransferCache.js";import*as O from"../common/extHostTypeConverters.js";import"../../../base/common/htmlContent.js";import{IViewsService as B}from"../../services/views/common/viewsService.js";let m=class extends x{constructor(e,r,t,i,s){super();this.viewsService=r;this.notificationService=t;this.extensionService=i;this.logService=s;this._proxy=e.getProxy(C.ExtHostTreeViews)}_proxy;_dataProviders=this._register(new D);_dndControllers=new Map;async $registerTreeViewDataProvider(e,r){this.logService.trace("MainThreadTreeViews#$registerTreeViewDataProvider",e,r),this.extensionService.whenInstalledExtensionsRegistered().then(()=>{const t=new U(e,this._proxy,this.notificationService),i=new S;this._dataProviders.set(e,{dataProvider:t,dispose:()=>i.dispose()});const s=r.hasHandleDrag||r.hasHandleDrop?new L(e,r.dropMimeTypes,r.dragMimeTypes,r.hasHandleDrag,this._proxy):void 0,n=this.getTreeView(e);n?(n.showCollapseAllAction=r.showCollapseAll,n.canSelectMany=r.canSelectMany,n.manuallyManageCheckboxes=r.manuallyManageCheckboxes,n.dragAndDropController=s,s&&this._dndControllers.set(e,s),n.dataProvider=t,this.registerListeners(e,n,i),this._proxy.$setVisible(e,n.visible)):this.notificationService.error("No view is registered with id: "+e)})}$reveal(e,r,t){return this.logService.trace("MainThreadTreeViews#$reveal",e,r?.item,r?.parentChain,t),this.viewsService.openView(e,t.focus).then(()=>{const i=this.getTreeView(e);if(i&&r)return this.reveal(i,this._dataProviders.get(e).dataProvider,r.item,r.parentChain,t)})}$refresh(e,r){this.logService.trace("MainThreadTreeViews#$refresh",e,r);const t=this.getTreeView(e),i=this._dataProviders.get(e);if(t&&i){const s=i.dataProvider.getItemsToRefresh(r);return t.refresh(s.items.length?s.items:void 0,s.checkboxes.length?s.checkboxes:void 0)}return Promise.resolve()}$setMessage(e,r){this.logService.trace("MainThreadTreeViews#$setMessage",e,r.toString());const t=this.getTreeView(e);t&&(t.message=r)}$setTitle(e,r,t){this.logService.trace("MainThreadTreeViews#$setTitle",e,r,t);const i=this.getTreeView(e);i&&(i.title=r,i.description=t)}$setBadge(e,r){this.logService.trace("MainThreadTreeViews#$setBadge",e,r?.value,r?.tooltip);const t=this.getTreeView(e);t&&(t.badge=r)}$resolveDropFileData(e,r,t){const i=this._dndControllers.get(e);if(!i)throw new Error("Unknown tree");return i.resolveDropFileData(r,t)}async $disposeTree(e){const r=this.getTreeView(e);r&&(r.dataProvider=void 0),this._dataProviders.deleteAndDispose(e)}async reveal(e,r,t,i,s){s=s||{select:!1,focus:!1};const n=u(s.select)?!1:s.select,p=u(s.focus)?!1:s.focus;let g=Math.min($(s.expand)?s.expand:s.expand===!0?1:0,3);r.isEmpty()&&await e.refresh();for(const d of i){const c=r.getItem(d.handle);c&&await e.expand(c)}const l=r.getItem(t.handle);if(l){await e.reveal(l),n&&e.setSelection([l]),p===!1?e.setFocus():p&&e.setFocus(l);let d=[l];for(;d.length>0&&g>0;g--)await e.expand(d),d=d.reduce((c,I)=>{const f=r.getItem(I.handle);return f&&f.children&&f.children.length&&c.push(...f.children),c},[])}}registerListeners(e,r,t){t.add(r.onDidExpandItem(i=>this._proxy.$setExpanded(e,i.handle,!0))),t.add(r.onDidCollapseItem(i=>this._proxy.$setExpanded(e,i.handle,!1))),t.add(r.onDidChangeSelectionAndFocus(i=>this._proxy.$setSelectionAndFocus(e,i.selection.map(({handle:s})=>s),i.focus.handle))),t.add(r.onDidChangeVisibility(i=>this._proxy.$setVisible(e,i))),t.add(r.onDidChangeCheckboxState(i=>{this._proxy.$changeCheckboxState(e,i.map(s=>({treeItemHandle:s.handle,newState:s.checkbox?.isChecked??!1})))}))}getTreeView(e){const r=E.as(M.ViewsRegistry).getView(e);return r?r.treeView:null}dispose(){for(const e of this._dataProviders){const r=this.getTreeView(e[0]);r&&(r.dataProvider=void 0)}this._dataProviders.dispose(),this._dndControllers.clear(),super.dispose()}};m=T([P(b.MainThreadTreeViews),h(1,B),h(2,k),h(3,H),h(4,R)],m);class L{constructor(a,e,r,t,i){this.treeViewId=a;this.dropMimeTypes=e;this.dragMimeTypes=r;this.hasWillDrop=t;this._proxy=i}dataTransfersCache=new N;async handleDrop(a,e,r,t,i,s){const n=this.dataTransfersCache.add(a);try{const p=await O.DataTransfer.from(a);return r.isCancellationRequested?void 0:await this._proxy.$handleDrop(this.treeViewId,n.id,p,e?.handle,r,t,i,s)}finally{n.dispose()}}async handleDrag(a,e,r){if(!this.hasWillDrop)return;const t=await this._proxy.$handleDrag(this.treeViewId,a,e,r);if(!t)return;const i=new F;return t.items.forEach(([s,n])=>{i.replace(s,A(n.asString))}),i}resolveDropFileData(a,e){return this.dataTransfersCache.resolveFileData(a,e)}}class U{constructor(a,e,r){this.treeViewId=a;this._proxy=e;this.notificationService=r;this.hasResolve=this._proxy.$hasResolve(this.treeViewId)}itemsMap=new Map;hasResolve;getChildren(a){return a||this.itemsMap.clear(),this._proxy.$getChildren(this.treeViewId,a?a.handle:void 0).then(e=>this.postGetChildren(e),e=>(V.is(e)||this.notificationService.error(e),[]))}getItemsToRefresh(a){const e=[],r=[];if(a)for(const t of Object.keys(a)){const i=this.getItem(t);if(i){const s=a[t];if(i.checkbox?.isChecked!==s.checkbox?.isChecked&&r.push(i),this.updateTreeItem(i,s),t===s.handle)e.push(i);else{this.itemsMap.delete(t),this.itemsMap.set(i.handle,i);const n=s.parentHandle?this.itemsMap.get(s.parentHandle):null;n&&e.push(n)}}}return{items:e,checkboxes:r}}getItem(a){return this.itemsMap.get(a)}isEmpty(){return this.itemsMap.size===0}async postGetChildren(a){if(a===void 0)return;const e=[],r=await this.hasResolve;if(a)for(const t of a){const i=new v(t,r?s=>this._proxy.$resolve(this.treeViewId,t.handle,s):void 0);this.itemsMap.set(t.handle,i),e.push(i)}return e}updateTreeItem(a,e){if(e.children=e.children?e.children:void 0,a){const r=_([...Object.keys(a instanceof v?a.asTreeItem():a),...Object.keys(e)]);for(const t of r)a[t]=e[t];a instanceof v&&a.resetResolve()}}}export{m as MainThreadTreeViews};
