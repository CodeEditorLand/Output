{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/api/common/extHostLanguageModelTools.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { raceCancellation } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { CancellationError } from '../../../base/common/errors.js';\nimport { IDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { revive } from '../../../base/common/marshalling.js';\nimport { generateUuid } from '../../../base/common/uuid.js';\nimport { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { IPreparedToolInvocation, IToolInvocation, IToolInvocationContext, IToolResult } from '../../contrib/chat/common/languageModelToolsService.js';\nimport { ExtHostLanguageModelToolsShape, IMainContext, IToolDataDto, MainContext, MainThreadLanguageModelToolsShape } from './extHost.protocol.js';\nimport * as typeConvert from './extHostTypeConverters.js';\n\nexport class ExtHostLanguageModelTools implements ExtHostLanguageModelToolsShape {\n\t/** A map of tools that were registered in this EH */\n\tprivate readonly _registeredTools = new Map<string, { extension: IExtensionDescription; tool: vscode.LanguageModelTool<Object> }>();\n\tprivate readonly _proxy: MainThreadLanguageModelToolsShape;\n\tprivate readonly _tokenCountFuncs = new Map</* call ID */string, (text: string, token?: vscode.CancellationToken) => Thenable<number>>();\n\n\t/** A map of all known tools, from other EHs or registered in vscode core */\n\tprivate readonly _allTools = new Map<string, IToolDataDto>();\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadLanguageModelTools);\n\n\t\tthis._proxy.$getTools().then(tools => {\n\t\t\tfor (const tool of tools) {\n\t\t\t\tthis._allTools.set(tool.id, revive(tool));\n\t\t\t}\n\t\t});\n\t}\n\n\tasync $countTokensForInvocation(callId: string, input: string, token: CancellationToken): Promise<number> {\n\t\tconst fn = this._tokenCountFuncs.get(callId);\n\t\tif (!fn) {\n\t\t\tthrow new Error(`Tool invocation call ${callId} not found`);\n\t\t}\n\n\t\treturn await fn(input, token);\n\t}\n\n\tasync invokeTool(toolId: string, options: vscode.LanguageModelToolInvocationOptions<any>, token: CancellationToken): Promise<vscode.LanguageModelToolResult> {\n\t\tif (!options.requestedContentTypes?.length) {\n\t\t\tthrow new Error('LanguageModelToolInvocationOptions.requestedContentTypes is required to be set');\n\t\t}\n\n\t\tconst callId = generateUuid();\n\t\tif (options.tokenOptions) {\n\t\t\tthis._tokenCountFuncs.set(callId, options.tokenOptions.countTokens);\n\t\t}\n\t\ttry {\n\t\t\t// Making the round trip here because not all tools were necessarily registered in this EH\n\t\t\tconst result = await this._proxy.$invokeTool({\n\t\t\t\ttoolId,\n\t\t\t\tcallId,\n\t\t\t\tparameters: options.parameters,\n\t\t\t\ttokenBudget: options.tokenOptions?.tokenBudget,\n\t\t\t\tcontext: options.toolInvocationToken as IToolInvocationContext | undefined,\n\t\t\t\trequestedContentTypes: options.requestedContentTypes,\n\t\t\t}, token);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis._tokenCountFuncs.delete(callId);\n\t\t}\n\t}\n\n\t$onDidChangeTools(tools: IToolDataDto[]): void {\n\t\tthis._allTools.clear();\n\t\tfor (const tool of tools) {\n\t\t\tthis._allTools.set(tool.id, tool);\n\t\t}\n\t}\n\n\tget tools(): vscode.LanguageModelToolDescription[] {\n\t\treturn Array.from(this._allTools.values())\n\t\t\t.map(tool => typeConvert.LanguageModelToolDescription.to(tool));\n\t}\n\n\tasync $invokeTool(dto: IToolInvocation, token: CancellationToken): Promise<IToolResult> {\n\t\tconst item = this._registeredTools.get(dto.toolId);\n\t\tif (!item) {\n\t\t\tthrow new Error(`Unknown tool ${dto.toolId}`);\n\t\t}\n\n\t\tconst options: vscode.LanguageModelToolInvocationOptions<Object> = { parameters: dto.parameters, toolInvocationToken: dto.context, requestedContentTypes: dto.requestedContentTypes };\n\t\tif (dto.tokenBudget !== undefined) {\n\t\t\toptions.tokenOptions = {\n\t\t\t\ttokenBudget: dto.tokenBudget,\n\t\t\t\tcountTokens: this._tokenCountFuncs.get(dto.callId) || ((value, token = CancellationToken.None) =>\n\t\t\t\t\tthis._proxy.$countTokensForInvocation(dto.callId, value, token))\n\t\t\t};\n\t\t}\n\n\t\t// Some participant in extHostChatAgents calls invokeTool, goes to extHostLMTools\n\t\t// mainThreadLMTools invokes the tool, which calls back to extHostLMTools\n\t\t// The tool requests permission\n\t\t// The tool in extHostLMTools calls for permission back to mainThreadLMTools\n\t\t// And back to extHostLMTools, and back to the participant in extHostChatAgents\n\t\t// Is there a tool call ID to identify the call?\n\t\tconst extensionResult = await raceCancellation(Promise.resolve(item.tool.invoke(options, token)), token);\n\t\tif (!extensionResult) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tfor (const key of Object.keys(extensionResult)) {\n\t\t\tconst value = extensionResult[key];\n\t\t\tif (value instanceof Promise) {\n\t\t\t\tthrow new Error(`Tool result for '${key}' cannot be a Promise`);\n\t\t\t} else if (!options.requestedContentTypes.includes(key) && key !== 'toString') {\n\t\t\t\t// This could help the scenario where a tool updated the prompt-tsx library, but did not update the contentType in package.json.\n\t\t\t\t// Or, where a tool author didn't declare supportedContentTypes and isn't checking the list of requestedContentTypes.\n\t\t\t\t// toString check can be temp, just to help with tools that are already published.\n\t\t\t\tthrow new Error(`Tool result for '${key}' was not requested from ${dto.toolId}.`);\n\t\t\t}\n\t\t}\n\n\t\treturn extensionResult;\n\t}\n\n\tasync $prepareToolInvocation(toolId: string, participantName: string, parameters: any, token: CancellationToken): Promise<IPreparedToolInvocation | undefined> {\n\t\tconst item = this._registeredTools.get(toolId);\n\t\tif (!item) {\n\t\t\tthrow new Error(`Unknown tool ${toolId}`);\n\t\t}\n\n\t\tif (!item.tool.prepareToolInvocation) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result = await item.tool.prepareToolInvocation({ participantName, parameters }, token);\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tconfirmationMessages: result.confirmationMessages ? {\n\t\t\t\ttitle: result.confirmationMessages.title,\n\t\t\t\tmessage: typeof result.confirmationMessages.message === 'string' ? result.confirmationMessages.message : typeConvert.MarkdownString.from(result.confirmationMessages.message),\n\t\t\t} : undefined,\n\t\t\tinvocationMessage: result.invocationMessage\n\t\t};\n\t}\n\n\tregisterTool(extension: IExtensionDescription, id: string, tool: vscode.LanguageModelTool<any>): IDisposable {\n\t\tthis._registeredTools.set(id, { extension, tool });\n\t\tthis._proxy.$registerTool(id);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._registeredTools.delete(id);\n\t\t\tthis._proxy.$unregisterTool(id);\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["token"]
}
