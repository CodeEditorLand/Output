{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/api/common/extHostOutput.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadOutputServiceShape, ExtHostOutputServiceShape } from './extHost.protocol.js';\nimport type * as vscode from 'vscode';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { IExtHostRpcService } from './extHostRpcService.js';\nimport { ExtensionIdentifier, IExtensionDescription } from '../../../platform/extensions/common/extensions.js';\nimport { AbstractMessageLogger, ILogger, ILoggerService, ILogService, log, LogLevel, parseLogLevel } from '../../../platform/log/common/log.js';\nimport { OutputChannelUpdateMode } from '../../services/output/common/output.js';\nimport { IExtHostConsumerFileSystem } from './extHostFileSystemConsumer.js';\nimport { IExtHostInitDataService } from './extHostInitDataService.js';\nimport { IExtHostFileSystemInfo } from './extHostFileSystemInfo.js';\nimport { toLocalISOString } from '../../../base/common/date.js';\nimport { VSBuffer } from '../../../base/common/buffer.js';\nimport { isString } from '../../../base/common/types.js';\nimport { FileSystemProviderErrorCode, toFileSystemProviderErrorCode } from '../../../platform/files/common/files.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\n\nclass ExtHostOutputChannel extends AbstractMessageLogger implements vscode.LogOutputChannel {\n\n\tprivate offset: number = 0;\n\n\tpublic visible: boolean = false;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly name: string,\n\t\tprotected readonly logger: ILogger,\n\t\tprotected readonly proxy: MainThreadOutputServiceShape,\n\t\treadonly extension: IExtensionDescription,\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(logger.getLevel());\n\t\tthis._register(logger.onDidChangeLogLevel(level => this.setLevel(level)));\n\t\tthis._register(toDisposable(() => this.proxy.$dispose(this.id)));\n\t}\n\n\tget logLevel(): LogLevel {\n\t\treturn this.getLevel();\n\t}\n\n\tappendLine(value: string): void {\n\t\tthis.append(value + '\\n');\n\t}\n\n\tappend(value: string): void {\n\t\tthis.info(value);\n\t}\n\n\tclear(): void {\n\t\tconst till = this.offset;\n\t\tthis.logger.flush();\n\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Clear, till);\n\t}\n\n\treplace(value: string): void {\n\t\tconst till = this.offset;\n\t\tthis.info(value);\n\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Replace, till);\n\t\tif (this.visible) {\n\t\t\tthis.logger.flush();\n\t\t}\n\t}\n\n\tshow(columnOrPreserveFocus?: vscode.ViewColumn | boolean, preserveFocus?: boolean): void {\n\t\tthis.logger.flush();\n\t\tthis.proxy.$reveal(this.id, !!(typeof columnOrPreserveFocus === 'boolean' ? columnOrPreserveFocus : preserveFocus));\n\t}\n\n\thide(): void {\n\t\tthis.proxy.$close(this.id);\n\t}\n\n\tprotected log(level: LogLevel, message: string): void {\n\t\tthis.offset += VSBuffer.fromString(message).byteLength;\n\t\tlog(this.logger, level, message);\n\t\tif (this.visible) {\n\t\t\tthis.logger.flush();\n\t\t\tthis.proxy.$update(this.id, OutputChannelUpdateMode.Append);\n\t\t}\n\t}\n\n}\n\nclass ExtHostLogOutputChannel extends ExtHostOutputChannel {\n\n\toverride appendLine(value: string): void {\n\t\tthis.append(value);\n\t}\n\n}\n\nexport class ExtHostOutputService implements ExtHostOutputServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly proxy: MainThreadOutputServiceShape;\n\n\tprivate readonly outputsLocation: URI;\n\tprivate outputDirectoryPromise: Thenable<URI> | undefined;\n\tprivate readonly extensionLogDirectoryPromise = new Map<string, Thenable<URI>>();\n\tprivate namePool: number = 1;\n\n\tprivate readonly channels = new Map<string, ExtHostLogOutputChannel | ExtHostOutputChannel>();\n\tprivate visibleChannelId: string | null = null;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService private readonly initData: IExtHostInitDataService,\n\t\t@IExtHostConsumerFileSystem private readonly extHostFileSystem: IExtHostConsumerFileSystem,\n\t\t@IExtHostFileSystemInfo private readonly extHostFileSystemInfo: IExtHostFileSystemInfo,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tthis.proxy = extHostRpc.getProxy(MainContext.MainThreadOutputService);\n\t\tthis.outputsLocation = this.extHostFileSystemInfo.extUri.joinPath(initData.logsLocation, `output_logging_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')}`);\n\t}\n\n\t$setVisibleChannel(visibleChannelId: string | null): void {\n\t\tthis.visibleChannelId = visibleChannelId;\n\t\tfor (const [id, channel] of this.channels) {\n\t\t\tchannel.visible = id === this.visibleChannelId;\n\t\t}\n\t}\n\n\tcreateOutputChannel(name: string, options: string | { log: true } | undefined, extension: IExtensionDescription): vscode.OutputChannel | vscode.LogOutputChannel {\n\t\tname = name.trim();\n\t\tif (!name) {\n\t\t\tthrow new Error('illegal argument `name`. must not be falsy');\n\t\t}\n\t\tconst log = typeof options === 'object' && options.log;\n\t\tconst languageId = isString(options) ? options : undefined;\n\t\tif (isString(languageId) && !languageId.trim()) {\n\t\t\tthrow new Error('illegal argument `languageId`. must not be empty');\n\t\t}\n\t\tlet logLevel: LogLevel | undefined;\n\t\tconst logLevelValue = this.initData.environment.extensionLogLevel?.find(([identifier]) => ExtensionIdentifier.equals(extension.identifier, identifier))?.[1];\n\t\tif (logLevelValue) {\n\t\t\tlogLevel = parseLogLevel(logLevelValue);\n\t\t}\n\t\tconst channelDisposables = new DisposableStore();\n\t\tconst extHostOutputChannel = log\n\t\t\t? this.doCreateLogOutputChannel(name, logLevel, extension, channelDisposables)\n\t\t\t: this.doCreateOutputChannel(name, languageId, extension, channelDisposables);\n\t\textHostOutputChannel.then(channel => {\n\t\t\tthis.channels.set(channel.id, channel);\n\t\t\tchannel.visible = channel.id === this.visibleChannelId;\n\t\t\tchannelDisposables.add(toDisposable(() => this.channels.delete(channel.id)));\n\t\t});\n\t\treturn log\n\t\t\t? this.createExtHostLogOutputChannel(name, logLevel ?? this.logService.getLevel(), <Promise<ExtHostOutputChannel>>extHostOutputChannel, channelDisposables)\n\t\t\t: this.createExtHostOutputChannel(name, <Promise<ExtHostOutputChannel>>extHostOutputChannel, channelDisposables);\n\t}\n\n\tprivate async doCreateOutputChannel(name: string, languageId: string | undefined, extension: IExtensionDescription, channelDisposables: DisposableStore): Promise<ExtHostOutputChannel> {\n\t\tif (!this.outputDirectoryPromise) {\n\t\t\tthis.outputDirectoryPromise = this.extHostFileSystem.value.createDirectory(this.outputsLocation).then(() => this.outputsLocation);\n\t\t}\n\t\tconst outputDir = await this.outputDirectoryPromise;\n\t\tconst file = this.extHostFileSystemInfo.extUri.joinPath(outputDir, `${this.namePool++}-${name.replace(/[\\\\/:\\*\\?\"<>\\|]/g, '')}.log`);\n\t\tconst logger = channelDisposables.add(this.loggerService.createLogger(file, { logLevel: 'always', donotRotate: true, donotUseFormatters: true, hidden: true }));\n\t\tconst id = await this.proxy.$register(name, file, languageId, extension.identifier.value);\n\t\tchannelDisposables.add(toDisposable(() => this.loggerService.deregisterLogger(file)));\n\t\treturn new ExtHostOutputChannel(id, name, logger, this.proxy, extension);\n\t}\n\n\tprivate async doCreateLogOutputChannel(name: string, logLevel: LogLevel | undefined, extension: IExtensionDescription, channelDisposables: DisposableStore): Promise<ExtHostLogOutputChannel> {\n\t\tconst extensionLogDir = await this.createExtensionLogDirectory(extension);\n\t\tconst fileName = name.replace(/[\\\\/:\\*\\?\"<>\\|]/g, '');\n\t\tconst file = this.extHostFileSystemInfo.extUri.joinPath(extensionLogDir, `${fileName}.log`);\n\t\tconst id = `${extension.identifier.value}.${fileName}`;\n\t\tconst logger = channelDisposables.add(this.loggerService.createLogger(file, { id, name, logLevel, extensionId: extension.identifier.value }));\n\t\tchannelDisposables.add(toDisposable(() => this.loggerService.deregisterLogger(file)));\n\t\treturn new ExtHostLogOutputChannel(id, name, logger, this.proxy, extension);\n\t}\n\n\tprivate createExtensionLogDirectory(extension: IExtensionDescription): Thenable<URI> {\n\t\tlet extensionLogDirectoryPromise = this.extensionLogDirectoryPromise.get(extension.identifier.value);\n\t\tif (!extensionLogDirectoryPromise) {\n\t\t\tconst extensionLogDirectory = this.extHostFileSystemInfo.extUri.joinPath(this.initData.logsLocation, extension.identifier.value);\n\t\t\tthis.extensionLogDirectoryPromise.set(extension.identifier.value, extensionLogDirectoryPromise = (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.extHostFileSystem.value.createDirectory(extensionLogDirectory);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (toFileSystemProviderErrorCode(err) !== FileSystemProviderErrorCode.FileExists) {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn extensionLogDirectory;\n\t\t\t})());\n\t\t}\n\t\treturn extensionLogDirectoryPromise;\n\t}\n\n\tprivate createExtHostOutputChannel(name: string, channelPromise: Promise<ExtHostOutputChannel>, channelDisposables: DisposableStore): vscode.OutputChannel {\n\t\tconst validate = () => {\n\t\t\tif (channelDisposables.isDisposed) {\n\t\t\t\tthrow new Error('Channel has been closed');\n\t\t\t}\n\t\t};\n\t\tchannelPromise.then(channel => channelDisposables.add(channel));\n\t\treturn {\n\t\t\tget name(): string { return name; },\n\t\t\tappend(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.append(value));\n\t\t\t},\n\t\t\tappendLine(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.appendLine(value));\n\t\t\t},\n\t\t\tclear(): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.clear());\n\t\t\t},\n\t\t\treplace(value: string): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.replace(value));\n\t\t\t},\n\t\t\tshow(columnOrPreserveFocus?: vscode.ViewColumn | boolean, preserveFocus?: boolean): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.show(columnOrPreserveFocus, preserveFocus));\n\t\t\t},\n\t\t\thide(): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.hide());\n\t\t\t},\n\t\t\tdispose(): void {\n\t\t\t\tchannelDisposables.dispose();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createExtHostLogOutputChannel(name: string, logLevel: LogLevel, channelPromise: Promise<ExtHostOutputChannel>, channelDisposables: DisposableStore): vscode.LogOutputChannel {\n\t\tconst validate = () => {\n\t\t\tif (channelDisposables.isDisposed) {\n\t\t\t\tthrow new Error('Channel has been closed');\n\t\t\t}\n\t\t};\n\t\tconst onDidChangeLogLevel = channelDisposables.add(new Emitter<LogLevel>());\n\t\tfunction setLogLevel(newLogLevel: LogLevel): void {\n\t\t\tlogLevel = newLogLevel;\n\t\t\tonDidChangeLogLevel.fire(newLogLevel);\n\t\t}\n\t\tchannelPromise.then(channel => {\n\t\t\tif (channel.logLevel !== logLevel) {\n\t\t\t\tsetLogLevel(channel.logLevel);\n\t\t\t}\n\t\t\tchannelDisposables.add(channel.onDidChangeLogLevel(e => setLogLevel(e)));\n\t\t});\n\t\treturn {\n\t\t\t...this.createExtHostOutputChannel(name, channelPromise, channelDisposables),\n\t\t\tget logLevel() { return logLevel; },\n\t\t\tonDidChangeLogLevel: onDidChangeLogLevel.event,\n\t\t\ttrace(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.trace(value, ...args));\n\t\t\t},\n\t\t\tdebug(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.debug(value, ...args));\n\t\t\t},\n\t\t\tinfo(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.info(value, ...args));\n\t\t\t},\n\t\t\twarn(value: string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.warn(value, ...args));\n\t\t\t},\n\t\t\terror(value: Error | string, ...args: any[]): void {\n\t\t\t\tvalidate();\n\t\t\t\tchannelPromise.then(channel => channel.error(value, ...args));\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport interface IExtHostOutputService extends ExtHostOutputService { }\nexport const IExtHostOutputService = createDecorator<IExtHostOutputService>('IExtHostOutputService');\n"],
  "mappings": "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",
  "names": ["log"]
}
