{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/authentication/browser/actions/manageAccountPreferencesForExtensionAction.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../../../base/common/event.js';\nimport { DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { IQuickInputService, IQuickPick, IQuickPickItem, QuickPickInput } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IAccountUsage, IAuthenticationUsageService } from '../../../../services/authentication/browser/authenticationUsageService.js';\nimport { AuthenticationSessionAccount, IAuthenticationExtensionsService, IAuthenticationService } from '../../../../services/authentication/common/authentication.js';\nimport { IExtensionService } from '../../../../services/extensions/common/extensions.js';\n\nexport class ManageAccountPreferencesForExtensionAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_manageAccountPreferencesForExtension',\n\t\t\ttitle: localize2('manageAccountPreferenceForExtension', \"Manage Extension Account Preferences\"),\n\t\t\tcategory: localize2('accounts', \"Accounts\"),\n\t\t\tf1: false\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, extensionId?: string, providerId?: string): Promise<void> {\n\t\treturn accessor.get(IInstantiationService).createInstance(ManageAccountPreferenceForExtensionActionImpl).run(extensionId, providerId);\n\t}\n}\n\ntype AccountPreferenceQuickPickItem = NewAccountQuickPickItem | ExistingAccountQuickPickItem;\n\ninterface NewAccountQuickPickItem extends IQuickPickItem {\n\taccount?: undefined;\n\tscopes: string[];\n\tproviderId: string;\n}\n\ninterface ExistingAccountQuickPickItem extends IQuickPickItem {\n\taccount: AuthenticationSessionAccount;\n\tscopes?: undefined;\n\tproviderId: string;\n}\n\nclass ManageAccountPreferenceForExtensionActionImpl {\n\tconstructor(\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IAuthenticationUsageService private readonly _authenticationUsageService: IAuthenticationUsageService,\n\t\t@IAuthenticationExtensionsService private readonly _authenticationExtensionsService: IAuthenticationExtensionsService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) { }\n\n\tasync run(extensionId?: string, providerId?: string) {\n\t\tif (!extensionId) {\n\t\t\treturn;\n\t\t}\n\t\tconst extension = await this._extensionService.getExtension(extensionId);\n\t\tif (!extension) {\n\t\t\tthrow new Error(`No extension with id ${extensionId}`);\n\t\t}\n\n\t\tconst providerIds = new Array<string>();\n\t\tconst providerIdToAccounts = new Map<string, ReadonlyArray<AuthenticationSessionAccount & { lastUsed?: number }>>();\n\t\tif (providerId) {\n\t\t\tproviderIds.push(providerId);\n\t\t\tproviderIdToAccounts.set(providerId, await this._authenticationService.getAccounts(providerId));\n\t\t} else {\n\t\t\tfor (const providerId of this._authenticationService.getProviderIds()) {\n\t\t\t\tconst accounts = await this._authenticationService.getAccounts(providerId);\n\t\t\t\tfor (const account of accounts) {\n\t\t\t\t\tconst usage = this._authenticationUsageService.readAccountUsages(providerId, account.label).find(u => u.extensionId === extensionId.toLowerCase());\n\t\t\t\t\tif (usage) {\n\t\t\t\t\t\tproviderIds.push(providerId);\n\t\t\t\t\t\tproviderIdToAccounts.set(providerId, accounts);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet chosenProviderId: string | undefined = providerIds[0];\n\t\tif (providerIds.length > 1) {\n\t\t\tconst result = await this._quickInputService.pick(\n\t\t\t\tproviderIds.map(providerId => ({\n\t\t\t\t\tlabel: this._authenticationService.getProvider(providerId).label,\n\t\t\t\t\tid: providerId,\n\t\t\t\t})),\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: localize('selectProvider', \"Select an authentication provider to manage account preferences for\"),\n\t\t\t\t\ttitle: localize('pickAProviderTitle', \"Manage Extension Account Preferences\")\n\t\t\t\t}\n\t\t\t);\n\t\t\tchosenProviderId = result?.id;\n\t\t}\n\n\t\tif (!chosenProviderId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentAccountNamePreference = this._authenticationExtensionsService.getAccountPreference(extensionId, chosenProviderId);\n\t\tconst accounts = providerIdToAccounts.get(chosenProviderId)!;\n\t\tconst items: Array<QuickPickInput<AccountPreferenceQuickPickItem>> = this._getItems(accounts, chosenProviderId, currentAccountNamePreference);\n\n\t\t// If the provider supports multiple accounts, add an option to use a new account\n\t\tconst provider = this._authenticationService.getProvider(chosenProviderId);\n\t\tif (provider.supportsMultipleAccounts) {\n\t\t\t// Get the last used scopes for the last used account. This will be used to pre-fill the scopes when adding a new account.\n\t\t\t// If there's no scopes, then don't add this option.\n\t\t\tconst lastUsedScopes = accounts\n\t\t\t\t.flatMap(account => this._authenticationUsageService.readAccountUsages(chosenProviderId!, account.label).find(u => u.extensionId === extensionId.toLowerCase()))\n\t\t\t\t.filter((usage): usage is IAccountUsage => !!usage)\n\t\t\t\t.sort((a, b) => b.lastUsed - a.lastUsed)?.[0]?.scopes;\n\t\t\tif (lastUsedScopes) {\n\t\t\t\titems.push({ type: 'separator' });\n\t\t\t\titems.push({\n\t\t\t\t\tproviderId: chosenProviderId,\n\t\t\t\t\tscopes: lastUsedScopes,\n\t\t\t\t\tlabel: localize('use new account', \"Use a new account...\"),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = this._createQuickPick(disposables, extensionId, extension.displayName ?? extension.name);\n\t\tif (items.length === 0) {\n\t\t\t// We would only get here if we went through the Command Palette\n\t\t\tdisposables.add(this._handleNoAccounts(picker));\n\t\t\treturn;\n\t\t}\n\t\tpicker.items = items;\n\t\tpicker.show();\n\t}\n\n\tprivate _createQuickPick(disposableStore: DisposableStore, extensionId: string, extensionLabel: string) {\n\t\tconst picker = disposableStore.add(this._quickInputService.createQuickPick<AccountPreferenceQuickPickItem>({ useSeparators: true }));\n\t\tdisposableStore.add(picker.onDidHide(() => {\n\t\t\tdisposableStore.dispose();\n\t\t}));\n\t\tpicker.placeholder = localize('placeholder', \"Manage '{0}' account preferences...\", extensionLabel);\n\t\tpicker.title = localize('title', \"'{0}' Account Preferences For This Workspace\", extensionLabel);\n\t\tpicker.sortByLabel = false;\n\t\tdisposableStore.add(picker.onDidAccept(async () => {\n\t\t\tpicker.hide();\n\t\t\tawait this._accept(extensionId, picker.selectedItems);\n\t\t}));\n\t\treturn picker;\n\t}\n\n\tprivate _getItems(accounts: ReadonlyArray<AuthenticationSessionAccount>, providerId: string, currentAccountNamePreference: string | undefined): Array<QuickPickInput<AccountPreferenceQuickPickItem>> {\n\t\treturn accounts.map<QuickPickInput<AccountPreferenceQuickPickItem>>(a => currentAccountNamePreference === a.label\n\t\t\t? {\n\t\t\t\tlabel: a.label,\n\t\t\t\taccount: a,\n\t\t\t\tproviderId,\n\t\t\t\tdescription: localize('currentAccount', \"Current account\"),\n\t\t\t\tpicked: true\n\t\t\t}\n\t\t\t: {\n\t\t\t\tlabel: a.label,\n\t\t\t\taccount: a,\n\t\t\t\tproviderId,\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate _handleNoAccounts(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>): IDisposable {\n\t\tpicker.validationMessage = localize('noAccounts', \"No accounts are currently used by this extension.\");\n\t\tpicker.buttons = [this._quickInputService.backButton];\n\t\tpicker.show();\n\t\treturn Event.filter(picker.onDidTriggerButton, (e) => e === this._quickInputService.backButton)(() => this.run());\n\t}\n\n\tprivate async _accept(extensionId: string, selectedItems: ReadonlyArray<AccountPreferenceQuickPickItem>) {\n\t\tfor (const item of selectedItems) {\n\t\t\tlet account: AuthenticationSessionAccount;\n\t\t\tif (!item.account) {\n\t\t\t\ttry {\n\t\t\t\t\tconst session = await this._authenticationService.createSession(item.providerId, item.scopes);\n\t\t\t\t\taccount = session.account;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logService.error(e);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taccount = item.account;\n\t\t\t}\n\t\t\tconst providerId = item.providerId;\n\t\t\tconst currentAccountName = this._authenticationExtensionsService.getAccountPreference(extensionId, providerId);\n\t\t\tif (currentAccountName === account.label) {\n\t\t\t\t// This account is already the preferred account\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._authenticationExtensionsService.updateAccountPreference(extensionId, providerId, account);\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": ["providerId", "accounts"]
}
