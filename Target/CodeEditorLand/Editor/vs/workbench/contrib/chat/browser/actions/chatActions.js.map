{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/actions/chatActions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toAction } from '../../../../../base/common/actions.js';\nimport { coalesce } from '../../../../../base/common/arrays.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { fromNowByDay } from '../../../../../base/common/date.js';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../../../base/common/themables.js';\nimport { ICodeEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { EditorAction2, ServicesAccessor } from '../../../../../editor/browser/editorExtensions.js';\nimport { Position } from '../../../../../editor/common/core/position.js';\nimport { SuggestController } from '../../../../../editor/contrib/suggest/browser/suggestController.js';\nimport { localize, localize2 } from '../../../../../nls.js';\nimport { IActionViewItemService } from '../../../../../platform/actions/browser/actionViewItemService.js';\nimport { DropdownWithPrimaryActionViewItem } from '../../../../../platform/actions/browser/dropdownWithPrimaryActionViewItem.js';\nimport { Action2, MenuId, MenuItemAction, MenuRegistry, registerAction2, SubmenuItemAction } from '../../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IsLinuxContext, IsWindowsContext } from '../../../../../platform/contextkey/common/contextkeys.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { IQuickInputButton, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';\nimport { ACTIVE_GROUP, IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { IViewsService } from '../../../../services/views/common/viewsService.js';\nimport { ChatAgentLocation, IChatAgentService } from '../../common/chatAgents.js';\nimport { CONTEXT_CHAT_ENABLED, CONTEXT_CHAT_INPUT_CURSOR_AT_TOP, CONTEXT_CHAT_LOCATION, CONTEXT_IN_CHAT_INPUT, CONTEXT_IN_CHAT_SESSION, CONTEXT_IN_QUICK_CHAT } from '../../common/chatContextKeys.js';\nimport { extractAgentAndCommand } from '../../common/chatParserTypes.js';\nimport { IChatDetail, IChatService } from '../../common/chatService.js';\nimport { IChatRequestViewModel, IChatResponseViewModel, isRequestVM } from '../../common/chatViewModel.js';\nimport { IChatWidgetHistoryService } from '../../common/chatWidgetHistoryService.js';\nimport { CHAT_VIEW_ID, IChatWidget, IChatWidgetService, showChatView } from '../chat.js';\nimport { IChatEditorOptions } from '../chatEditor.js';\nimport { ChatEditorInput } from '../chatEditorInput.js';\nimport { ChatViewPane } from '../chatViewPane.js';\nimport { clearChatEditor } from './chatClear.js';\n\nexport const CHAT_CATEGORY = localize2('chat.category', 'Chat');\nexport const CHAT_OPEN_ACTION_ID = 'workbench.action.chat.open';\n\nexport interface IChatViewOpenOptions {\n\t/**\n\t * The query for quick chat.\n\t */\n\tquery: string;\n\t/**\n\t * Whether the query is partial and will await more input from the user.\n\t */\n\tisPartialQuery?: boolean;\n\t/**\n\t * Any previous chat requests and responses that should be shown in the chat view.\n\t */\n\tpreviousRequests?: IChatViewOpenRequestEntry[];\n}\n\nexport interface IChatViewOpenRequestEntry {\n\trequest: string;\n\tresponse: string;\n}\n\nclass OpenChatGlobalAction extends Action2 {\n\n\tstatic readonly TITLE = localize2('openChat', \"Open Chat\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CHAT_OPEN_ACTION_ID,\n\t\t\ttitle: OpenChatGlobalAction.TITLE,\n\t\t\ticon: Codicon.commentDiscussion,\n\t\t\tf1: true,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyI,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyI\n\t\t\t\t}\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ChatCommandCenter,\n\t\t\t\tgroup: 'a_chat',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, opts?: string | IChatViewOpenOptions): Promise<void> {\n\t\topts = typeof opts === 'string' ? { query: opts } : opts;\n\n\t\tconst chatService = accessor.get(IChatService);\n\t\tconst chatWidget = await showChatView(accessor.get(IViewsService));\n\t\tif (!chatWidget) {\n\t\t\treturn;\n\t\t}\n\t\tif (opts?.previousRequests?.length && chatWidget.viewModel) {\n\t\t\tfor (const { request, response } of opts.previousRequests) {\n\t\t\t\tchatService.addCompleteRequest(chatWidget.viewModel.sessionId, request, undefined, 0, { message: response });\n\t\t\t}\n\t\t}\n\t\tif (opts?.query) {\n\t\t\tif (opts.isPartialQuery) {\n\t\t\t\tchatWidget.setInput(opts.query);\n\t\t\t} else {\n\t\t\t\tchatWidget.acceptInput(opts.query);\n\t\t\t}\n\t\t}\n\n\t\tchatWidget.focusInput();\n\t}\n}\n\nclass ChatHistoryAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: `workbench.action.chat.history`,\n\t\t\ttitle: localize2('chat.history.label', \"Show Chats...\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\twhen: ContextKeyExpr.equals('view', CHAT_VIEW_ID),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\ticon: Codicon.history,\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_CHAT_ENABLED\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst chatService = accessor.get(IChatService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst viewsService = accessor.get(IViewsService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst showPicker = () => {\n\t\t\tconst openInEditorButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.file),\n\t\t\t\ttooltip: localize('interactiveSession.history.editor', \"Open in Editor\"),\n\t\t\t};\n\t\t\tconst deleteButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.x),\n\t\t\t\ttooltip: localize('interactiveSession.history.delete', \"Delete\"),\n\t\t\t};\n\t\t\tconst renameButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.pencil),\n\t\t\t\ttooltip: localize('chat.history.rename', \"Rename\"),\n\t\t\t};\n\n\t\t\tinterface IChatPickerItem extends IQuickPickItem {\n\t\t\t\tchat: IChatDetail;\n\t\t\t}\n\n\t\t\tconst getPicks = () => {\n\t\t\t\tconst items = chatService.getHistory();\n\t\t\t\titems.sort((a, b) => (b.lastMessageDate ?? 0) - (a.lastMessageDate ?? 0));\n\n\t\t\t\tlet lastDate: string | undefined = undefined;\n\t\t\t\tconst picks = items.flatMap((i): [IQuickPickSeparator | undefined, IChatPickerItem] => {\n\t\t\t\t\tconst timeAgoStr = fromNowByDay(i.lastMessageDate, true, true);\n\t\t\t\t\tconst separator: IQuickPickSeparator | undefined = timeAgoStr !== lastDate ? {\n\t\t\t\t\t\ttype: 'separator', label: timeAgoStr,\n\t\t\t\t\t} : undefined;\n\t\t\t\t\tlastDate = timeAgoStr;\n\t\t\t\t\treturn [\n\t\t\t\t\t\tseparator,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: i.title,\n\t\t\t\t\t\t\tdescription: i.isActive ? `(${localize('currentChatLabel', 'current')})` : '',\n\t\t\t\t\t\t\tchat: i,\n\t\t\t\t\t\t\tbuttons: i.isActive ? [renameButton] : [\n\t\t\t\t\t\t\t\trenameButton,\n\t\t\t\t\t\t\t\topenInEditorButton,\n\t\t\t\t\t\t\t\tdeleteButton,\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t});\n\n\t\t\t\treturn coalesce(picks);\n\t\t\t};\n\n\t\t\tconst store = new DisposableStore();\n\t\t\tconst picker = store.add(quickInputService.createQuickPick<IChatPickerItem>({ useSeparators: true }));\n\t\t\tpicker.placeholder = localize('interactiveSession.history.pick', \"Switch to chat\");\n\t\t\tconst picks = getPicks();\n\t\t\tpicker.items = picks;\n\t\t\tstore.add(picker.onDidTriggerItemButton(async context => {\n\t\t\t\tif (context.button === openInEditorButton) {\n\t\t\t\t\tconst options: IChatEditorOptions = { target: { sessionId: context.item.chat.sessionId }, pinned: true };\n\t\t\t\t\teditorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options }, ACTIVE_GROUP);\n\t\t\t\t\tpicker.hide();\n\t\t\t\t} else if (context.button === deleteButton) {\n\t\t\t\t\tchatService.removeHistoryEntry(context.item.chat.sessionId);\n\t\t\t\t\tpicker.items = getPicks();\n\t\t\t\t} else if (context.button === renameButton) {\n\t\t\t\t\tconst title = await quickInputService.input({ title: localize('newChatTitle', \"New chat title\"), value: context.item.chat.title });\n\t\t\t\t\tif (title) {\n\t\t\t\t\t\tchatService.setChatSessionTitle(context.item.chat.sessionId, title);\n\t\t\t\t\t}\n\n\t\t\t\t\t// The quick input hides the picker, it gets disposed, so we kick it off from scratch\n\t\t\t\t\tshowPicker();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tstore.add(picker.onDidAccept(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst item = picker.selectedItems[0];\n\t\t\t\t\tconst sessionId = item.chat.sessionId;\n\t\t\t\t\tconst view = await viewsService.openView(CHAT_VIEW_ID) as ChatViewPane;\n\t\t\t\t\tview.loadSession(sessionId);\n\t\t\t\t} finally {\n\t\t\t\t\tpicker.hide();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tstore.add(picker.onDidHide(() => store.dispose()));\n\n\t\t\tpicker.show();\n\t\t};\n\t\tshowPicker();\n\t}\n}\n\nclass OpenChatEditorAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: `workbench.action.openChat`,\n\t\t\ttitle: localize2('interactiveSession.open', \"Open Editor\"),\n\t\t\tf1: true,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tprecondition: CONTEXT_CHAT_ENABLED\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tawait editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options: { pinned: true } satisfies IChatEditorOptions });\n\t}\n}\n\n\nclass ChatAddAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.chat.addParticipant',\n\t\t\ttitle: localize2('chatWith', \"Chat with Extension\"),\n\t\t\ticon: Codicon.mention,\n\t\t\tf1: false,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ChatInput,\n\t\t\t\twhen: CONTEXT_CHAT_LOCATION.isEqualTo(ChatAgentLocation.Panel),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\tconst context: { widget?: IChatWidget } | undefined = args[0];\n\t\tconst widget = context?.widget ?? widgetService.lastFocusedWidget;\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasAgentOrCommand = extractAgentAndCommand(widget.parsedInput);\n\t\tif (hasAgentOrCommand?.agentPart || hasAgentOrCommand?.commandPart) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst suggestCtrl = SuggestController.get(widget.inputEditor);\n\t\tif (suggestCtrl) {\n\t\t\tconst curText = widget.inputEditor.getValue();\n\t\t\tconst newValue = curText ? `@ ${curText}` : '@';\n\t\t\tif (!curText.startsWith('@')) {\n\t\t\t\twidget.inputEditor.setValue(newValue);\n\t\t\t}\n\n\t\t\twidget.inputEditor.setPosition(new Position(1, 2));\n\t\t\tsuggestCtrl.triggerSuggest(undefined, true);\n\t\t}\n\t}\n}\n\nexport function registerChatActions() {\n\tregisterAction2(OpenChatGlobalAction);\n\tregisterAction2(ChatHistoryAction);\n\tregisterAction2(OpenChatEditorAction);\n\tregisterAction2(ChatAddAction);\n\n\tregisterAction2(class ClearChatInputHistoryAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.clearInputHistory',\n\t\t\t\ttitle: localize2('interactiveSession.clearHistory.label', \"Clear Input History\"),\n\t\t\t\tprecondition: CONTEXT_CHAT_ENABLED,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst historyService = accessor.get(IChatWidgetHistoryService);\n\t\t\thistoryService.clearHistory();\n\t\t}\n\t});\n\n\tregisterAction2(class ClearChatHistoryAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.clearHistory',\n\t\t\t\ttitle: localize2('chat.clear.label', \"Clear All Workspace Chats\"),\n\t\t\t\tprecondition: CONTEXT_CHAT_ENABLED,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\t\tconst viewsService = accessor.get(IViewsService);\n\n\t\t\tconst chatService = accessor.get(IChatService);\n\t\t\tchatService.clearAllHistoryEntries();\n\n\t\t\tconst chatView = viewsService.getViewWithId(CHAT_VIEW_ID) as ChatViewPane | undefined;\n\t\t\tif (chatView) {\n\t\t\t\tchatView.widget.clear();\n\t\t\t}\n\n\t\t\t// Clear all chat editors. Have to go this route because the chat editor may be in the background and\n\t\t\t// not have a ChatEditorInput.\n\t\t\teditorGroupsService.groups.forEach(group => {\n\t\t\t\tgroup.editors.forEach(editor => {\n\t\t\t\t\tif (editor instanceof ChatEditorInput) {\n\t\t\t\t\t\tclearChatEditor(accessor, editor);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\n\tregisterAction2(class FocusChatAction extends EditorAction2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'chat.action.focus',\n\t\t\t\ttitle: localize2('actions.interactiveSession.focus', 'Focus Chat List'),\n\t\t\t\tprecondition: ContextKeyExpr.and(CONTEXT_IN_CHAT_INPUT),\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tkeybinding: [\n\t\t\t\t\t// On mac, require that the cursor is at the top of the input, to avoid stealing cmd+up to move the cursor to the top\n\t\t\t\t\t{\n\t\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_CHAT_INPUT_CURSOR_AT_TOP, CONTEXT_IN_QUICK_CHAT.negate()),\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\t},\n\t\t\t\t\t// On win/linux, ctrl+up can always focus the chat list\n\t\t\t\t\t{\n\t\t\t\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.or(IsWindowsContext, IsLinuxContext), CONTEXT_IN_QUICK_CHAT.negate()),\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_CHAT_SESSION, CONTEXT_IN_QUICK_CHAT),\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\t\tconst editorUri = editor.getModel()?.uri;\n\t\t\tif (editorUri) {\n\t\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\t\twidgetService.getWidgetByInputUri(editorUri)?.focusLastMessage();\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterAction2(class FocusChatInputAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.focusInput',\n\t\t\t\ttitle: localize2('interactiveSession.focusInput.label', \"Focus Chat Input\"),\n\t\t\t\tf1: false,\n\t\t\t\tkeybinding: [\n\t\t\t\t\t{\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_CHAT_SESSION, CONTEXT_IN_CHAT_INPUT.negate(), CONTEXT_IN_QUICK_CHAT.negate()),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_CHAT_SESSION, CONTEXT_IN_CHAT_INPUT.negate(), CONTEXT_IN_QUICK_CHAT),\n\t\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\twidgetService.lastFocusedWidget?.focusInput();\n\t\t}\n\t});\n}\n\nexport function stringifyItem(item: IChatRequestViewModel | IChatResponseViewModel, includeName = true): string {\n\tif (isRequestVM(item)) {\n\t\treturn (includeName ? `${item.username}: ` : '') + item.messageText;\n\t} else {\n\t\treturn (includeName ? `${item.username}: ` : '') + item.response.toString();\n\t}\n}\n\n\n// --- command center chat\n\nMenuRegistry.appendMenuItem(MenuId.CommandCenter, {\n\tsubmenu: MenuId.ChatCommandCenter,\n\ttitle: localize('title4', \"Chat\"),\n\ticon: Codicon.commentDiscussion,\n\twhen: ContextKeyExpr.and(CONTEXT_CHAT_ENABLED, ContextKeyExpr.has('config.chat.commandCenter.enabled')),\n\torder: 10001,\n});\n\nexport class ChatCommandCenterRendering implements IWorkbenchContribution {\n\n\tstatic readonly ID = 'chat.commandCenterRendering';\n\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\t@IActionViewItemService actionViewItemService: IActionViewItemService,\n\t\t@IChatAgentService agentService: IChatAgentService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\n\t\tthis._store.add(actionViewItemService.register(MenuId.CommandCenter, MenuId.ChatCommandCenter, (action, options) => {\n\n\t\t\tconst agent = agentService.getDefaultAgent(ChatAgentLocation.Panel);\n\t\t\tif (!agent?.metadata.themeIcon) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (!(action instanceof SubmenuItemAction)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst dropdownAction = toAction({\n\t\t\t\tid: agent.id,\n\t\t\t\tlabel: localize('more', \"More...\"),\n\t\t\t\trun() { }\n\t\t\t});\n\n\t\t\tconst primaryAction = instantiationService.createInstance(MenuItemAction, {\n\t\t\t\tid: CHAT_OPEN_ACTION_ID,\n\t\t\t\ttitle: OpenChatGlobalAction.TITLE,\n\t\t\t\ticon: agent.metadata.themeIcon,\n\t\t\t}, undefined, undefined, undefined, undefined);\n\n\t\t\treturn instantiationService.createInstance(\n\t\t\t\tDropdownWithPrimaryActionViewItem,\n\t\t\t\tprimaryAction, dropdownAction, action.actions,\n\t\t\t\t'', options\n\t\t\t);\n\n\t\t}, agentService.onDidChangeAgents));\n\t}\n\n\tdispose() {\n\t\tthis._store.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["picks"]
}
