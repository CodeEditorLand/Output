import{Codicon as w}from"../../../../../base/common/codicons.js";import{KeyCode as v,KeyMod as A}from"../../../../../base/common/keyCodes.js";import"../../../../../editor/browser/editorExtensions.js";import{localize2 as p}from"../../../../../nls.js";import{AccessibilitySignal as b,IAccessibilitySignalService as C}from"../../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js";import{Action2 as g,MenuId as r,registerAction2 as h}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as c}from"../../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as V}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{ActiveEditorContext as N}from"../../../../common/contextkeys.js";import{CHAT_CATEGORY as m}from"./chatActions.js";import{clearChatEditor as x}from"./chatClear.js";import{CHAT_VIEW_ID as S,EDITS_VIEW_ID as f,IChatWidgetService as y}from"../chat.js";import{ChatEditorInput as W}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_IN_CHAT_SESSION as D,CONTEXT_CHAT_ENABLED as u,CONTEXT_CHAT_EDITING_PARTICIPANT_REGISTERED as E}from"../../common/chatContextKeys.js";import{IViewsService as I}from"../../../../services/views/common/viewsService.js";import{ChatAgentLocation as O}from"../../common/chatAgents.js";import{isChatViewTitleActionContext as T}from"../../common/chatActions.js";const k="workbench.action.chat.newChat",G="workbench.action.chat.newEditSession";function ce(){h(class extends g{constructor(){super({id:"workbench.action.chatEditor.newChat",title:p("chat.newChat.label","New Chat"),icon:w.plus,f1:!1,precondition:u,menu:[{id:r.EditorTitle,group:"navigation",order:0,when:N.isEqualTo(W.EditorID)}]})}async run(e,...s){d(e.get(C)),await x(e)}}),h(class extends g{constructor(){super({id:k,title:p("chat.newChat.label","New Chat"),category:m,icon:w.plus,precondition:u,f1:!0,keybinding:{weight:V.WorkbenchContrib,primary:A.CtrlCmd|v.KeyL,mac:{primary:A.WinCtrl|v.KeyL},when:D},menu:[{id:r.ChatContext,group:"z_clear"},{id:r.ViewTitle,when:c.equals("view",S),group:"navigation",order:-1}]})}async run(e,...s){const o=s[0],n=e.get(C),l=e.get(y);if(T(o)){const t=l.getWidgetBySessionId(o.sessionId);d(n),t&&(t.clear(),t.focusInput())}else{const t=e.get(I);let i=l.lastFocusedWidget;i||(i=(await t.openView(S)).widget),d(n),i.clear(),i.focusInput()}}}),h(class extends g{constructor(){super({id:G,title:p("chat.newEdits.label","New Edit Session"),category:m,icon:w.plus,precondition:c.and(u,E),f1:!0,menu:[{id:r.ChatContext,group:"z_clear"},{id:r.ViewTitle,when:c.equals("view",f),group:"navigation",order:-1}]})}async run(e,...s){const o=s[0],n=e.get(C),l=e.get(y);if(T(o)){d(n);const t=l.getWidgetBySessionId(o.sessionId);t&&(t.clear(),t.attachmentModel.clear(),t.focusInput())}else{const t=e.get(I);let i=l.lastFocusedWidget;(!i||i.location!==O.EditingSession)&&(i=(await t.openView(f)).widget),d(n),i.clear(),i.attachmentModel.clear(),i.focusInput()}}}),h(class extends g{constructor(){super({id:"workbench.action.chat.openEditSession",title:p("chat.openEdits.label","Open Edit Session"),category:m,icon:w.edit,precondition:c.and(u,E),f1:!0,menu:[{id:r.ViewTitle,when:c.and(c.equals("view",S),E),group:"navigation",order:1}]})}async run(e,...s){(await e.get(I).openView(f)).widget.focusInput()}})}function d(a){a.playSignal(b.clear)}export{k as ACTION_ID_NEW_CHAT,G as ACTION_ID_NEW_EDIT_SESSION,ce as registerNewChatActions};
