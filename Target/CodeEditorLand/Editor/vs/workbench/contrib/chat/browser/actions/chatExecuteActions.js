import{Codicon as O}from"../../../../../base/common/codicons.js";import{KeyCode as u,KeyMod as s}from"../../../../../base/common/keyCodes.js";import{URI as L}from"../../../../../base/common/uri.js";import"../../../../../editor/browser/editorExtensions.js";import{localize as y,localize2 as l}from"../../../../../nls.js";import{Action2 as m,MenuId as g,MenuRegistry as V,registerAction2 as S}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as e}from"../../../../../platform/contextkey/common/contextkey.js";import{IDialogService as X}from"../../../../../platform/dialogs/common/dialogs.js";import{KeybindingWeight as f}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{IViewsService as F}from"../../../../services/views/common/viewsService.js";import{ChatAgentLocation as r,IChatAgentService as W}from"../../common/chatAgents.js";import{CONTEXT_CHAT_EDITING_PARTICIPANT_REGISTERED as D,CONTEXT_CHAT_ENABLED as H,CONTEXT_CHAT_HAS_FILE_ATTACHMENTS as U,CONTEXT_CHAT_INPUT_HAS_AGENT as P,CONTEXT_CHAT_INPUT_HAS_TEXT as T,CONTEXT_CHAT_LOCATION as a,CONTEXT_CHAT_REQUEST_IN_PROGRESS as p,CONTEXT_IN_CHAT_INPUT as x,CONTEXT_LANGUAGE_MODELS_ARE_USER_SELECTABLE as G}from"../../common/chatContextKeys.js";import{applyingChatEditsContextKey as v,IChatEditingService as R}from"../../common/chatEditingService.js";import{chatAgentLeader as B,extractAgentAndCommand as K}from"../../common/chatParserTypes.js";import{IChatService as z}from"../../common/chatService.js";import{EDITS_VIEW_ID as Y,IChatWidgetService as A}from"../chat.js";import"../chatViewPane.js";import{CHAT_CATEGORY as I}from"./chatActions.js";class _ extends m{static ID="workbench.action.chat.submit";constructor(){super({id:_.ID,title:l("interactive.submit.label","Send"),f1:!1,category:I,icon:O.send,precondition:e.and(T,p.negate(),e.or(a.notEqualsTo(r.EditingSession),e.and(a.isEqualTo(r.EditingSession),v.toNegated()))),keybinding:{when:x,primary:u.Enter,weight:f.EditorContrib},menu:[{id:g.ChatExecuteSecondary,group:"group_1"},{id:g.ChatExecute,order:4,when:e.and(p.negate(),e.or(a.notEqualsTo(r.EditingSession),e.and(a.isEqualTo(r.EditingSession),v.toNegated()))),group:"navigation"}]})}run(n,...c){const i=c[0],d=n.get(A);(i?.widget??d.lastFocusedWidget)?.acceptInput(i?.inputValue)}}const $="workbench.action.chat.pickModel";V.appendMenuItem(g.ChatExecute,{command:{id:$,title:l("chat.pickModel.label","Pick Model")},order:3,group:"navigation",when:e.and(G,e.or(e.equals(a.key,"panel"),e.equals(a.key,r.EditingSession)))});class b extends m{static ID="workbench.action.chat.submitSecondaryAgent";constructor(){super({id:b.ID,title:l({key:"actions.chat.submitSecondaryAgent",comment:["Send input from the chat input box to the secondary agent"]},"Submit to Secondary Agent"),precondition:e.and(T,P.negate(),p.negate()),keybinding:{when:x,primary:s.CtrlCmd|u.Enter,weight:f.EditorContrib},menu:{id:g.ChatExecuteSecondary,group:"group_1"}})}run(n,...c){const i=c[0],t=n.get(W).getSecondaryAgent();if(!t)return;const C=n.get(A),o=i?.widget??C.lastFocusedWidget;o&&(K(o.parsedInput).agentPart?o.acceptInput():(o.lastSelectedAgent=t,o.acceptInputWithPrefix(`${B}${t.name}`)))}}class Q extends m{constructor(){super({id:"workbench.action.chat.sendToChatEditing",title:l("chat.sendToChatEditing.label","Send to Copilot Edits"),precondition:e.and(p.negate(),P.negate(),T,U),category:I,f1:!1,menu:{id:g.ChatExecuteSecondary,group:"group_1",order:3,when:e.and(H,D,a.notEqualsTo(r.EditingSession))},keybinding:{weight:f.WorkbenchContrib,primary:s.CtrlCmd|s.Alt|u.Enter,when:e.and(H,D,a.notEqualsTo(r.EditingSession))}})}async run(n,...c){if(!n.get(W).getDefaultAgent(r.EditingSession))return;const i=c[0],d=n.get(A),t=i?.widget??d.lastFocusedWidget;if(!t||t.viewModel?.model.initialLocation===r.EditingSession)return;const C=n.get(F),o=n.get(X),E=n.get(R),k=E.currentEditingSessionObs.get(),M=k?.entries.get().length;if(M){if(!(await o.confirm({title:y("chat.startEditing.confirmation.title","Start new editing session?"),message:y("chat.startEditing.confirmation.message","Starting a new editing session will end your current editing session and discard edits to {0} files. Do you wish to proceed?",M),type:"info",primaryButton:y("chat.startEditing.confirmation.primaryButton","Yes")})).confirmed)return;await k?.stop()}const{widget:w}=await C.openView(Y);for(const h of t.attachmentModel.attachments)h.isFile&&L.isUri(h.value)?await E.addFileToWorkingSet(h.value):w.attachmentModel.addContext(h);w.setInput(t.getInput()),t.setInput(""),t.attachmentModel.clear(),w.acceptInput(),w.focusInput()}}class j extends m{constructor(){super({id:"workbench.action.chat.sendToNewChat",title:l("chat.newChat.label","Send to New Chat"),precondition:e.and(p.negate(),T),category:I,f1:!1,menu:{id:g.ChatExecuteSecondary,group:"group_2"},keybinding:{weight:f.WorkbenchContrib,primary:s.CtrlCmd|s.Shift|u.Enter,when:x}})}async run(n,...c){const i=c[0],d=n.get(A),t=i?.widget??d.lastFocusedWidget;t&&(t.clear(),t.acceptInput(i?.inputValue))}}class N extends m{static ID="workbench.action.chat.cancel";constructor(){super({id:N.ID,title:l("interactive.cancel.label","Cancel"),f1:!1,category:I,icon:O.stopCircle,menu:{id:g.ChatExecute,when:e.or(p,e.and(a.isEqualTo(r.EditingSession),v)),order:4,group:"navigation"},keybinding:{weight:f.WorkbenchContrib,primary:s.CtrlCmd|u.Escape,win:{primary:s.Alt|u.Backspace}}})}run(n,...c){const i=c[0],d=n.get(A),t=i?.widget??d.lastFocusedWidget;if(!t)return;const C=n.get(z);t.viewModel&&C.cancelCurrentRequestForSession(t.viewModel.sessionId);const o=n.get(R),E=o.currentEditingSession;E&&E?.chatSessionId===t.viewModel?.sessionId&&o.currentAutoApplyOperation?.cancel()}}function ft(){S(_),S(N),S(j),S(b),S(Q)}export{N as CancelAction,$ as ChatModelPickerActionId,b as ChatSubmitSecondaryAgentAction,_ as SubmitAction,ft as registerChatExecuteActions};
