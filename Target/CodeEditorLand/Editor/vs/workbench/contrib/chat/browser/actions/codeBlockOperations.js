var O=Object.defineProperty;var W=Object.getOwnPropertyDescriptor;var h=(r,e,t,i)=>{for(var o=i>1?void 0:i?W(e,t):e,n=r.length-1,s;n>=0;n--)(s=r[n])&&(o=(i?s(e,t,o):s(o))||o);return i&&o&&O(e,t,o),o},d=(r,e)=>(t,i)=>e(t,i,r);import{coalesce as V}from"../../../../../base/common/arrays.js";import{AsyncIterableObject as q}from"../../../../../base/common/async.js";import{VSBuffer as z}from"../../../../../base/common/buffer.js";import{CancellationTokenSource as y}from"../../../../../base/common/cancellation.js";import{CharCode as k}from"../../../../../base/common/charCode.js";import{isCancellationError as _}from"../../../../../base/common/errors.js";import{isEqual as b}from"../../../../../base/common/resources.js";import*as j from"../../../../../base/common/strings.js";import{isCodeEditor as K,isDiffEditor as X}from"../../../../../editor/browser/editorBrowser.js";import{IBulkEditService as w,ResourceTextEdit as g}from"../../../../../editor/browser/services/bulkEditService.js";import{ICodeEditorService as A}from"../../../../../editor/browser/services/codeEditorService.js";import{Range as G}from"../../../../../editor/common/core/range.js";import"../../../../../editor/common/languages.js";import{ILanguageService as M}from"../../../../../editor/common/languages/language.js";import"../../../../../editor/common/model.js";import{ILanguageFeaturesService as H}from"../../../../../editor/common/services/languageFeatures.js";import{localize as v}from"../../../../../nls.js";import{IDialogService as x}from"../../../../../platform/dialogs/common/dialogs.js";import{IFileService as J}from"../../../../../platform/files/common/files.js";import{ILogService as Q}from"../../../../../platform/log/common/log.js";import{IProgressService as Y,ProgressLocation as Z}from"../../../../../platform/progress/common/progress.js";import{IEditorService as T}from"../../../../services/editor/common/editorService.js";import{ITextFileService as P}from"../../../../services/textfile/common/textfiles.js";import{InlineChatController as $}from"../../../inlineChat/browser/inlineChatController.js";import{insertCell as R}from"../../../notebook/browser/controller/cellOperations.js";import"../../../notebook/browser/notebookBrowser.js";import{CellKind as F,NOTEBOOK_EDITOR_ID as ee}from"../../../notebook/common/notebookCommon.js";import{getReferencesAsDocumentContext as te}from"../../common/chatCodeMapperService.js";import{IChatService as N}from"../../common/chatService.js";import{isRequestVM as ie,isResponseVM as C}from"../../common/chatViewModel.js";import"../codeBlockPart.js";let f=class{constructor(e,t,i,o,n,s,a){this.editorService=e;this.textFileService=t;this.bulkEditService=i;this.codeEditorService=o;this.chatService=n;this.languageService=s;this.dialogService=a}async run(e){const t=S(this.editorService);if(t)await this.handleTextEditor(t,e);else{const i=I(this.editorService);i?await this.handleNotebookEditor(i,e):this.notify(v("insertCodeBlock.noActiveEditor","To insert the code block, open a code editor or notebook editor and set the cursor at the location where to insert the code block."))}B(this.chatService,e,{kind:"insert",codeBlockIndex:e.codeBlockIndex,totalCharacters:e.code.length})}async handleNotebookEditor(e,t){if(e.isReadOnly)return this.notify(v("insertCodeBlock.readonlyNotebook","Cannot insert the code block to read-only notebook editor.")),!1;const i=e.getFocus(),o=Math.max(i.end-1,0);return R(this.languageService,e,o,F.Code,"below",t.code,!0),!0}async handleTextEditor(e,t){const i=e.getModel();if(L(i,this.textFileService))return this.notify(v("insertCodeBlock.readonly","Cannot insert the code block to read-only code editor.")),!1;const o=e.getSelection()??new G(i.getLineCount(),1,i.getLineCount(),1),n=se(t.code,i,o.startLineNumber),s=[new g(i.uri,{range:o,text:n})];return await this.bulkEditService.apply(s),this.codeEditorService.listCodeEditors().find(a=>a.getModel()?.uri.toString()===i.uri.toString())?.focus(),!0}notify(e){this.dialogService.info(e)}};f=h([d(0,T),d(1,P),d(2,w),d(3,A),d(4,N),d(5,M),d(6,x)],f);let m=class{constructor(e,t,i,o,n,s,a,l,c,u,p){this.editorService=e;this.textFileService=t;this.bulkEditService=i;this.codeEditorService=o;this.chatService=n;this.languageFeaturesService=s;this.progressService=a;this.languageService=l;this.fileService=c;this.dialogService=u;this.logService=p}inlineChatPreview;async run(e){if(this.inlineChatPreview&&this.inlineChatPreview.isOpen()){await this.dialogService.info(v("overlap","Another code change is being previewed. Please apply or discard the pending changes first."));return}let t=S(this.editorService);if(e.codemapperUri&&!b(t?.getModel().uri,e.codemapperUri))try{await this.fileService.exists(e.codemapperUri)||await this.fileService.writeFile(e.codemapperUri,z.fromString("")),await this.editorService.openEditor({resource:e.codemapperUri}),t=S(this.editorService),t&&this.tryToRevealCodeBlock(t,e.code)}catch(o){this.logService.info("[ApplyCodeBlockOperation] error opening code mapper file",e.codemapperUri,o)}let i;if(t)await this.handleTextEditor(t,e);else{const o=I(this.editorService);o?i=await this.handleNotebookEditor(o,e):this.notify(v("applyCodeBlock.noActiveEditor","To apply this code block, open a code or notebook editor."))}B(this.chatService,e,{kind:"apply",codeBlockIndex:e.codeBlockIndex,totalCharacters:e.code.length,codeMapper:i?.codeMapper,editsProposed:!!i?.edits})}async handleNotebookEditor(e,t){if(e.isReadOnly){this.notify(v("applyCodeBlock.readonlyNotebook","Cannot apply code block to read-only notebook editor."));return}const i=e.getFocus(),o=Math.max(i.end-1,0);R(this.languageService,e,o,F.Code,"below",t.code,!0)}async handleTextEditor(e,t){if(L(e.getModel(),this.textFileService)){this.notify(v("applyCodeBlock.readonly","Cannot apply code block to read-only file."));return}const i=await this.computeEdits(e,t);if(i.edits&&!await this.applyWithInlinePreview(i.edits,e)){await this.bulkEditService.apply(i.edits,{showPreview:!0});const n=e.getModel();this.codeEditorService.listCodeEditors().find(s=>s.getModel()?.uri.toString()===n.uri.toString())?.focus()}return i}async computeEdits(e,t){const i=e.getModel(),o=this.languageFeaturesService.mappedEditsProvider.ordered(i);if(o.length>0){const n=[];oe(e,n),re(t,n);const s=new y;let a;try{const l=await this.progressService.withProgress({location:Z.Notification,delay:500,sticky:!0,cancellable:!0},async c=>{for(const u of o){a=u.displayName,c.report({message:v("applyCodeBlock.progress","Applying code block using {0}...",a)});const p=await u.provideMappedEdits(i,[t.code],{documents:n,conversation:ne(t)},s.token);if(p)return{edits:p.edits,codeMapper:a}}},()=>s.cancel());if(l)return l}catch(l){_(l)||this.notify(v("applyCodeBlock.error","Failed to apply code block: {0}",l.message))}finally{s.dispose()}return{edits:[],codeMapper:a}}return{edits:[],codeMapper:void 0}}async applyWithInlinePreview(e,t){const i=e[0];if(!g.is(i))return!1;const o=i.resource,n=V(e.map(a=>g.is(a)&&b(o,a.resource)?a.textEdit:void 0));if(n.length!==e.length)return!1;const s=await this.codeEditorService.openCodeEditor({resource:o},t);if(s){const a=$.get(s);if(a){const l=new y;let c=!0;const u=n[0];s.revealLineInCenterIfOutsideViewport(u.range.startLineNumber);const p=a.reviewEdits(n[0].range,q.fromArray(n),l.token);return p.finally(()=>{c=!1,l.dispose()}),this.inlineChatPreview={promise:p,isOpen:()=>c,cancel:()=>l.cancel()},!0}}return!1}tryToRevealCodeBlock(e,t){const i=t.match(/(\S[^\n]*)\n/);if(i&&i[1].length>10){const o=e.getModel().findNextMatch(i[1],{lineNumber:1,column:1},!1,!1,null,!1);o&&e.revealRangeInCenter(o.range)}}notify(e){this.dialogService.info(e)}};m=h([d(0,T),d(1,P),d(2,w),d(3,A),d(4,N),d(5,H),d(6,Y),d(7,M),d(8,J),d(9,x),d(10,Q)],m);function B(r,e,t){C(e.element)&&r.notifyUserAction({agentId:e.element.agent?.id,command:e.element.slashCommand?.name,sessionId:e.element.sessionId,requestId:e.element.requestId,result:e.element.result,action:t})}function I(r){const e=r.activeEditorPane;if(e?.getId()===ee){const t=e.getControl();if(t.hasModel())return t}}function S(r){const e=I(r)?.activeCodeEditor;if(e&&e.hasTextFocus()&&e.hasModel())return e;let t=r.activeTextEditorControl;if(X(t)&&(t=t.getOriginalEditor().hasTextFocus()?t.getOriginalEditor():t.getModifiedEditor()),!!K(t)&&t.hasModel())return t}function L(r,e){return!!(e.files.get(r.uri)??e.untitled.get(r.uri))?.isReadonly()}function oe(r,e){const t=r.getModel(),i=t.uri,o=t.getVersionId(),n=r.getSelections();n.length>0&&e.push([{uri:i,version:o,ranges:n}])}function re(r,e){C(r.element)&&r.element.usedContext?.documents&&e.push(r.element.usedContext.documents)}function ne(r){return C(r.element)?[{type:"response",message:r.element.response.getMarkdown(),references:te(r.element.contentReferences)}]:ie(r.element)?[{type:"request",message:r.element.messageText}]:[]}function se(r,e,t){const i=j.splitLines(r);if(i.length===0)return r;const o=e.getFormattingOptions(),n=D(e.getLineContent(t),o.tabSize).level,s=i.map(c=>D(c,o.tabSize)),a=s.reduce((c,u,p)=>u.length!==i[p].length?Math.min(u.level,c):c,Number.MAX_VALUE);if(a===Number.MAX_VALUE||a===n)return r;const l=[];for(let c=0;c<i.length;c++){const{level:u,length:p}=s[c],E=Math.max(0,n+u-a),U=o.insertSpaces?" ".repeat(o.tabSize*E):"	".repeat(E);l.push(U+i[c].substring(p))}return l.join(`
`)}function D(r,e){let t=0,i=0,o=0,n=0;const s=r.length;for(;o<s;){const a=r.charCodeAt(o);if(a===k.Space)t++,t===e&&(i++,t=0,n=o+1);else if(a===k.Tab)i++,t=0,n=o+1;else break;o++}return{level:i,length:n}}export{m as ApplyCodeBlockOperation,f as InsertCodeBlockOperation,D as computeIndentation};
