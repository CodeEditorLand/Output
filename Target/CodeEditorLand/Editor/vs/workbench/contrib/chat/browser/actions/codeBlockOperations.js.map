{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/actions/codeBlockOperations.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { coalesce } from '../../../../../base/common/arrays.js';\nimport { AsyncIterableObject } from '../../../../../base/common/async.js';\nimport { VSBuffer } from '../../../../../base/common/buffer.js';\nimport { CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport { CharCode } from '../../../../../base/common/charCode.js';\nimport { isCancellationError } from '../../../../../base/common/errors.js';\nimport { isEqual } from '../../../../../base/common/resources.js';\nimport * as strings from '../../../../../base/common/strings.js';\nimport { IActiveCodeEditor, isCodeEditor, isDiffEditor } from '../../../../../editor/browser/editorBrowser.js';\nimport { IBulkEditService, ResourceTextEdit } from '../../../../../editor/browser/services/bulkEditService.js';\nimport { ICodeEditorService } from '../../../../../editor/browser/services/codeEditorService.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { ConversationRequest, ConversationResponse, DocumentContextItem, IWorkspaceFileEdit, IWorkspaceTextEdit } from '../../../../../editor/common/languages.js';\nimport { ILanguageService } from '../../../../../editor/common/languages/language.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { ILanguageFeaturesService } from '../../../../../editor/common/services/languageFeatures.js';\nimport { localize } from '../../../../../nls.js';\nimport { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\nimport { IFileService } from '../../../../../platform/files/common/files.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { IProgressService, ProgressLocation } from '../../../../../platform/progress/common/progress.js';\nimport { IEditorService } from '../../../../services/editor/common/editorService.js';\nimport { ITextFileService } from '../../../../services/textfile/common/textfiles.js';\nimport { InlineChatController } from '../../../inlineChat/browser/inlineChatController.js';\nimport { insertCell } from '../../../notebook/browser/controller/cellOperations.js';\nimport { IActiveNotebookEditor, INotebookEditor } from '../../../notebook/browser/notebookBrowser.js';\nimport { CellKind, NOTEBOOK_EDITOR_ID } from '../../../notebook/common/notebookCommon.js';\nimport { getReferencesAsDocumentContext } from '../../common/chatCodeMapperService.js';\nimport { ChatUserAction, IChatService } from '../../common/chatService.js';\nimport { isRequestVM, isResponseVM } from '../../common/chatViewModel.js';\nimport { ICodeBlockActionContext } from '../codeBlockPart.js';\n\nexport class InsertCodeBlockOperation {\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t) {\n\t}\n\n\tpublic async run(context: ICodeBlockActionContext) {\n\t\tconst activeEditorControl = getEditableActiveCodeEditor(this.editorService);\n\t\tif (activeEditorControl) {\n\t\t\tawait this.handleTextEditor(activeEditorControl, context);\n\t\t} else {\n\t\t\tconst activeNotebookEditor = getActiveNotebookEditor(this.editorService);\n\t\t\tif (activeNotebookEditor) {\n\t\t\t\tawait this.handleNotebookEditor(activeNotebookEditor, context);\n\t\t\t} else {\n\t\t\t\tthis.notify(localize('insertCodeBlock.noActiveEditor', \"To insert the code block, open a code editor or notebook editor and set the cursor at the location where to insert the code block.\"));\n\t\t\t}\n\t\t}\n\t\tnotifyUserAction(this.chatService, context, {\n\t\t\tkind: 'insert',\n\t\t\tcodeBlockIndex: context.codeBlockIndex,\n\t\t\ttotalCharacters: context.code.length\n\t\t});\n\t}\n\n\tprivate async handleNotebookEditor(notebookEditor: IActiveNotebookEditor, codeBlockContext: ICodeBlockActionContext): Promise<boolean> {\n\t\tif (notebookEditor.isReadOnly) {\n\t\t\tthis.notify(localize('insertCodeBlock.readonlyNotebook', \"Cannot insert the code block to read-only notebook editor.\"));\n\t\t\treturn false;\n\t\t}\n\t\tconst focusRange = notebookEditor.getFocus();\n\t\tconst next = Math.max(focusRange.end - 1, 0);\n\t\tinsertCell(this.languageService, notebookEditor, next, CellKind.Code, 'below', codeBlockContext.code, true);\n\t\treturn true;\n\t}\n\n\tprivate async handleTextEditor(codeEditor: IActiveCodeEditor, codeBlockContext: ICodeBlockActionContext): Promise<boolean> {\n\t\tconst activeModel = codeEditor.getModel();\n\t\tif (isReadOnly(activeModel, this.textFileService)) {\n\t\t\tthis.notify(localize('insertCodeBlock.readonly', \"Cannot insert the code block to read-only code editor.\"));\n\t\t\treturn false;\n\t\t}\n\n\t\tconst range = codeEditor.getSelection() ?? new Range(activeModel.getLineCount(), 1, activeModel.getLineCount(), 1);\n\t\tconst text = reindent(codeBlockContext.code, activeModel, range.startLineNumber);\n\n\t\tconst edits = [new ResourceTextEdit(activeModel.uri, { range, text })];\n\t\tawait this.bulkEditService.apply(edits);\n\t\tthis.codeEditorService.listCodeEditors().find(editor => editor.getModel()?.uri.toString() === activeModel.uri.toString())?.focus();\n\t\treturn true;\n\t}\n\n\tprivate notify(message: string) {\n\t\t//this.notificationService.notify({ severity: Severity.Info, message });\n\t\tthis.dialogService.info(message);\n\t}\n}\n\ntype IComputeEditsResult = { readonly edits?: Array<IWorkspaceTextEdit | IWorkspaceFileEdit>; readonly codeMapper?: string };\n\nexport class ApplyCodeBlockOperation {\n\n\tprivate inlineChatPreview: InlineChatPreview | undefined;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IBulkEditService private readonly bulkEditService: IBulkEditService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tpublic async run(context: ICodeBlockActionContext): Promise<void> {\n\t\tif (this.inlineChatPreview && this.inlineChatPreview.isOpen()) {\n\t\t\tawait this.dialogService.info(\n\t\t\t\tlocalize('overlap', \"Another code change is being previewed. Please apply or discard the pending changes first.\"),\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tlet activeEditorControl = getEditableActiveCodeEditor(this.editorService);\n\n\t\tif (context.codemapperUri && !isEqual(activeEditorControl?.getModel().uri, context.codemapperUri)) {\n\t\t\t// If the code block is from a code mapper, first reveal the target file\n\t\t\ttry {\n\t\t\t\t// If the file doesn't exist yet, create it\n\t\t\t\tif (!(await this.fileService.exists(context.codemapperUri))) {\n\t\t\t\t\t// TODO: try to find the file in the workspace\n\n\t\t\t\t\tawait this.fileService.writeFile(context.codemapperUri, VSBuffer.fromString(''));\n\t\t\t\t}\n\t\t\t\tawait this.editorService.openEditor({ resource: context.codemapperUri });\n\n\t\t\t\tactiveEditorControl = getEditableActiveCodeEditor(this.editorService);\n\t\t\t\tif (activeEditorControl) {\n\t\t\t\t\tthis.tryToRevealCodeBlock(activeEditorControl, context.code);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.info('[ApplyCodeBlockOperation] error opening code mapper file', context.codemapperUri, e);\n\t\t\t}\n\t\t}\n\n\t\tlet result: IComputeEditsResult | undefined = undefined;\n\n\t\tif (activeEditorControl) {\n\t\t\tawait this.handleTextEditor(activeEditorControl, context);\n\t\t} else {\n\t\t\tconst activeNotebookEditor = getActiveNotebookEditor(this.editorService);\n\t\t\tif (activeNotebookEditor) {\n\t\t\t\tresult = await this.handleNotebookEditor(activeNotebookEditor, context);\n\t\t\t} else {\n\t\t\t\tthis.notify(localize('applyCodeBlock.noActiveEditor', \"To apply this code block, open a code or notebook editor.\"));\n\t\t\t}\n\t\t}\n\t\tnotifyUserAction(this.chatService, context, {\n\t\t\tkind: 'apply',\n\t\t\tcodeBlockIndex: context.codeBlockIndex,\n\t\t\ttotalCharacters: context.code.length,\n\t\t\tcodeMapper: result?.codeMapper,\n\t\t\teditsProposed: !!result?.edits,\n\t\t});\n\t}\n\n\tprivate async handleNotebookEditor(notebookEditor: IActiveNotebookEditor, codeBlockContext: ICodeBlockActionContext): Promise<IComputeEditsResult | undefined> {\n\t\tif (notebookEditor.isReadOnly) {\n\t\t\tthis.notify(localize('applyCodeBlock.readonlyNotebook', \"Cannot apply code block to read-only notebook editor.\"));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst focusRange = notebookEditor.getFocus();\n\t\tconst next = Math.max(focusRange.end - 1, 0);\n\t\tinsertCell(this.languageService, notebookEditor, next, CellKind.Code, 'below', codeBlockContext.code, true);\n\t\treturn undefined;\n\t}\n\n\tprivate async handleTextEditor(codeEditor: IActiveCodeEditor, codeBlockContext: ICodeBlockActionContext): Promise<IComputeEditsResult | undefined> {\n\t\tif (isReadOnly(codeEditor.getModel(), this.textFileService)) {\n\t\t\tthis.notify(localize('applyCodeBlock.readonly', \"Cannot apply code block to read-only file.\"));\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result = await this.computeEdits(codeEditor, codeBlockContext);\n\t\tif (result.edits) {\n\t\t\tconst showWithPreview = await this.applyWithInlinePreview(result.edits, codeEditor);\n\t\t\tif (!showWithPreview) {\n\t\t\t\tawait this.bulkEditService.apply(result.edits, { showPreview: true });\n\t\t\t\tconst activeModel = codeEditor.getModel();\n\t\t\t\tthis.codeEditorService.listCodeEditors().find(editor => editor.getModel()?.uri.toString() === activeModel.uri.toString())?.focus();\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async computeEdits(codeEditor: IActiveCodeEditor, codeBlockActionContext: ICodeBlockActionContext): Promise<IComputeEditsResult> {\n\t\tconst activeModel = codeEditor.getModel();\n\n\t\tconst mappedEditsProviders = this.languageFeaturesService.mappedEditsProvider.ordered(activeModel);\n\t\tif (mappedEditsProviders.length > 0) {\n\n\t\t\t// 0th sub-array - editor selections array if there are any selections\n\t\t\t// 1st sub-array - array with documents used to get the chat reply\n\t\t\tconst docRefs: DocumentContextItem[][] = [];\n\t\t\tcollectDocumentContextFromSelections(codeEditor, docRefs);\n\t\t\tcollectDocumentContextFromContext(codeBlockActionContext, docRefs);\n\n\t\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\t\tlet codeMapper; // the last used code mapper\n\t\t\ttry {\n\t\t\t\tconst result = await this.progressService.withProgress<IComputeEditsResult | undefined>(\n\t\t\t\t\t{ location: ProgressLocation.Notification, delay: 500, sticky: true, cancellable: true },\n\t\t\t\t\tasync progress => {\n\t\t\t\t\t\tfor (const provider of mappedEditsProviders) {\n\t\t\t\t\t\t\tcodeMapper = provider.displayName;\n\t\t\t\t\t\t\tprogress.report({ message: localize('applyCodeBlock.progress', \"Applying code block using {0}...\", codeMapper) });\n\t\t\t\t\t\t\tconst mappedEdits = await provider.provideMappedEdits(\n\t\t\t\t\t\t\t\tactiveModel,\n\t\t\t\t\t\t\t\t[codeBlockActionContext.code],\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdocuments: docRefs,\n\t\t\t\t\t\t\t\t\tconversation: getChatConversation(codeBlockActionContext),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcancellationTokenSource.token\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (mappedEdits) {\n\t\t\t\t\t\t\t\treturn { edits: mappedEdits.edits, codeMapper };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t},\n\t\t\t\t\t() => cancellationTokenSource.cancel()\n\t\t\t\t);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\tthis.notify(localize('applyCodeBlock.error', \"Failed to apply code block: {0}\", e.message));\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tcancellationTokenSource.dispose();\n\t\t\t}\n\t\t\treturn { edits: [], codeMapper };\n\t\t}\n\t\treturn { edits: [], codeMapper: undefined };\n\t}\n\n\tprivate async applyWithInlinePreview(edits: Array<IWorkspaceTextEdit | IWorkspaceFileEdit>, codeEditor: IActiveCodeEditor): Promise<boolean> {\n\t\tconst firstEdit = edits[0];\n\t\tif (!ResourceTextEdit.is(firstEdit)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst resource = firstEdit.resource;\n\t\tconst textEdits = coalesce(edits.map(edit => ResourceTextEdit.is(edit) && isEqual(resource, edit.resource) ? edit.textEdit : undefined));\n\t\tif (textEdits.length !== edits.length) { // more than one file has changed, fall back to bulk edit preview\n\t\t\treturn false;\n\t\t}\n\t\tconst editorToApply = await this.codeEditorService.openCodeEditor({ resource }, codeEditor);\n\t\tif (editorToApply) {\n\t\t\tconst inlineChatController = InlineChatController.get(editorToApply);\n\t\t\tif (inlineChatController) {\n\t\t\t\tconst tokenSource = new CancellationTokenSource();\n\t\t\t\tlet isOpen = true;\n\t\t\t\tconst firstEdit = textEdits[0];\n\t\t\t\teditorToApply.revealLineInCenterIfOutsideViewport(firstEdit.range.startLineNumber);\n\t\t\t\tconst promise = inlineChatController.reviewEdits(textEdits[0].range, AsyncIterableObject.fromArray(textEdits), tokenSource.token);\n\t\t\t\tpromise.finally(() => {\n\t\t\t\t\tisOpen = false;\n\t\t\t\t\ttokenSource.dispose();\n\t\t\t\t});\n\t\t\t\tthis.inlineChatPreview = {\n\t\t\t\t\tpromise,\n\t\t\t\t\tisOpen: () => isOpen,\n\t\t\t\t\tcancel: () => tokenSource.cancel(),\n\t\t\t\t};\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate tryToRevealCodeBlock(codeEditor: IActiveCodeEditor, codeBlock: string): void {\n\t\tconst match = codeBlock.match(/(\\S[^\\n]*)\\n/); // substring that starts with a non-whitespace character and ends with a newline\n\t\tif (match && match[1].length > 10) {\n\t\t\tconst findMatch = codeEditor.getModel().findNextMatch(match[1], { lineNumber: 1, column: 1 }, false, false, null, false);\n\t\t\tif (findMatch) {\n\t\t\t\tcodeEditor.revealRangeInCenter(findMatch.range);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate notify(message: string) {\n\t\t//this.notificationService.notify({ severity: Severity.Info, message });\n\t\tthis.dialogService.info(message);\n\t}\n\n}\n\ntype InlineChatPreview = {\n\tisOpen(): boolean;\n\tcancel(): void;\n\treadonly promise: Promise<boolean>;\n};\n\nfunction notifyUserAction(chatService: IChatService, context: ICodeBlockActionContext, action: ChatUserAction) {\n\tif (isResponseVM(context.element)) {\n\t\tchatService.notifyUserAction({\n\t\t\tagentId: context.element.agent?.id,\n\t\t\tcommand: context.element.slashCommand?.name,\n\t\t\tsessionId: context.element.sessionId,\n\t\t\trequestId: context.element.requestId,\n\t\t\tresult: context.element.result,\n\t\t\taction\n\t\t});\n\t}\n}\n\nfunction getActiveNotebookEditor(editorService: IEditorService): IActiveNotebookEditor | undefined {\n\tconst activeEditorPane = editorService.activeEditorPane;\n\tif (activeEditorPane?.getId() === NOTEBOOK_EDITOR_ID) {\n\t\tconst notebookEditor = activeEditorPane.getControl() as INotebookEditor;\n\t\tif (notebookEditor.hasModel()) {\n\t\t\treturn notebookEditor;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nfunction getEditableActiveCodeEditor(editorService: IEditorService): IActiveCodeEditor | undefined {\n\tconst activeCodeEditorInNotebook = getActiveNotebookEditor(editorService)?.activeCodeEditor;\n\tif (activeCodeEditorInNotebook && activeCodeEditorInNotebook.hasTextFocus() && activeCodeEditorInNotebook.hasModel()) {\n\t\treturn activeCodeEditorInNotebook;\n\t}\n\n\tlet activeEditorControl = editorService.activeTextEditorControl;\n\tif (isDiffEditor(activeEditorControl)) {\n\t\tactiveEditorControl = activeEditorControl.getOriginalEditor().hasTextFocus() ? activeEditorControl.getOriginalEditor() : activeEditorControl.getModifiedEditor();\n\t}\n\n\tif (!isCodeEditor(activeEditorControl)) {\n\t\treturn undefined;\n\t}\n\n\tif (!activeEditorControl.hasModel()) {\n\t\treturn undefined;\n\t}\n\treturn activeEditorControl;\n}\n\nfunction isReadOnly(model: ITextModel, textFileService: ITextFileService): boolean {\n\t// Check if model is editable, currently only support untitled and text file\n\tconst activeTextModel = textFileService.files.get(model.uri) ?? textFileService.untitled.get(model.uri);\n\treturn !!activeTextModel?.isReadonly();\n}\n\nfunction collectDocumentContextFromSelections(codeEditor: IActiveCodeEditor, result: DocumentContextItem[][]): void {\n\tconst activeModel = codeEditor.getModel();\n\tconst currentDocUri = activeModel.uri;\n\tconst currentDocVersion = activeModel.getVersionId();\n\tconst selections = codeEditor.getSelections();\n\tif (selections.length > 0) {\n\t\tresult.push([\n\t\t\t{\n\t\t\t\turi: currentDocUri,\n\t\t\t\tversion: currentDocVersion,\n\t\t\t\tranges: selections,\n\t\t\t}\n\t\t]);\n\t}\n}\n\n\nfunction collectDocumentContextFromContext(context: ICodeBlockActionContext, result: DocumentContextItem[][]): void {\n\tif (isResponseVM(context.element) && context.element.usedContext?.documents) {\n\t\tresult.push(context.element.usedContext.documents);\n\t}\n}\n\nfunction getChatConversation(context: ICodeBlockActionContext): (ConversationRequest | ConversationResponse)[] {\n\t// TODO@aeschli for now create a conversation with just the current element\n\t// this will be expanded in the future to include the request and any other responses\n\n\tif (isResponseVM(context.element)) {\n\t\treturn [{\n\t\t\ttype: 'response',\n\t\t\tmessage: context.element.response.getMarkdown(),\n\t\t\treferences: getReferencesAsDocumentContext(context.element.contentReferences)\n\t\t}];\n\t} else if (isRequestVM(context.element)) {\n\t\treturn [{\n\t\t\ttype: 'request',\n\t\t\tmessage: context.element.messageText,\n\t\t}];\n\t} else {\n\t\treturn [];\n\t}\n}\n\nfunction reindent(codeBlockContent: string, model: ITextModel, seletionStartLine: number): string {\n\tconst newContent = strings.splitLines(codeBlockContent);\n\tif (newContent.length === 0) {\n\t\treturn codeBlockContent;\n\t}\n\n\tconst formattingOptions = model.getFormattingOptions();\n\tconst codeIndentLevel = computeIndentation(model.getLineContent(seletionStartLine), formattingOptions.tabSize).level;\n\n\tconst indents = newContent.map(line => computeIndentation(line, formattingOptions.tabSize));\n\n\t// find the smallest indent level in the code block\n\tconst newContentIndentLevel = indents.reduce<number>((min, indent, index) => {\n\t\tif (indent.length !== newContent[index].length) { // ignore empty lines\n\t\t\treturn Math.min(indent.level, min);\n\t\t}\n\t\treturn min;\n\t}, Number.MAX_VALUE);\n\n\tif (newContentIndentLevel === Number.MAX_VALUE || newContentIndentLevel === codeIndentLevel) {\n\t\t// all lines are empty or the indent is already correct\n\t\treturn codeBlockContent;\n\t}\n\tconst newLines = [];\n\tfor (let i = 0; i < newContent.length; i++) {\n\t\tconst { level, length } = indents[i];\n\t\tconst newLevel = Math.max(0, codeIndentLevel + level - newContentIndentLevel);\n\t\tconst newIndentation = formattingOptions.insertSpaces ? ' '.repeat(formattingOptions.tabSize * newLevel) : '\\t'.repeat(newLevel);\n\t\tnewLines.push(newIndentation + newContent[i].substring(length));\n\t}\n\treturn newLines.join('\\n');\n}\n\n/**\n * Returns:\n *  - level: the line's the ident level in tabs\n *  - length: the number of characters of the leading whitespace\n */\nexport function computeIndentation(line: string, tabSize: number): { level: number; length: number } {\n\tlet nSpaces = 0;\n\tlet level = 0;\n\tlet i = 0;\n\tlet length = 0;\n\tconst len = line.length;\n\twhile (i < len) {\n\t\tconst chCode = line.charCodeAt(i);\n\t\tif (chCode === CharCode.Space) {\n\t\t\tnSpaces++;\n\t\t\tif (nSpaces === tabSize) {\n\t\t\t\tlevel++;\n\t\t\t\tnSpaces = 0;\n\t\t\t\tlength = i + 1;\n\t\t\t}\n\t\t} else if (chCode === CharCode.Tab) {\n\t\t\tlevel++;\n\t\t\tnSpaces = 0;\n\t\t\tlength = i + 1;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn { level, length };\n}\n"],
  "mappings": "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",
  "names": ["firstEdit"]
}
