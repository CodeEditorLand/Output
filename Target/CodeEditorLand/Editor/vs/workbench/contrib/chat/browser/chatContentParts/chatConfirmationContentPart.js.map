{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatConfirmationContentPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IChatProgressRenderableResponseContent } from '../../common/chatModel.js';\nimport { IChatConfirmation, IChatSendRequestOptions, IChatService } from '../../common/chatService.js';\nimport { isResponseVM } from '../../common/chatViewModel.js';\nimport { IChatWidgetService } from '../chat.js';\nimport { ChatConfirmationWidget } from './chatConfirmationWidget.js';\nimport { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';\n\nexport class ChatConfirmationContentPart extends Disposable implements IChatContentPart {\n\tpublic readonly domNode: HTMLElement;\n\n\tprivate readonly _onDidChangeHeight = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeHeight = this._onDidChangeHeight.event;\n\n\tconstructor(\n\t\tconfirmation: IChatConfirmation,\n\t\tcontext: IChatContentPartRenderContext,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@IChatWidgetService chatWidgetService: IChatWidgetService,\n\t) {\n\t\tsuper();\n\n\t\tconst element = context.element;\n\t\tconst buttons = confirmation.buttons\n\t\t\t? confirmation.buttons.map(button => ({\n\t\t\t\tlabel: button,\n\t\t\t\tdata: confirmation.data\n\t\t\t}))\n\t\t\t: [\n\t\t\t\t{ label: localize('accept', \"Accept\"), data: confirmation.data },\n\t\t\t\t{ label: localize('dismiss', \"Dismiss\"), data: confirmation.data, isSecondary: true },\n\t\t\t];\n\t\tconst confirmationWidget = this._register(this.instantiationService.createInstance(ChatConfirmationWidget, confirmation.title, confirmation.message, buttons));\n\t\tconfirmationWidget.setShowButtons(!confirmation.isUsed);\n\n\t\tthis._register(confirmationWidget.onDidClick(async e => {\n\t\t\tif (isResponseVM(element)) {\n\t\t\t\tconst prompt = `${e.label}: \"${confirmation.title}\"`;\n\t\t\t\tconst options: IChatSendRequestOptions = e.isSecondary ?\n\t\t\t\t\t{ rejectedConfirmationData: [e.data] } :\n\t\t\t\t\t{ acceptedConfirmationData: [e.data] };\n\t\t\t\toptions.agentId = element.agent?.id;\n\t\t\t\toptions.slashCommand = element.slashCommand?.name;\n\t\t\t\toptions.confirmation = e.label;\n\t\t\t\toptions.userSelectedModelId = chatWidgetService.getWidgetBySessionId(element.sessionId)?.input.currentLanguageModel;\n\t\t\t\tif (await this.chatService.sendRequest(element.sessionId, prompt, options)) {\n\t\t\t\t\tconfirmation.isUsed = true;\n\t\t\t\t\tconfirmationWidget.setShowButtons(false);\n\t\t\t\t\tthis._onDidChangeHeight.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.domNode = confirmationWidget.domNode;\n\t}\n\n\thasSameContent(other: IChatProgressRenderableResponseContent): boolean {\n\t\t// No other change allowed for this content type\n\t\treturn other.kind === 'confirmation';\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,YAAY,mBAAmB;AACxC,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AACtC,SAAS,8CAA8C;AACvD,SAAS,mBAAmB,yBAAyB,oBAAoB;AACzE,SAAS,oBAAoB;AAC7B,SAAS,0BAA0B;AACnC,SAAS,8BAA8B;AACvC,SAAS,kBAAkB,qCAAqC;AAEzD,IAAM,8BAAN,cAA0C,WAAuC;AAAA,EAMvF,YACC,cACA,SACwC,sBACT,aACX,mBACnB;AACD,UAAM;AAJkC;AACT;AAK/B,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,aAAa,UAC1B,aAAa,QAAQ,IAAI,aAAW;AAAA,MACrC,OAAO;AAAA,MACP,MAAM,aAAa;AAAA,IACpB,EAAE,IACA;AAAA,MACD,EAAE,OAAO,SAAS,UAAU,QAAQ,GAAG,MAAM,aAAa,KAAK;AAAA,MAC/D,EAAE,OAAO,SAAS,WAAW,SAAS,GAAG,MAAM,aAAa,MAAM,aAAa,KAAK;AAAA,IACrF;AACD,UAAM,qBAAqB,KAAK,UAAU,KAAK,qBAAqB,eAAe,wBAAwB,aAAa,OAAO,aAAa,SAAS,OAAO,CAAC;AAC7J,uBAAmB,eAAe,CAAC,aAAa,MAAM;AAEtD,SAAK,UAAU,mBAAmB,WAAW,OAAM,MAAK;AACvD,UAAI,aAAa,OAAO,GAAG;AAC1B,cAAM,SAAS,GAAG,EAAE,KAAK,MAAM,aAAa,KAAK;AACjD,cAAM,UAAmC,EAAE,cAC1C,EAAE,0BAA0B,CAAC,EAAE,IAAI,EAAE,IACrC,EAAE,0BAA0B,CAAC,EAAE,IAAI,EAAE;AACtC,gBAAQ,UAAU,QAAQ,OAAO;AACjC,gBAAQ,eAAe,QAAQ,cAAc;AAC7C,gBAAQ,eAAe,EAAE;AACzB,gBAAQ,sBAAsB,kBAAkB,qBAAqB,QAAQ,SAAS,GAAG,MAAM;AAC/F,YAAI,MAAM,KAAK,YAAY,YAAY,QAAQ,WAAW,QAAQ,OAAO,GAAG;AAC3E,uBAAa,SAAS;AACtB,6BAAmB,eAAe,KAAK;AACvC,eAAK,mBAAmB,KAAK;AAAA,QAC9B;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAEF,SAAK,UAAU,mBAAmB;AAAA,EACnC;AAAA,EA/DD,OAgBwF;AAAA;AAAA;AAAA,EACvE;AAAA,EAEC,qBAAqB,KAAK,UAAU,IAAI,QAAc,CAAC;AAAA,EACxD,oBAAoB,KAAK,mBAAmB;AAAA,EA6C5D,eAAe,OAAwD;AAEtE,WAAO,MAAM,SAAS;AAAA,EACvB;AAAA,EAEA,cAAc,YAA+B;AAC5C,SAAK,UAAU,UAAU;AAAA,EAC1B;AACD;AAzDa,8BAAN;AAAA,EASJ;AAAA,EACA;AAAA,EACA;AAAA,GAXU;",
  "names": []
}
