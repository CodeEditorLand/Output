{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownAnchorService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, isActiveElement } from '../../../../../base/browser/dom.js';\nimport { Disposable, IDisposable, combinedDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { InlineAnchorWidget } from '../chatInlineAnchorWidget.js';\n\n\nexport const IChatMarkdownAnchorService = createDecorator<IChatMarkdownAnchorService>('chatMarkdownAnchorService');\n\nexport interface IChatMarkdownAnchorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the currently focused anchor if any\n\t */\n\treadonly lastFocusedAnchor: InlineAnchorWidget | undefined;\n\n\tregister(widget: InlineAnchorWidget): IDisposable;\n}\n\nexport class ChatMarkdownAnchorService extends Disposable implements IChatMarkdownAnchorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _widgets: InlineAnchorWidget[] = [];\n\tprivate _lastFocusedWidget: InlineAnchorWidget | undefined = undefined;\n\n\tget lastFocusedAnchor(): InlineAnchorWidget | undefined {\n\t\treturn this._lastFocusedWidget;\n\t}\n\n\tprivate setLastFocusedList(widget: InlineAnchorWidget | undefined): void {\n\t\tthis._lastFocusedWidget = widget;\n\t}\n\n\tregister(widget: InlineAnchorWidget): IDisposable {\n\t\tif (this._widgets.some(other => other === widget)) {\n\t\t\tthrow new Error('Cannot register the same widget multiple times');\n\t\t}\n\n\t\t// Keep in our lists list\n\t\tthis._widgets.push(widget);\n\n\t\tconst element = widget.getHTMLElement();\n\n\t\t// Check for currently being focused\n\t\tif (isActiveElement(element)) {\n\t\t\tthis.setLastFocusedList(widget);\n\t\t}\n\n\t\treturn combinedDisposable(\n\t\t\taddDisposableListener(element, 'focus', () => this.setLastFocusedList(widget)),\n\t\t\ttoDisposable(() => this._widgets.splice(this._widgets.indexOf(widget), 1)),\n\t\t\taddDisposableListener(element, 'blur', () => {\n\t\t\t\tif (this._lastFocusedWidget === widget) {\n\t\t\t\t\tthis.setLastFocusedList(undefined);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,uBAAuB,uBAAuB;AACvD,SAAS,YAAY,aAAa,oBAAoB,oBAAoB;AAC1E,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAG5B,MAAM,6BAA6B,gBAA4C,2BAA2B;AAc1G,MAAM,kCAAkC,WAAiD;AAAA,EAzBhG,OAyBgG;AAAA;AAAA;AAAA,EAIvF,WAAiC,CAAC;AAAA,EAClC,qBAAqD;AAAA,EAE7D,IAAI,oBAAoD;AACvD,WAAO,KAAK;AAAA,EACb;AAAA,EAEQ,mBAAmB,QAA8C;AACxE,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEA,SAAS,QAAyC;AACjD,QAAI,KAAK,SAAS,KAAK,WAAS,UAAU,MAAM,GAAG;AAClD,YAAM,IAAI,MAAM,gDAAgD;AAAA,IACjE;AAGA,SAAK,SAAS,KAAK,MAAM;AAEzB,UAAM,UAAU,OAAO,eAAe;AAGtC,QAAI,gBAAgB,OAAO,GAAG;AAC7B,WAAK,mBAAmB,MAAM;AAAA,IAC/B;AAEA,WAAO;AAAA,MACN,sBAAsB,SAAS,SAAS,MAAM,KAAK,mBAAmB,MAAM,CAAC;AAAA,MAC7E,aAAa,MAAM,KAAK,SAAS,OAAO,KAAK,SAAS,QAAQ,MAAM,GAAG,CAAC,CAAC;AAAA,MACzE,sBAAsB,SAAS,QAAQ,MAAM;AAC5C,YAAI,KAAK,uBAAuB,QAAQ;AACvC,eAAK,mBAAmB,MAAS;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;",
  "names": []
}
