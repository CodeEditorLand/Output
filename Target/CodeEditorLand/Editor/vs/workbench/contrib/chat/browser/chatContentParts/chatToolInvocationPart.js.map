{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatContentParts/chatToolInvocationPart.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../../base/browser/dom.js';\nimport { Codicon } from '../../../../../base/common/codicons.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { MarkdownRenderer } from '../../../../../editor/browser/widget/markdownRenderer/browser/markdownRenderer.js';\nimport { localize } from '../../../../../nls.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IChatProgressMessage, IChatToolInvocation, IChatToolInvocationSerialized } from '../../common/chatService.js';\nimport { IChatRendererContent } from '../../common/chatViewModel.js';\nimport { ChatTreeItem } from '../chat.js';\nimport { ChatConfirmationWidget } from './chatConfirmationWidget.js';\nimport { IChatContentPart, IChatContentPartRenderContext } from './chatContentParts.js';\nimport { ChatProgressContentPart } from './chatProgressContentPart.js';\n\nexport class ChatToolInvocationPart extends Disposable implements IChatContentPart {\n\tpublic readonly domNode: HTMLElement;\n\n\tprivate _onDidChangeHeight = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeHeight = this._onDidChangeHeight.event;\n\n\tconstructor(\n\t\ttoolInvocation: IChatToolInvocation | IChatToolInvocationSerialized,\n\t\tcontext: IChatContentPartRenderContext,\n\t\trenderer: MarkdownRenderer,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.domNode = dom.$('.chat-tool-invocation-part');\n\n\t\t// This part is a bit different, since IChatToolInvocation is not an immutable model object. So this part is able to rerender itself.\n\t\t// If this turns out to be a typical pattern, we could come up with a more reusable pattern, like telling the list to rerender an element\n\t\t// when the model changes, or trying to make the model immutable and swap out one content part for a new one based on user actions in the view.\n\t\tconst partStore = this._register(new DisposableStore());\n\t\tconst render = () => {\n\t\t\tdom.clearNode(this.domNode);\n\n\t\t\tconst subPart = partStore.add(instantiationService.createInstance(ChatToolInvocationSubPart, toolInvocation, context, renderer));\n\t\t\tthis.domNode.appendChild(subPart.domNode);\n\t\t\tpartStore.add(subPart.onNeedsRerender(() => {\n\t\t\t\trender();\n\t\t\t\tthis._onDidChangeHeight.fire();\n\t\t\t}));\n\t\t};\n\t\trender();\n\t}\n\n\thasSameContent(other: IChatRendererContent, followingContent: IChatRendererContent[], element: ChatTreeItem): boolean {\n\t\treturn other.kind === 'toolInvocation' || other.kind === 'toolInvocationSerialized';\n\t}\n\n\taddDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n\nclass ChatToolInvocationSubPart extends Disposable {\n\tpublic readonly domNode: HTMLElement;\n\n\tprivate _onNeedsRerender = this._register(new Emitter<void>());\n\tpublic readonly onNeedsRerender = this._onNeedsRerender.event;\n\n\tconstructor(\n\t\ttoolInvocation: IChatToolInvocation | IChatToolInvocationSerialized,\n\t\tcontext: IChatContentPartRenderContext,\n\t\trenderer: MarkdownRenderer,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tif (toolInvocation.kind === 'toolInvocation' && toolInvocation.confirmationMessages) {\n\t\t\tconst title = toolInvocation.confirmationMessages.title;\n\t\t\tconst message = toolInvocation.confirmationMessages.message;\n\t\t\tconst confirmWidget = this._register(instantiationService.createInstance(\n\t\t\t\tChatConfirmationWidget,\n\t\t\t\ttitle,\n\t\t\t\tmessage,\n\t\t\t\t[{ label: localize('continue', \"Continue\"), data: true }, { label: localize('cancel', \"Cancel\"), data: false, isSecondary: true }]));\n\t\t\tthis.domNode = confirmWidget.domNode;\n\t\t\tthis._register(confirmWidget.onDidClick(button => {\n\t\t\t\ttoolInvocation.confirmed.complete(button.data);\n\t\t\t}));\n\t\t\ttoolInvocation.confirmed.p.then(() => this._onNeedsRerender.fire());\n\t\t} else {\n\t\t\tconst message = toolInvocation.invocationMessage + '\u2026';\n\t\t\tconst progressMessage: IChatProgressMessage = {\n\t\t\t\tkind: 'progressMessage',\n\t\t\t\tcontent: { value: message }\n\t\t\t};\n\t\t\tconst iconOverride = toolInvocation.isConfirmed === false ?\n\t\t\t\tCodicon.error :\n\t\t\t\ttoolInvocation.isComplete ?\n\t\t\t\t\tCodicon.check : undefined;\n\t\t\tconst progressPart = this._register(instantiationService.createInstance(ChatProgressContentPart, progressMessage, renderer, context, undefined, true, iconOverride));\n\t\t\tthis.domNode = progressPart.domNode;\n\t\t}\n\n\t\tif (toolInvocation.kind === 'toolInvocation' && !toolInvocation.isComplete) {\n\t\t\ttoolInvocation.isCompleteDeferred.p.then(() => this._onNeedsRerender.fire());\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
