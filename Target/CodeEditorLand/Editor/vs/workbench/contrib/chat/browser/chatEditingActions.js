import{Codicon as E}from"../../../../base/common/codicons.js";import{KeyCode as L,KeyMod as K}from"../../../../base/common/keyCodes.js";import{ResourceSet as G}from"../../../../base/common/map.js";import{URI as I}from"../../../../base/common/uri.js";import"../../../../editor/browser/editorExtensions.js";import{localize as l,localize2 as g}from"../../../../nls.js";import{Action2 as m,MenuId as d,registerAction2 as u}from"../../../../platform/actions/common/actions.js";import{IConfigurationService as H}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as r}from"../../../../platform/contextkey/common/contextkey.js";import{IDialogService as V}from"../../../../platform/dialogs/common/dialogs.js";import{KeybindingWeight as X}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{IListService as j}from"../../../../platform/list/browser/listService.js";import{GroupsOrder as Y,IEditorGroupsService as z}from"../../../services/editor/common/editorGroupsService.js";import{IEditorService as Q}from"../../../services/editor/common/editorService.js";import{ChatAgentLocation as C}from"../common/chatAgents.js";import{CONTEXT_CHAT_LOCATION as x,CONTEXT_CHAT_REQUEST_IN_PROGRESS as J,CONTEXT_IN_CHAT_INPUT as Z,CONTEXT_IN_CHAT_SESSION as $,CONTEXT_REQUEST as ee,CONTEXT_RESPONSE as te}from"../common/chatContextKeys.js";import{applyingChatEditsContextKey as ie,CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME as T,chatEditingResourceContextKey as M,chatEditingWidgetFileStateContextKey as y,decidedChatEditingResourceContextKey as O,IChatEditingService as S,inChatEditingSessionContextKey as oe,isChatRequestCheckpointed as ne,WorkingSetEntryState as v}from"../common/chatEditingService.js";import{IChatService as _}from"../common/chatService.js";import{isRequestVM as re,isResponseVM as b}from"../common/chatViewModel.js";import{CHAT_CATEGORY as N}from"./actions/chatActions.js";import{IChatWidgetService as P}from"./chat.js";class A extends m{run(t,...s){const e=t.get(S).currentEditingSession;if(!e)return;const c=t.get(P).lastFocusedWidget;if(c?.location!==C.EditingSession)return;const n=[];if(I.isUri(s[0])?n.push(s[0]):c&&n.push(...c.input.selectedElements),!!n.length)return this.runWorkingSetAction(t,e,c,...n)}}u(class extends A{constructor(){super({id:"chatEditing.removeFileFromWorkingSet",title:g("removeFileFromWorkingSet","Remove File"),icon:E.close,menu:[{id:d.ChatEditingSessionWidgetToolbar,when:r.or(r.equals(y.key,v.Attached),r.equals(y.key,v.Transient)),order:0,group:"navigation"}]})}async runWorkingSetAction(t,s,i,...e){s.remove(...e);const c=new G(e),n=[];for(const o of i.input.attachmentModel.attachments)(!I.isUri(o.value)||!o.isFile||!c.has(o.value))&&n.push(o);i.attachmentModel.clearAndSetContext(...n)}}),u(class extends A{constructor(){super({id:"chatEditing.openFileInDiff",title:g("open.fileInDiff","Open Changes in Diff Editor"),icon:E.diffSingle,menu:[{id:d.ChatEditingSessionWidgetToolbar,when:r.equals(y.key,v.Modified),order:2,group:"navigation"}]})}async runWorkingSetAction(t,s,i,...e){const c=t.get(Q);for(const n of e){const o=s.entries.get().find(a=>a.modifiedURI.toString()===n.toString());o?.state.get()===v.Modified?await c.openEditor({original:{resource:I.from(o.originalURI,!0)},modified:{resource:I.from(o.modifiedURI,!0)}}):await c.openEditor({resource:n})}}}),u(class extends A{constructor(){super({id:"chatEditing.acceptFile",title:g("accept.file","Accept"),icon:E.check,menu:[{when:r.and(r.equals("resourceScheme",T),r.notIn(M.key,O.key)),id:d.MultiDiffEditorFileToolbar,order:0,group:"navigation"},{id:d.ChatEditingSessionWidgetToolbar,when:r.equals(y.key,v.Modified),order:0,group:"navigation"}]})}async runWorkingSetAction(t,s,i,...e){await s.accept(...e)}}),u(class extends A{constructor(){super({id:"chatEditing.discardFile",title:g("discard.file","Discard"),icon:E.discard,menu:[{when:r.and(r.equals("resourceScheme",T),r.notIn(M.key,O.key)),id:d.MultiDiffEditorFileToolbar,order:0,group:"navigation"},{id:d.ChatEditingSessionWidgetToolbar,when:r.equals(y.key,v.Modified),order:1,group:"navigation"}]})}async runWorkingSetAction(t,s,i,...e){await s.reject(...e)}});class W extends m{static ID="chatEditing.acceptAllFiles";static LABEL=l("accept.allFiles","Accept All");constructor(){super({id:W.ID,title:W.LABEL,menu:{when:r.equals("resourceScheme",T),id:d.EditorTitle,order:0,group:"navigation"}})}async run(t,...s){const e=t.get(S).currentEditingSession;e&&await e.accept()}}u(W);class R extends m{static ID="chatEditing.discardAllFiles";static LABEL=l("discard.allFiles","Discard All");constructor(){super({id:R.ID,title:R.LABEL,menu:{when:r.equals("resourceScheme",T),id:d.EditorTitle,order:0,group:"navigation"}})}async run(t,...s){const e=t.get(S).currentEditingSession;e&&await e.reject()}}u(R);class w extends m{static ID="chatEditing.openDiffs";static LABEL=l("chatEditing.openDiffs","Open Diffs");constructor(){super({id:w.ID,title:w.LABEL,f1:!1})}async run(t,...s){const e=t.get(S).currentEditingSession;e&&await e.show()}}u(w),u(class extends m{constructor(){super({id:"workbench.action.chat.addFilesToWorkingSet",title:g("workbench.action.chat.addFilesToWorkingSet.label","Add Files to Working Set"),icon:E.attach,category:N,precondition:oe,f1:!0})}async run(t,...s){const i=t.get(j),e=t.get(S),c=t.get(z),n=[];for(const o of c.getGroups(Y.MOST_RECENTLY_ACTIVE))for(const a of o.selectedEditors)a.resource&&n.push(a.resource);if(n.length===0){const o=i.lastFocusedList?.getSelection();if(o?.length)for(const a of o)a&&typeof a=="object"&&"resource"in a&&I.isUri(a.resource)&&n.push(a.resource)}for(const o of n)await e?.addFileToWorkingSet(o)}}),u(class extends m{constructor(){super({id:"workbench.action.chat.restoreWorkingSet",title:g("chat.restoreWorkingSet.label","Restore Working Set"),f1:!1,shortTitle:g("chat.restoreWorkingSet.shortTitle","Restore Working Set"),toggled:{condition:ne,title:g("chat.restoreWorkingSet.title","Using Working Set").value,tooltip:g("chat.restoreWorkingSet.tooltip","Toggle to use the working set state from an earlier request in your next edit").value},precondition:r.and(ie.negate(),J.negate()),menu:{id:d.ChatMessageFooter,group:"navigation",order:1e3,when:r.false()}})}run(t,...s){const i=t.get(S),e=s[0];if(!b(e))return;const{session:c,requestId:n}=e.model,o=n===c.checkpoint?.id;o?c.setCheckpoint(void 0):c.setCheckpoint(n);const f=t.get(_).getSession(e.sessionId)?.getRequests(),p=f?.find((k,F)=>F>0&&f[F-1]?.id===n);!o&&p!==void 0?i.restoreSnapshot(p.id):o&&i.restoreSnapshot(void 0)}}),u(class extends m{constructor(){super({id:"workbench.action.chat.undoEdits",title:g("chat.undoEdits.label","Undo Edits"),f1:!1,category:N,icon:E.discard,keybinding:{primary:L.Delete,mac:{primary:K.CtrlCmd|L.Backspace},when:r.and(x.isEqualTo(C.EditingSession),$,Z.negate()),weight:X.WorkbenchContrib},menu:[{id:d.ChatMessageFooter,group:"navigation",order:4,when:r.and(x.isEqualTo(C.EditingSession),te)},{id:d.ChatMessageTitle,group:"navigation",order:2,when:r.and(x.isEqualTo(C.EditingSession),ee)}]})}async run(t,...s){let i=s[0];if(b(i)||(i=t.get(P).lastFocusedWidget?.getFocus()),!i)return;const e=t.get(_),c=e.getSession(i.sessionId);if(c?.initialLocation!==C.EditingSession)return;const n=re(i)?i.id:b(i)?i.requestId:void 0;if(n){const o=t.get(H),a=t.get(V),D=t.get(S),f=c.getRequests(),p=f.findIndex(q=>q.id===n),k=f.length-p,U=o.getValue("chat.editing.confirmEditRequestRemoval")===!0?await a.confirm({title:k===1?l("chat.removeLast.confirmation.title","Do you want to undo your last edit?"):l("chat.remove.confirmation.title","Do you want to undo {0} edits?",k),message:k===1?l("chat.removeLast.confirmation.message","This will remove your last request and undo the edits it made to your working set."):l("chat.remove.confirmation.message","This will remove all subsequent requests and undo the edits they made to your working set."),primaryButton:l("chat.remove.confirmation.primaryButton","Yes"),checkbox:{label:l("chat.remove.confirmation.checkbox","Don't ask again"),checked:!1},type:"info"}):{confirmed:!0};if(!U.confirmed)return;U.checkboxChecked&&await o.updateValue("chat.editing.confirmEditRequestRemoval",!1);const B=f[p].id;await D.restoreSnapshot(B);for(const q of f.slice(p))await e.removeRequest(i.sessionId,q.id)}}});export{W as ChatEditingAcceptAllAction,R as ChatEditingDiscardAllAction,w as ChatEditingShowChangesAction};
