{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableSource, RunOnceScheduler, Sequencer, timeout } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, IReference } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap, ResourceSet } from '../../../../base/common/map.js';\nimport { autorun, derived, IObservable, ITransaction, observableValue, ValueWithChangeEventFromObservable } from '../../../../base/common/observable.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { themeColorFromId, ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { isCodeEditor, isDiffEditor } from '../../../../editor/browser/editorBrowser.js';\nimport { IBulkEditService } from '../../../../editor/browser/services/bulkEditService.js';\nimport { EditOperation } from '../../../../editor/common/core/editOperation.js';\nimport { LineRange } from '../../../../editor/common/core/lineRange.js';\nimport { Range } from '../../../../editor/common/core/range.js';\nimport { IDocumentDiff, nullDocumentDiff } from '../../../../editor/common/diff/documentDiffProvider.js';\nimport { TextEdit } from '../../../../editor/common/languages.js';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { IIdentifiedSingleEditOperation, IModelDeltaDecoration, ITextModel, OverviewRulerLane } from '../../../../editor/common/model.js';\nimport { SingleModelEditStackElement } from '../../../../editor/common/model/editStack.js';\nimport { createTextBufferFactoryFromSnapshot, ModelDecorationOptions } from '../../../../editor/common/model/textModel.js';\nimport { IEditorWorkerService } from '../../../../editor/common/services/editorWorker.js';\nimport { IModelService } from '../../../../editor/common/services/model.js';\nimport { IResolvedTextEditorModel, ITextModelContentProvider, ITextModelService } from '../../../../editor/common/services/resolverService.js';\nimport { IModelContentChangedEvent } from '../../../../editor/common/textModelEvents.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IFileDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { EditorActivation } from '../../../../platform/editor/common/editor.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { bindContextKey } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { IProgressService, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { editorSelectionBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IUndoRedoService } from '../../../../platform/undoRedo/common/undoRedo.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { IEditorCloseEvent } from '../../../common/editor.js';\nimport { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';\nimport { EditorInput } from '../../../common/editor/editorInput.js';\nimport { IDecorationData, IDecorationsProvider, IDecorationsService } from '../../../services/decorations/common/decorations.js';\nimport { IEditorGroup, IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { MultiDiffEditor } from '../../multiDiffEditor/browser/multiDiffEditor.js';\nimport { MultiDiffEditorInput } from '../../multiDiffEditor/browser/multiDiffEditorInput.js';\nimport { IMultiDiffSourceResolver, IMultiDiffSourceResolverService, IResolvedMultiDiffSource, MultiDiffEditorItem } from '../../multiDiffEditor/browser/multiDiffSourceResolverService.js';\nimport { ChatAgentLocation, IChatAgentResult, IChatAgentService } from '../common/chatAgents.js';\nimport { ICodeMapperResponse, ICodeMapperService } from '../common/chatCodeMapperService.js';\nimport { applyingChatEditsContextKey, CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME, chatEditingResourceContextKey, ChatEditingSessionState, decidedChatEditingResourceContextKey, IChatEditingService, IChatEditingSession, IChatEditingSessionStream, IModifiedFileEntry, inChatEditingSessionContextKey, WorkingSetEntryState } from '../common/chatEditingService.js';\nimport { IChatResponseModel, IChatTextEditGroup } from '../common/chatModel.js';\nimport { IChatService } from '../common/chatService.js';\nimport { IChatWidgetService } from './chat.js';\n\nexport class ChatEditingService extends Disposable implements IChatEditingService {\n\n\t_serviceBrand: undefined;\n\n\tprivate readonly _currentSessionObs = observableValue<ChatEditingSession | null>(this, null);\n\tprivate readonly _currentSessionDisposables = this._register(new DisposableStore());\n\n\tprivate readonly _currentAutoApplyOperationObs = observableValue<CancellationTokenSource | null>(this, null);\n\tget currentAutoApplyOperation(): CancellationTokenSource | null {\n\t\treturn this._currentAutoApplyOperationObs.get();\n\t}\n\n\tget currentEditingSession(): IChatEditingSession | null {\n\t\treturn this._currentSessionObs.get();\n\t}\n\n\tget currentEditingSessionObs(): IObservable<IChatEditingSession | null> {\n\t\treturn this._currentSessionObs;\n\t}\n\n\tprivate readonly _onDidCreateEditingSession = this._register(new Emitter<IChatEditingSession>());\n\tget onDidCreateEditingSession() {\n\t\treturn this._onDidCreateEditingSession.event;\n\t}\n\n\tprivate readonly _onDidChangeEditingSession = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeEditingSession = this._onDidChangeEditingSession.event;\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IMultiDiffSourceResolverService multiDiffSourceResolverService: IMultiDiffSourceResolverService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@ICodeMapperService private readonly _codeMapperService: ICodeMapperService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IDecorationsService decorationsService: IDecorationsService,\n\t) {\n\t\tsuper();\n\t\tthis._register(decorationsService.registerDecorationsProvider(new ChatDecorationsProvider(this._currentSessionObs)));\n\t\tthis._register(multiDiffSourceResolverService.registerResolver(_instantiationService.createInstance(ChatEditingMultiDiffSourceResolver, this._currentSessionObs)));\n\t\ttextModelService.registerTextModelContentProvider(ChatEditingTextModelContentProvider.scheme, _instantiationService.createInstance(ChatEditingTextModelContentProvider, this._currentSessionObs));\n\t\ttextModelService.registerTextModelContentProvider(ChatEditingSnapshotTextModelContentProvider.scheme, _instantiationService.createInstance(ChatEditingSnapshotTextModelContentProvider, this._currentSessionObs));\n\t\tthis._register(bindContextKey(decidedChatEditingResourceContextKey, contextKeyService, (reader) => {\n\t\t\tconst currentSession = this._currentSessionObs.read(reader);\n\t\t\tif (!currentSession) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst entries = currentSession.entries.read(reader);\n\t\t\tconst decidedEntries = entries.filter(entry => entry.state.read(reader) !== WorkingSetEntryState.Modified);\n\t\t\treturn decidedEntries.map(entry => entry.entryId);\n\t\t}));\n\t\tthis._register(bindContextKey(inChatEditingSessionContextKey, contextKeyService, (reader) => {\n\t\t\treturn this._currentSessionObs.read(reader) !== null;\n\t\t}));\n\t\tthis._register(bindContextKey(applyingChatEditsContextKey, contextKeyService, (reader) => {\n\t\t\treturn this._currentAutoApplyOperationObs.read(reader) !== null;\n\t\t}));\n\t\tthis._register(this._chatService.onDidDisposeSession((e) => {\n\t\t\tif (e.reason === 'cleared' && this._currentSessionObs.get()?.chatSessionId === e.sessionId) {\n\t\t\t\tvoid this._currentSessionObs.get()?.stop();\n\t\t\t}\n\t\t}));\n\t}\n\n\tgetSnapshotUri(id: string, uri: URI) {\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (!session) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn session.getSnapshot(id, uri)?.snapshotUri;\n\t}\n\n\tgetEditingSession(resource: URI): IChatEditingSession | null {\n\t\tconst session = this.currentEditingSession;\n\t\tif (!session) {\n\t\t\treturn null;\n\t\t}\n\t\tconst entries = session.entries.get();\n\t\tfor (const entry of entries) {\n\t\t\tif (entry.modifiedURI.toString() === resource.toString()) {\n\t\t\t\treturn session;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync addFileToWorkingSet(resource: URI): Promise<void> {\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (session) {\n\t\t\tsession.addFileToWorkingSet(resource);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis._currentSessionObs.get()?.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tasync startOrContinueEditingSession(chatSessionId: string, options?: { silent: boolean }): Promise<IChatEditingSession> {\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (session) {\n\t\t\tif (session.chatSessionId !== chatSessionId) {\n\t\t\t\tthrow new BugIndicatingError('Cannot start new session while another session is active');\n\t\t\t}\n\t\t}\n\t\treturn this._createEditingSession(chatSessionId, options);\n\t}\n\n\tprivate async _createEditingSession(chatSessionId: string, options?: { silent: boolean }): Promise<IChatEditingSession> {\n\t\tif (this._currentSessionObs.get()) {\n\t\t\tthrow new BugIndicatingError('Cannot have more than one active editing session');\n\t\t}\n\n\t\tthis._currentSessionDisposables.clear();\n\n\t\t// listen for completed responses, run the code mapper and apply the edits to this edit session\n\t\tthis._currentSessionDisposables.add(this.installAutoApplyObserver(chatSessionId));\n\n\t\tconst input = MultiDiffEditorInput.fromResourceMultiDiffEditorInput({\n\t\t\tmultiDiffSource: ChatEditingMultiDiffSourceResolver.getMultiDiffSourceUri(),\n\t\t\tlabel: localize('multiDiffEditorInput.name', \"Suggested Edits\")\n\t\t}, this._instantiationService);\n\n\t\tconst editorPane = options?.silent ? undefined : await this._editorGroupsService.activeGroup.openEditor(input, { pinned: true, activation: EditorActivation.ACTIVATE }) as MultiDiffEditor | undefined;\n\n\t\tconst session = this._instantiationService.createInstance(ChatEditingSession, chatSessionId, editorPane);\n\t\tthis._currentSessionDisposables.add(session.onDidDispose(() => {\n\t\t\tthis._currentSessionDisposables.clear();\n\t\t\tthis._currentSessionObs.set(null, undefined);\n\t\t\tthis._onDidChangeEditingSession.fire();\n\t\t}));\n\t\tthis._currentSessionDisposables.add(session.onDidChange(() => {\n\t\t\tthis._onDidChangeEditingSession.fire();\n\t\t}));\n\n\t\tthis._currentSessionObs.set(session, undefined);\n\t\tthis._onDidCreateEditingSession.fire(session);\n\t\tthis._onDidChangeEditingSession.fire();\n\t\treturn session;\n\t}\n\n\tpublic triggerEditComputation(responseModel: IChatResponseModel): Promise<void> {\n\t\treturn this._continueEditingSession(async (builder, token) => {\n\t\t\tconst codeMapperResponse: ICodeMapperResponse = {\n\t\t\t\ttextEdit: (resource, edits) => builder.textEdits(resource, edits, responseModel),\n\t\t\t};\n\t\t\tawait this._codeMapperService.mapCodeFromResponse(responseModel, codeMapperResponse, token);\n\t\t}, { silent: true });\n\t}\n\n\tpublic createSnapshot(requestId: string): void {\n\t\tthis._currentSessionObs.get()?.createSnapshot(requestId);\n\t}\n\n\tpublic async restoreSnapshot(requestId: string | undefined): Promise<void> {\n\t\tawait this._currentSessionObs.get()?.restoreSnapshot(requestId);\n\t}\n\n\tprivate installAutoApplyObserver(sessionId: string): IDisposable {\n\n\t\tconst chatModel = this._chatService.getSession(sessionId);\n\t\tif (!chatModel) {\n\t\t\tthrow new Error(`Edit session was created for a non-existing chat session: ${sessionId}`);\n\t\t}\n\n\t\tconst observerDisposables = new DisposableStore();\n\n\t\tlet editsSource: AsyncIterableSource<IChatTextEditGroup> | undefined;\n\t\tconst editsSeen = new ResourceMap<{ seen: number }>();\n\n\t\tconst onResponseComplete = (responseModel: IChatResponseModel) => {\n\t\t\tif (responseModel.result?.metadata?.autoApplyEdits) {\n\t\t\t\tthis.triggerEditComputation(responseModel);\n\t\t\t}\n\n\t\t\teditsSource?.resolve();\n\t\t\teditsSource = undefined;\n\t\t\teditsSeen.clear();\n\t\t};\n\n\n\t\tconst handleResponseParts = (responseModel: IChatResponseModel) => {\n\t\t\tfor (const part of responseModel.response.value) {\n\t\t\t\tif (part.kind === 'codeblockUri' || part.kind === 'textEditGroup') {\n\t\t\t\t\t// ensure editor is open asap\n\t\t\t\t\tthis._editorService.openEditor({ resource: part.uri, options: { inactive: true, preserveFocus: true, pinned: true } });\n\n\t\t\t\t\t// get new edits and start editing session\n\t\t\t\t\tconst first = editsSeen.size === 0;\n\t\t\t\t\tlet entry = editsSeen.get(part.uri);\n\t\t\t\t\tif (!entry) {\n\t\t\t\t\t\tentry = { seen: 0 };\n\t\t\t\t\t\teditsSeen.set(part.uri, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst allEdits: TextEdit[][] = part.kind === 'textEditGroup' ? part.edits : [];\n\t\t\t\t\tconst newEdits = allEdits.slice(entry.seen);\n\t\t\t\t\tentry.seen += newEdits.length;\n\n\t\t\t\t\teditsSource ??= new AsyncIterableSource();\n\t\t\t\t\teditsSource.emitOne({ uri: part.uri, edits: newEdits, kind: 'textEditGroup' });\n\n\t\t\t\t\tif (first) {\n\t\t\t\t\t\tthis._continueEditingSession(async (builder, token) => {\n\t\t\t\t\t\t\tfor await (const item of editsSource!.asyncIterable) {\n\t\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (const group of item.edits) {\n\t\t\t\t\t\t\t\t\tbuilder.textEdits(item.uri, group, responseModel);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, { silent: true });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tobserverDisposables.add(chatModel.onDidChange(e => {\n\t\t\tif (e.kind === 'addRequest') {\n\t\t\t\tconst responseModel = e.request.response;\n\t\t\t\tif (responseModel) {\n\t\t\t\t\tif (responseModel.isComplete) {\n\t\t\t\t\t\thandleResponseParts(responseModel);\n\t\t\t\t\t\tonResponseComplete(responseModel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst disposable = responseModel.onDidChange(() => {\n\t\t\t\t\t\t\thandleResponseParts(responseModel);\n\t\t\t\t\t\t\tif (responseModel.isComplete) {\n\t\t\t\t\t\t\t\tonResponseComplete(responseModel);\n\t\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t\t} else if (responseModel.isCanceled || responseModel.isStale) {\n\t\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tobserverDisposables.add(chatModel.onDidDispose(() => observerDisposables.dispose()));\n\t\treturn observerDisposables;\n\t}\n\n\tprivate async _continueEditingSession(builder: (stream: IChatEditingSessionStream, token: CancellationToken) => Promise<void>, options?: { silent?: boolean }): Promise<void> {\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (!session) {\n\t\t\tthrow new BugIndicatingError('Cannot continue missing session');\n\t\t}\n\n\t\tif (session.state.get() === ChatEditingSessionState.StreamingEdits) {\n\t\t\tthrow new BugIndicatingError('Cannot continue session that is still streaming');\n\t\t}\n\n\t\tlet editorPane: MultiDiffEditor | undefined;\n\t\tif (!options?.silent && session.isVisible) {\n\t\t\tconst groupedEditors = this._findGroupedEditors();\n\t\t\tif (groupedEditors.length !== 1) {\n\t\t\t\tthrow new Error(`Unexpected number of editors: ${groupedEditors.length}`);\n\t\t\t}\n\t\t\tconst [group, editor] = groupedEditors[0];\n\n\t\t\teditorPane = await group.openEditor(editor, { pinned: true, activation: EditorActivation.ACTIVATE }) as MultiDiffEditor | undefined;\n\t\t}\n\n\t\tconst stream: IChatEditingSessionStream = {\n\t\t\ttextEdits: (resource: URI, textEdits: TextEdit[], responseModel: IChatResponseModel) => {\n\t\t\t\tsession.acceptTextEdits(resource, textEdits, responseModel);\n\t\t\t}\n\t\t};\n\t\tsession.acceptStreamingEditsStart();\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tthis._currentAutoApplyOperationObs.set(cancellationTokenSource, undefined);\n\t\ttry {\n\t\t\tif (editorPane) {\n\t\t\t\tawait editorPane?.showWhile(builder(stream, cancellationTokenSource.token));\n\t\t\t} else {\n\t\t\t\tawait this._progressService.withProgress({\n\t\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\t\ttitle: localize2('chatEditing.startingSession', 'Generating edits...').value,\n\t\t\t\t}, async () => {\n\t\t\t\t\tawait builder(stream, cancellationTokenSource.token);\n\t\t\t\t},\n\t\t\t\t\t() => cancellationTokenSource.cancel()\n\t\t\t\t);\n\t\t\t}\n\t\t} finally {\n\t\t\tcancellationTokenSource.dispose();\n\t\t\tthis._currentAutoApplyOperationObs.set(null, undefined);\n\t\t\tsession.resolve();\n\t\t}\n\t}\n\n\tprivate _findGroupedEditors() {\n\t\tconst editors: [IEditorGroup, EditorInput][] = [];\n\t\tfor (const group of this._editorGroupsService.groups) {\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tif (editor.resource?.scheme === ChatEditingMultiDiffSourceResolver.scheme) {\n\t\t\t\t\teditors.push([group, editor]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn editors;\n\t}\n}\n\nclass ChatDecorationsProvider extends Disposable implements IDecorationsProvider {\n\n\treadonly label: string = localize('chat', \"Chat Editing\");\n\n\tprivate readonly _onDidChange = new Emitter<readonly URI[]>();\n\treadonly onDidChange: Event<readonly URI[]> = this._onDidChange.event;\n\n\tconstructor(\n\t\tprivate readonly _session: IObservable<IChatEditingSession | null>\n\t) {\n\t\tsuper();\n\n\t\tthis._store.add(autorun(r => {\n\t\t\tconst session = _session.read(r);\n\t\t\tif (!session) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst state = session.state.read(r);\n\t\t\tif (state === ChatEditingSessionState.Disposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst entries = session.entries.read(r);\n\t\t\tconst uris: URI[] = [];\n\t\t\tfor (const entry of entries) {\n\t\t\t\tentry.state.read(r);\n\t\t\t\turis.push(entry.modifiedURI);\n\t\t\t}\n\t\t\tthis._onDidChange.fire(uris);\n\t\t}));\n\t}\n\n\tprovideDecorations(uri: URI, _token: CancellationToken): IDecorationData | undefined {\n\t\tconst session = this._session.get();\n\t\tif (!session) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (session.state.get() !== ChatEditingSessionState.StreamingEdits) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst entry = session.entries.get().find(entry => isEqual(uri, entry.modifiedURI));\n\t\tif (!entry) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst state = entry.state.get();\n\t\tif (state !== WorkingSetEntryState.Modified) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tweight: 1000,\n\t\t\tletter: ThemeIcon.modify(Codicon.loading, 'spin'),\n\t\t\tbubble: false\n\t\t};\n\t}\n}\n\nclass ChatEditingMultiDiffSourceResolver implements IMultiDiffSourceResolver {\n\tpublic static readonly scheme = CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME;\n\n\tpublic static getMultiDiffSourceUri(): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ChatEditingMultiDiffSourceResolver.scheme,\n\t\t\tpath: '',\n\t\t});\n\t}\n\n\tconstructor(\n\t\tprivate readonly _currentSession: IObservable<ChatEditingSession | null>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) { }\n\n\tcanHandleUri(uri: URI): boolean {\n\t\treturn uri.scheme === ChatEditingMultiDiffSourceResolver.scheme;\n\t}\n\n\tasync resolveDiffSource(uri: URI): Promise<IResolvedMultiDiffSource> {\n\t\treturn this._instantiationService.createInstance(ChatEditingMultiDiffSource, this._currentSession);\n\t}\n}\n\nclass ChatEditingMultiDiffSource implements IResolvedMultiDiffSource {\n\tprivate readonly _resources = derived<readonly MultiDiffEditorItem[]>(this, (reader) => {\n\t\tconst currentSession = this._currentSession.read(reader);\n\t\tif (!currentSession) {\n\t\t\treturn [];\n\t\t}\n\t\tconst entries = currentSession.entries.read(reader);\n\t\treturn entries.map((entry) => {\n\t\t\treturn new MultiDiffEditorItem(\n\t\t\t\tentry.originalURI,\n\t\t\t\tentry.modifiedURI,\n\t\t\t\tundefined,\n\t\t\t\t{\n\t\t\t\t\t[chatEditingResourceContextKey.key]: entry.entryId,\n\t\t\t\t\t// [inChatEditingSessionContextKey.key]: true\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t});\n\treadonly resources = new ValueWithChangeEventFromObservable(this._resources);\n\n\treadonly contextKeys = {\n\t\t[inChatEditingSessionContextKey.key]: true\n\t};\n\n\tconstructor(\n\t\tprivate readonly _currentSession: IObservable<ChatEditingSession | null>\n\t) { }\n}\n\ntype ChatEditingTextModelContentQueryData = { kind: 'empty' } | { kind: 'doc'; documentId: string };\n\nclass ChatEditingTextModelContentProvider implements ITextModelContentProvider {\n\tpublic static readonly scheme = 'chat-editing-text-model';\n\n\tpublic static getEmptyFileURI(): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ChatEditingTextModelContentProvider.scheme,\n\t\t\tquery: JSON.stringify({ kind: 'empty' }),\n\t\t});\n\t}\n\n\tpublic static getFileURI(documentId: string, path: string): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ChatEditingTextModelContentProvider.scheme,\n\t\t\tpath,\n\t\t\tquery: JSON.stringify({ kind: 'doc', documentId }),\n\t\t});\n\t}\n\n\tconstructor(\n\t\tprivate readonly _currentSessionObs: IObservable<ChatEditingSession | null>,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) { }\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst data: ChatEditingTextModelContentQueryData = JSON.parse(resource.query);\n\t\tif (data.kind === 'empty') {\n\t\t\treturn this._modelService.createModel('', null, resource, false);\n\t\t}\n\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (!session) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn session.getVirtualModel(data.documentId);\n\t}\n}\n\ntype ChatEditingSnapshotTextModelContentQueryData = { requestId: string | undefined };\n\nclass ChatEditingSnapshotTextModelContentProvider implements ITextModelContentProvider {\n\tpublic static readonly scheme = 'chat-editing-snapshot-text-model';\n\n\tpublic static getSnapshotFileURI(requestId: string | undefined, path: string): URI {\n\t\treturn URI.from({\n\t\t\tscheme: ChatEditingSnapshotTextModelContentProvider.scheme,\n\t\t\tpath,\n\t\t\tquery: JSON.stringify({ requestId: requestId ?? '' }),\n\t\t});\n\t}\n\n\tconstructor(\n\t\tprivate readonly _currentSessionObs: IObservable<ChatEditingSession | null>,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) { }\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst data: ChatEditingSnapshotTextModelContentQueryData = JSON.parse(resource.query);\n\n\t\tconst session = this._currentSessionObs.get();\n\t\tif (!session || !data.requestId) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn session.getSnapshotModel(data.requestId, resource);\n\t}\n}\n\nclass ChatEditingSession extends Disposable implements IChatEditingSession {\n\tprivate readonly _state = observableValue<ChatEditingSessionState>(this, ChatEditingSessionState.Initial);\n\n\t/**\n\t * Contains the contents of a file when the AI first began doing edits to it.\n\t */\n\tprivate readonly _initialFileContents = new ResourceMap<string>();\n\tprivate readonly _snapshots = new Map<string, IChatEditingSessionSnapshot>();\n\n\tprivate readonly _filesToSkipCreating = new ResourceSet();\n\n\tprivate readonly _entriesObs = observableValue<readonly ModifiedFileEntry[]>(this, []);\n\tpublic get entries(): IObservable<readonly ModifiedFileEntry[]> {\n\t\tthis._assertNotDisposed();\n\t\treturn this._entriesObs;\n\t}\n\tprivate readonly _sequencer = new Sequencer();\n\n\tprivate _entries: ModifiedFileEntry[] = [];\n\n\tprivate _workingSet = new ResourceMap<WorkingSetEntryState>();\n\tget workingSet() {\n\t\tthis._assertNotDisposed();\n\t\treturn this._workingSet;\n\t}\n\n\tget state(): IObservable<ChatEditingSessionState> {\n\t\treturn this._state;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tget onDidChange() {\n\t\tthis._assertNotDisposed();\n\t\treturn this._onDidChange.event;\n\t}\n\n\tprivate readonly _onDidDispose = new Emitter<void>();\n\tget onDidDispose() {\n\t\tthis._assertNotDisposed();\n\t\treturn this._onDidDispose.event;\n\t}\n\n\tget isVisible(): boolean {\n\t\tthis._assertNotDisposed();\n\t\treturn Boolean(this.editorPane && this.editorPane.isVisible());\n\t}\n\n\tconstructor(\n\t\tpublic readonly chatSessionId: string,\n\t\tprivate editorPane: MultiDiffEditor | undefined,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IBulkEditService public readonly _bulkEditService: IBulkEditService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IChatWidgetService chatWidgetService: IChatWidgetService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IFileDialogService private readonly _dialogService: IFileDialogService,\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService,\n\t) {\n\t\tsuper();\n\n\t\tconst widget = chatWidgetService.getWidgetBySessionId(chatSessionId);\n\t\tif (!widget) {\n\t\t\treturn; // Shouldn't happen\n\t\t}\n\n\t\t// Add the currently active editors to the working set\n\t\tthis._trackCurrentEditorsInWorkingSet();\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tthis._trackCurrentEditorsInWorkingSet();\n\t\t}));\n\t\tthis._register(this._editorService.onDidCloseEditor((e) => {\n\t\t\tthis._trackCurrentEditorsInWorkingSet(e);\n\t\t}));\n\t}\n\n\tprivate _trackCurrentEditorsInWorkingSet(e?: IEditorCloseEvent) {\n\t\tconst closedEditor = e?.editor.resource?.toString();\n\n\t\tconst existingTransientEntries = new ResourceSet();\n\t\tfor (const file of this._workingSet.keys()) {\n\t\t\tif (this._workingSet.get(file) === WorkingSetEntryState.Transient) {\n\t\t\t\texistingTransientEntries.add(file);\n\t\t\t}\n\t\t}\n\t\tif (existingTransientEntries.size === 0 && this._workingSet.size > 0) {\n\t\t\t// The user manually added or removed attachments, don't inherit the visible editors\n\t\t\treturn;\n\t\t}\n\n\t\tconst activeEditors = new ResourceSet();\n\t\tthis._editorGroupsService.groups.forEach((group) => {\n\t\t\tif (!group.activeEditorPane) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet activeEditorControl = group.activeEditorPane.getControl();\n\t\t\tif (isDiffEditor(activeEditorControl)) {\n\t\t\t\tactiveEditorControl = activeEditorControl.getOriginalEditor().hasTextFocus() ? activeEditorControl.getOriginalEditor() : activeEditorControl.getModifiedEditor();\n\t\t\t}\n\t\t\tif (isCodeEditor(activeEditorControl) && activeEditorControl.hasModel()) {\n\t\t\t\tconst uri = activeEditorControl.getModel().uri;\n\t\t\t\tif (closedEditor === uri.toString()) {\n\t\t\t\t\t// The editor group service sees recently closed editors?\n\t\t\t\t\t// Continue, since we want this to be deleted from the working set\n\t\t\t\t} else if (existingTransientEntries.has(uri)) {\n\t\t\t\t\texistingTransientEntries.delete(uri);\n\t\t\t\t} else {\n\t\t\t\t\tactiveEditors.add(uri);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet didChange = false;\n\t\tfor (const entry of existingTransientEntries) {\n\t\t\tdidChange ||= this._workingSet.delete(entry);\n\t\t}\n\n\t\tfor (const entry of activeEditors) {\n\t\t\tthis._workingSet.set(entry, WorkingSetEntryState.Transient);\n\t\t\tdidChange = true;\n\t\t}\n\n\t\tif (didChange) {\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tpublic createSnapshot(requestId: string | undefined): void {\n\t\tconst snapshot = this._createSnapshot(requestId);\n\t\tif (requestId) {\n\t\t\tthis._snapshots.set(requestId, snapshot);\n\t\t\tfor (const workingSetItem of this._workingSet.keys()) {\n\t\t\t\tthis._workingSet.set(workingSetItem, WorkingSetEntryState.Sent);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._pendingSnapshot = snapshot;\n\t\t}\n\t}\n\n\tprivate _createSnapshot(requestId: string | undefined): IChatEditingSessionSnapshot {\n\t\tconst workingSet = new ResourceMap<WorkingSetEntryState>();\n\t\tfor (const [file, state] of this._workingSet) {\n\t\t\tworkingSet.set(file, state);\n\t\t}\n\t\tconst entries = new ResourceMap<ISnapshotEntry>();\n\t\tfor (const entry of this._entriesObs.get()) {\n\t\t\tentries.set(entry.modifiedURI, entry.createSnapshot(requestId));\n\t\t}\n\t\treturn {\n\t\t\tworkingSet,\n\t\t\tentries\n\t\t};\n\t}\n\n\tpublic async getSnapshotModel(requestId: string, snapshotUri: URI): Promise<ITextModel | null> {\n\t\tconst entries = this._snapshots.get(requestId)?.entries;\n\t\tif (!entries) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst snapshotEntry = [...entries.values()].find((e) => e.snapshotUri.toString() === snapshotUri.toString());\n\t\tif (!snapshotEntry) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._modelService.createModel(snapshotEntry.current, this._languageService.createById(snapshotEntry.languageId), snapshotUri, false);\n\t}\n\n\tpublic getSnapshot(requestId: string, uri: URI) {\n\t\tconst snapshot = this._snapshots.get(requestId);\n\t\tconst snapshotEntries = snapshot?.entries;\n\t\treturn snapshotEntries?.get(uri);\n\t}\n\n\tpublic async restoreSnapshot(requestId: string | undefined): Promise<void> {\n\t\tif (requestId !== undefined) {\n\t\t\tconst snapshot = this._snapshots.get(requestId);\n\t\t\tif (snapshot) {\n\t\t\t\tawait this._restoreSnapshot(snapshot);\n\t\t\t}\n\t\t} else {\n\t\t\tawait this._restoreSnapshot(undefined);\n\t\t}\n\t}\n\n\t/**\n\t * A snapshot representing the state of the working set before a new request has been sent\n\t */\n\tprivate _pendingSnapshot: IChatEditingSessionSnapshot | undefined;\n\tprivate async _restoreSnapshot(snapshot: IChatEditingSessionSnapshot | undefined): Promise<void> {\n\t\tif (!snapshot) {\n\t\t\tif (!this._pendingSnapshot) {\n\t\t\t\treturn; // We don't have a pending snapshot that we can restore\n\t\t\t}\n\t\t\t// Restore pending snapshot\n\t\t\tsnapshot = this._pendingSnapshot;\n\t\t\tthis._pendingSnapshot = undefined;\n\t\t} else {\n\t\t\t// Create and save a pending snapshot\n\t\t\tthis.createSnapshot(undefined);\n\t\t}\n\n\t\tthis._workingSet = new ResourceMap();\n\t\tsnapshot.workingSet.forEach((state, uri) => this._workingSet.set(uri, state));\n\n\t\t// Reset all the files which are modified in this session state\n\t\t// but which are not found in the snapshot\n\t\tfor (const entry of this._entries) {\n\t\t\tconst snapshotEntry = snapshot.entries.get(entry.modifiedURI);\n\t\t\tif (!snapshotEntry) {\n\t\t\t\tconst initialContents = this._initialFileContents.get(entry.modifiedURI);\n\t\t\t\tif (typeof initialContents === 'string') {\n\t\t\t\t\tentry.resetToInitialValue(initialContents);\n\t\t\t\t}\n\t\t\t\tentry.dispose();\n\t\t\t}\n\t\t}\n\n\t\tconst entriesArr: ModifiedFileEntry[] = [];\n\t\t// Restore all entries from the snapshot\n\t\tfor (const snapshotEntry of snapshot.entries.values()) {\n\t\t\tconst entry = await this._getOrCreateModifiedFileEntry(snapshotEntry.resource, snapshotEntry.telemetryInfo);\n\t\t\tentry.restoreFromSnapshot(snapshotEntry);\n\t\t\tentriesArr.push(entry);\n\t\t}\n\n\t\tthis._entries = entriesArr;\n\t\tthis._entriesObs.set(this._entries, undefined);\n\t}\n\n\tremove(...uris: URI[]): void {\n\t\tthis._assertNotDisposed();\n\n\t\tlet didRemoveUris = false;\n\t\tfor (const uri of uris) {\n\t\t\tdidRemoveUris ||= this._workingSet.delete(uri);\n\t\t}\n\n\t\tif (!didRemoveUris) {\n\t\t\treturn; // noop\n\t\t}\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate _assertNotDisposed(): void {\n\t\tif (this._state.get() === ChatEditingSessionState.Disposed) {\n\t\t\tthrow new BugIndicatingError(`Cannot access a disposed editing session`);\n\t\t}\n\t}\n\n\tasync accept(...uris: URI[]): Promise<void> {\n\t\tthis._assertNotDisposed();\n\n\t\tif (uris.length === 0) {\n\t\t\tawait Promise.all(this._entries.map(entry => entry.accept(undefined)));\n\t\t}\n\n\t\tfor (const uri of uris) {\n\t\t\tconst entry = this._entries.find(e => e.modifiedURI.toString() === uri.toString());\n\t\t\tif (entry) {\n\t\t\t\tawait entry.accept(undefined);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tasync reject(...uris: URI[]): Promise<void> {\n\t\tthis._assertNotDisposed();\n\n\t\tif (uris.length === 0) {\n\t\t\tawait Promise.all(this._entries.map(entry => entry.reject(undefined)));\n\t\t}\n\n\t\tfor (const uri of uris) {\n\t\t\tconst entry = this._entries.find(e => e.modifiedURI.toString() === uri.toString());\n\t\t\tif (entry) {\n\t\t\t\tawait entry.reject(undefined);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tasync show(): Promise<void> {\n\t\tthis._assertNotDisposed();\n\n\t\tif (this.editorPane?.isVisible()) {\n\t\t\treturn;\n\t\t} else if (this.editorPane?.input) {\n\t\t\tawait this._editorGroupsService.activeGroup.openEditor(this.editorPane.input, { pinned: true, activation: EditorActivation.ACTIVATE });\n\t\t\treturn;\n\t\t}\n\n\t\tconst input = MultiDiffEditorInput.fromResourceMultiDiffEditorInput({\n\t\t\tmultiDiffSource: ChatEditingMultiDiffSourceResolver.getMultiDiffSourceUri(),\n\t\t\tlabel: localize('multiDiffEditorInput.name', \"Suggested Edits\")\n\t\t}, this._instantiationService);\n\n\t\tconst editorPane = await this._editorGroupsService.activeGroup.openEditor(input, { pinned: true, activation: EditorActivation.ACTIVATE }) as MultiDiffEditor | undefined;\n\t\tthis.editorPane = editorPane;\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tthis._assertNotDisposed();\n\n\t\t// Close out all open files\n\t\tawait Promise.allSettled(this._editorGroupsService.groups.map(async (g) => {\n\t\t\treturn Promise.allSettled(g.editors.map(async (e) => {\n\t\t\t\tif (e instanceof MultiDiffEditorInput || e instanceof DiffEditorInput && (e.original.resource?.scheme === ModifiedFileEntry.scheme || e.original.resource?.scheme === ChatEditingTextModelContentProvider.scheme)) {\n\t\t\t\t\tawait g.closeEditor(e);\n\t\t\t\t}\n\t\t\t}));\n\t\t}));\n\n\t\tif (this._state.get() !== ChatEditingSessionState.Disposed) {\n\t\t\t// session got disposed while we were closing editors\n\t\t\tthis.dispose();\n\t\t}\n\n\t}\n\n\toverride dispose() {\n\t\tthis._assertNotDisposed();\n\n\t\tsuper.dispose();\n\t\tthis._state.set(ChatEditingSessionState.Disposed, undefined);\n\t\tthis._onDidDispose.fire();\n\t}\n\n\tgetVirtualModel(documentId: string): ITextModel | null {\n\t\tthis._assertNotDisposed();\n\n\t\tconst entry = this._entries.find(e => e.entryId === documentId);\n\t\treturn entry?.docSnapshot ?? null;\n\t}\n\n\tacceptStreamingEditsStart(): void {\n\t\tif (this._state.get() === ChatEditingSessionState.Disposed) {\n\t\t\t// we don't throw in this case because there could be a builder still connected to a disposed session\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that the edits are processed sequentially\n\t\tthis._sequencer.queue(() => this._acceptStreamingEditsStart());\n\t}\n\n\tacceptTextEdits(resource: URI, textEdits: TextEdit[], responseModel: IChatResponseModel): void {\n\t\tif (this._state.get() === ChatEditingSessionState.Disposed) {\n\t\t\t// we don't throw in this case because there could be a builder still connected to a disposed session\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that the edits are processed sequentially\n\t\tthis._sequencer.queue(() => this._acceptTextEdits(resource, textEdits, responseModel));\n\t}\n\n\tresolve(): void {\n\t\tif (this._state.get() === ChatEditingSessionState.Disposed) {\n\t\t\t// we don't throw in this case because there could be a builder still connected to a disposed session\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that the edits are processed sequentially\n\t\tthis._sequencer.queue(() => this._resolve());\n\t}\n\n\taddFileToWorkingSet(resource: URI) {\n\t\tif (!this._workingSet.has(resource)) {\n\t\t\tthis._workingSet.set(resource, WorkingSetEntryState.Attached);\n\n\t\t\t// Convert all transient entries to attachments\n\t\t\tfor (const file of this._workingSet.keys()) {\n\t\t\t\tif (this._workingSet.get(file) === WorkingSetEntryState.Transient) {\n\t\t\t\t\tthis._workingSet.set(file, WorkingSetEntryState.Attached);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidChange.fire();\n\t\t}\n\t}\n\n\tprivate async _acceptStreamingEditsStart(): Promise<void> {\n\t\tthis._state.set(ChatEditingSessionState.StreamingEdits, undefined);\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async _acceptTextEdits(resource: URI, textEdits: TextEdit[], responseModel: IChatResponseModel): Promise<void> {\n\t\tif (this._filesToSkipCreating.has(resource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._workspaceContextService.getWorkspaceFolder(resource) && !this._fileService.exists(resource)) {\n\t\t\t// if the file doesn't exist yet and is outside the workspace, prompt the user for a location to save it to\n\t\t\tconst saveLocation = await this._dialogService.showSaveDialog({ title: localize('chatEditing.fileSave', '{0} wants to create a file. Choose where it should be saved.', this._chatAgentService.getDefaultAgent(ChatAgentLocation.EditingSession)?.fullName ?? 'Chat') });\n\t\t\tif (!saveLocation) {\n\t\t\t\t// don't ask the user to create the file again when the next text edit for this same resource streams in\n\t\t\t\tthis._filesToSkipCreating.add(resource);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresource = saveLocation;\n\t\t}\n\n\t\t// Make these getters because the response result is not available when the file first starts to be edited\n\t\tconst telemetryInfo = new class {\n\t\t\tget agentId() { return responseModel.agent?.id; }\n\t\t\tget command() { return responseModel.slashCommand?.name; }\n\t\t\tget sessionId() { return responseModel.session.sessionId; }\n\t\t\tget requestId() { return responseModel.requestId; }\n\t\t\tget result() { return responseModel.result; }\n\t\t};\n\t\tconst entry = await this._getOrCreateModifiedFileEntry(resource, telemetryInfo);\n\t\tentry.applyEdits(textEdits);\n\t\t// await this._editorService.openEditor({ resource: entry.modifiedURI, options: { inactive: true } });\n\t}\n\n\tprivate async _resolve(): Promise<void> {\n\t\tthis._state.set(ChatEditingSessionState.Idle, undefined);\n\t\tthis._onDidChange.fire();\n\t}\n\n\tprivate async _getOrCreateModifiedFileEntry(resource: URI, responseModel: IModifiedEntryTelemetryInfo): Promise<ModifiedFileEntry> {\n\t\tconst existingEntry = this._entries.find(e => e.resource.toString() === resource.toString());\n\t\tif (existingEntry) {\n\t\t\treturn existingEntry;\n\t\t}\n\n\t\tconst entry = await this._createModifiedFileEntry(resource, responseModel);\n\t\tthis._register(entry);\n\t\tthis._initialFileContents.set(resource, entry.modifiedModel.getValue());\n\t\tthis._entries = [...this._entries, entry];\n\t\tthis._entriesObs.set(this._entries, undefined);\n\t\tthis._onDidChange.fire();\n\n\t\treturn entry;\n\t}\n\n\tprivate async _createModifiedFileEntry(resource: URI, responseModel: IModifiedEntryTelemetryInfo, mustExist = false): Promise<ModifiedFileEntry> {\n\t\ttry {\n\t\t\tconst ref = await this._textModelService.createModelReference(resource);\n\t\t\treturn this._instantiationService.createInstance(ModifiedFileEntry, resource, ref, { collapse: (transaction: ITransaction | undefined) => this._collapse(resource, transaction) }, responseModel);\n\t\t} catch (err) {\n\t\t\tif (mustExist) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\t// this file does not exist yet, create it and try again\n\t\t\tawait this._bulkEditService.apply({ edits: [{ newResource: resource }] });\n\t\t\treturn this._createModifiedFileEntry(resource, responseModel, true);\n\t\t}\n\t}\n\n\tprivate _collapse(resource: URI, transaction: ITransaction | undefined) {\n\t\tconst multiDiffItem = this.editorPane?.findDocumentDiffItem(resource);\n\t\tif (multiDiffItem) {\n\t\t\tthis.editorPane?.viewModel?.items.get().find((documentDiffItem) => String(documentDiffItem.originalUri) === String(multiDiffItem.originalUri) && String(documentDiffItem.modifiedUri) === String(multiDiffItem.modifiedUri))?.collapsed.set(true, transaction);\n\t\t}\n\t}\n}\n\nclass ModifiedFileEntry extends Disposable implements IModifiedFileEntry {\n\n\tpublic static readonly scheme = 'modified-file-entry';\n\tstatic lastEntryId = 0;\n\tpublic readonly entryId = `${ModifiedFileEntry.scheme}::${++ModifiedFileEntry.lastEntryId}`;\n\n\tpublic readonly docSnapshot: ITextModel;\n\tprivate readonly doc: ITextModel;\n\n\tget originalURI(): URI {\n\t\treturn this.docSnapshot.uri;\n\t}\n\n\tget originalModel(): ITextModel {\n\t\treturn this.docSnapshot;\n\t}\n\n\tget modifiedURI(): URI {\n\t\treturn this.doc.uri;\n\t}\n\n\tget modifiedModel(): ITextModel {\n\t\treturn this.doc;\n\t}\n\n\tprivate readonly _stateObs = observableValue<WorkingSetEntryState>(this, WorkingSetEntryState.Modified);\n\tpublic get state(): IObservable<WorkingSetEntryState> {\n\t\treturn this._stateObs;\n\t}\n\n\tprivate _isFirstEditAfterStartOrSnapshot: boolean = true;\n\tprivate _isApplyingEdits: boolean = false;\n\tprivate _diffOperation: Promise<any> | undefined;\n\tprivate _diffOperationIds: number = 0;\n\n\tprivate readonly _diffInfo = observableValue<IDocumentDiff>(this, nullDocumentDiff);\n\tget diffInfo(): IObservable<IDocumentDiff> {\n\t\treturn this._diffInfo;\n\t}\n\n\tprivate readonly _editDecorationClear = this._register(new RunOnceScheduler(() => { this._editDecorations = this.doc.deltaDecorations(this._editDecorations, []); }, 500));\n\tprivate _editDecorations: string[] = [];\n\n\tprivate static readonly _editDecorationOptions = ModelDecorationOptions.register({\n\t\tisWholeLine: true,\n\t\tdescription: 'chat-editing',\n\t\tclassName: 'rangeHighlight',\n\t\tmarginClassName: 'rangeHighlight',\n\t\toverviewRuler: {\n\t\t\tposition: OverviewRulerLane.Full,\n\t\t\tcolor: themeColorFromId(editorSelectionBackground)\n\t\t},\n\t});\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tresourceRef: IReference<IResolvedTextEditorModel>,\n\t\tprivate readonly _multiDiffEntryDelegate: { collapse: (transaction: ITransaction | undefined) => void },\n\t\tprivate readonly _telemetryInfo: IModifiedEntryTelemetryInfo,\n\t\t@IModelService modelService: IModelService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IBulkEditService public readonly bulkEditService: IBulkEditService,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t) {\n\t\tsuper();\n\t\tthis.doc = resourceRef.object.textEditorModel;\n\t\tconst docSnapshot = this.docSnapshot = this._register(\n\t\t\tmodelService.createModel(\n\t\t\t\tcreateTextBufferFactoryFromSnapshot(this.doc.createSnapshot()),\n\t\t\t\tlanguageService.createById(this.doc.getLanguageId()),\n\t\t\t\tChatEditingTextModelContentProvider.getFileURI(this.entryId, resource.path),\n\t\t\t\tfalse\n\t\t\t)\n\t\t);\n\n\t\t// Create a reference to this model to avoid it being disposed from under our nose\n\t\t(async () => {\n\t\t\tconst reference = await textModelService.createModelReference(docSnapshot.uri);\n\t\t\tif (this._store.isDisposed) {\n\t\t\t\treference.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._register(reference);\n\t\t})();\n\n\t\tthis._register(resourceRef);\n\n\t\tthis._register(this.doc.onDidChangeContent(e => this._mirrorEdits(e)));\n\t}\n\n\tcreateSnapshot(requestId: string | undefined): ISnapshotEntry {\n\t\tthis._isFirstEditAfterStartOrSnapshot = true;\n\t\treturn {\n\t\t\tresource: this.modifiedURI,\n\t\t\tlanguageId: this.modifiedModel.getLanguageId(),\n\t\t\tsnapshotUri: ChatEditingSnapshotTextModelContentProvider.getSnapshotFileURI(requestId, this.modifiedURI.path),\n\t\t\toriginal: this.originalModel.getValue(),\n\t\t\tcurrent: this.modifiedModel.getValue(),\n\t\t\tstate: this.state.get(),\n\t\t\ttelemetryInfo: this._telemetryInfo\n\t\t};\n\t}\n\n\trestoreFromSnapshot(snapshot: ISnapshotEntry) {\n\t\tthis.docSnapshot.setValue(snapshot.original);\n\t\tthis._setDocValue(snapshot.current);\n\t\tthis._stateObs.set(snapshot.state, undefined);\n\t}\n\n\tresetToInitialValue(value: string) {\n\t\tthis._setDocValue(value);\n\t}\n\n\tprivate _mirrorEdits(event: IModelContentChangedEvent) {\n\n\t\tif (this._isApplyingEdits) {\n\t\t\t// ignore edits that we are making\n\t\t\treturn;\n\t\t}\n\n\t\t// mirror edits that \"others\" are doing into the document snapshot. this is done\n\t\t// so that subsequent diffing will not identify these edits are changes. the logic\n\t\t// is simple: use the diff info to transpose each edit from `doc` into `docSnapshot`\n\t\t// but ignore edits are inside AI-changes\n\n\t\tconst diff = this._diffInfo.get();\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (const edit of event.changes) {\n\n\t\t\tlet isOverlapping = false;\n\t\t\tlet changeDelta = 0;\n\n\t\t\tfor (const change of diff.changes) {\n\t\t\t\tconst modifiedRange = lineRangeAsRange(change.modified, this.doc);\n\n\t\t\t\tif (modifiedRange.getEndPosition().isBefore(Range.getStartPosition(edit.range))) {\n\t\t\t\t\tconst originalRange = lineRangeAsRange(change.original, this.docSnapshot);\n\t\t\t\t\tchangeDelta -= this.docSnapshot.getValueLengthInRange(originalRange);\n\t\t\t\t\tchangeDelta += this.doc.getValueLengthInRange(modifiedRange);\n\n\t\t\t\t} else if (Range.areIntersectingOrTouching(modifiedRange, edit.range)) {\n\t\t\t\t\t// overlapping\n\t\t\t\t\tisOverlapping = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t} else {\n\t\t\t\t\t// changes past the edit aren't relevant\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isOverlapping) {\n\t\t\t\t// change overlapping with AI change aren't mirrored\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst offset = edit.rangeOffset - changeDelta;\n\t\t\tconst start = this.docSnapshot.getPositionAt(offset);\n\t\t\tconst end = this.docSnapshot.getPositionAt(offset + edit.rangeLength);\n\t\t\tedits.push(EditOperation.replace(Range.fromPositions(start, end), edit.text));\n\t\t}\n\n\t\tthis.docSnapshot.applyEdits(edits);\n\t}\n\n\n\tapplyEdits(textEdits: TextEdit[]): void {\n\n\t\t// highlight edits\n\t\tthis._editDecorations = this.doc.deltaDecorations(this._editDecorations, textEdits.map(edit => {\n\t\t\treturn {\n\t\t\t\toptions: ModifiedFileEntry._editDecorationOptions,\n\t\t\t\trange: edit.range\n\t\t\t} satisfies IModelDeltaDecoration;\n\t\t}));\n\t\tthis._editDecorationClear.schedule();\n\n\t\t// push stack element for the first edit\n\t\tif (this._isFirstEditAfterStartOrSnapshot) {\n\t\t\tthis._isFirstEditAfterStartOrSnapshot = false;\n\t\t\tconst request = this._chatService.getSession(this._telemetryInfo.sessionId)?.getRequests().at(-1);\n\t\t\tconst label = request?.message.text ? localize('chatEditing1', \"Chat Edit: '{0}'\", request.message.text) : localize('chatEditing2', \"Chat Edit\");\n\t\t\tthis._undoRedoService.pushElement(new SingleModelEditStackElement(label, 'chat.edit', this.doc, null));\n\t\t}\n\n\t\t// make the actual edit\n\t\tthis._isApplyingEdits = true;\n\t\ttry {\n\t\t\tthis.doc.pushEditOperations(null, textEdits.map(TextEdit.asEditOperation), () => null);\n\t\t} finally {\n\t\t\tthis._isApplyingEdits = false;\n\t\t}\n\n\t\tthis._stateObs.set(WorkingSetEntryState.Modified, undefined);\n\n\t\t// trigger diff computation but only at first, when done, or when last\n\t\tconst myDiffOperationId = ++this._diffOperationIds;\n\t\tPromise.resolve(this._diffOperation).then(() => {\n\t\t\tif (this._diffOperationIds === myDiffOperationId) {\n\t\t\t\tthis._diffOperation = this._updateDiffInfo();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _updateDiffInfo(): Promise<void> {\n\n\t\tconst [diff] = await Promise.all([\n\t\t\tthis._editorWorkerService.computeDiff(\n\t\t\t\tthis.docSnapshot.uri,\n\t\t\t\tthis.doc.uri,\n\t\t\t\t{ computeMoves: true, ignoreTrimWhitespace: false, maxComputationTimeMs: 3000 },\n\t\t\t\t'advanced'\n\t\t\t),\n\t\t\ttimeout(800) // DON't diff too fast\n\t\t]);\n\n\t\tthis._diffInfo.set(diff ?? nullDocumentDiff, undefined);\n\t}\n\n\tasync accept(transaction: ITransaction | undefined): Promise<void> {\n\t\tif (this._stateObs.get() !== WorkingSetEntryState.Modified) {\n\t\t\t// already accepted or rejected\n\t\t\treturn;\n\t\t}\n\n\t\tthis.docSnapshot.setValue(this.doc.createSnapshot());\n\t\tthis._stateObs.set(WorkingSetEntryState.Accepted, transaction);\n\t\tawait this.collapse(transaction);\n\t\tthis._notifyAction('accepted');\n\t}\n\n\tasync reject(transaction: ITransaction | undefined): Promise<void> {\n\t\tif (this._stateObs.get() !== WorkingSetEntryState.Modified) {\n\t\t\t// already accepted or rejected\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setDocValue(this.docSnapshot.getValue());\n\n\t\tthis._stateObs.set(WorkingSetEntryState.Rejected, transaction);\n\t\tawait this.collapse(transaction);\n\t\tthis._notifyAction('rejected');\n\t}\n\n\tprivate _setDocValue(value: string): void {\n\t\tthis.doc.pushStackElement();\n\t\tconst edit = EditOperation.replace(this.doc.getFullModelRange(), value);\n\t\tthis.doc.pushEditOperations(null, [edit], () => null);\n\t\tthis.doc.pushStackElement();\n\t}\n\n\tasync collapse(transaction: ITransaction | undefined): Promise<void> {\n\t\tthis._multiDiffEntryDelegate.collapse(transaction);\n\t}\n\n\tprivate _notifyAction(outcome: 'accepted' | 'rejected') {\n\t\tthis._chatService.notifyUserAction({\n\t\t\taction: { kind: 'chatEditingSessionAction', uri: this.resource, hasRemainingEdits: false, outcome },\n\t\t\tagentId: this._telemetryInfo.agentId,\n\t\t\tcommand: this._telemetryInfo.command,\n\t\t\tsessionId: this._telemetryInfo.sessionId,\n\t\t\trequestId: this._telemetryInfo.requestId,\n\t\t\tresult: this._telemetryInfo.result\n\t\t});\n\t}\n}\n\nexport interface IModifiedEntryTelemetryInfo {\n\tagentId: string | undefined;\n\tcommand: string | undefined;\n\tsessionId: string;\n\trequestId: string;\n\tresult: IChatAgentResult | undefined;\n}\n\nexport interface IChatEditingSessionSnapshot {\n\tworkingSet: ResourceMap<WorkingSetEntryState>;\n\tentries: ResourceMap<ISnapshotEntry>;\n}\n\nexport interface ISnapshotEntry {\n\treadonly resource: URI;\n\treadonly languageId: string;\n\treadonly snapshotUri: URI;\n\treadonly original: string;\n\treadonly current: string;\n\treadonly state: WorkingSetEntryState;\n\ttelemetryInfo: IModifiedEntryTelemetryInfo;\n}\n\nconst lineRangeAsRange = (lineRange: LineRange, model: ITextModel) => {\n\treturn model.validateRange(lineRange.isEmpty\n\t\t? new Range(lineRange.startLineNumber, 1, lineRange.startLineNumber, Number.MAX_SAFE_INTEGER)\n\t\t: new Range(lineRange.startLineNumber, 1, lineRange.endLineNumberExclusive - 1, Number.MAX_SAFE_INTEGER)\n\t);\n};\n"],
  "mappings": "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",
  "names": ["entry"]
}
