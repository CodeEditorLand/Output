var L=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var _=(n,r,e,t)=>{for(var i=t>1?void 0:t?O(r,e):r,o=n.length-1,c;o>=0;o--)(c=n[o])&&(i=(t?c(r,e,i):c(i))||i);return t&&i&&L(r,e,i),i},s=(n,r)=>(e,t)=>r(e,t,n);import{Queue as F}from"../../../../base/common/async.js";import{Disposable as x,DisposableMap as P,DisposableStore as u,MutableDisposable as k}from"../../../../base/common/lifecycle.js";import{localize as d,localize2 as T}from"../../../../nls.js";import{Action2 as B,registerAction2 as M}from"../../../../platform/actions/common/actions.js";import{IDialogService as N}from"../../../../platform/dialogs/common/dialogs.js";import"../../../../platform/instantiation/common/instantiation.js";import{ILabelService as U}from"../../../../platform/label/common/label.js";import{IStorageService as C,StorageScope as g,StorageTarget as W}from"../../../../platform/storage/common/storage.js";import"../../../common/contributions.js";import{SaveReason as q}from"../../../common/editor.js";import{IFilesConfigurationService as z}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{ITextFileService as j}from"../../../services/textfile/common/textfiles.js";import{ChatAgentLocation as G,IChatAgentService as H}from"../common/chatAgents.js";import{IChatEditingService as K,WorkingSetEntryState as D}from"../common/chatEditingService.js";import{CHAT_CATEGORY as Q}from"./actions/chatActions.js";const S="workbench.chat.editorSaving";let f=class extends x{constructor(e,t,i,o,c,I,v){super();this._dialogService=c;this._storageService=I;this._fileConfigService=v;const m=this._store.add(new u),E=new F,b=()=>{m.clear(),!this._storageService.getBoolean(S,g.PROFILE,!1)&&(m.add(e.onDidCreateEditingSession(a=>this._handleNewEditingSession(a))),m.add(i.files.addSaveParticipant({participate:async(a,y,X,Y)=>{if(y.reason!==q.EXPLICIT)return;const l=e.getEditingSession(a.resource);l&&l.entries.get().find(p=>p.state.get()===D.Modified&&p.modifiedURI.toString()===a.resource.toString())&&await E.queue(async()=>{if(this._storageService.getBoolean(S,g.PROFILE,!1)){await l.accept(a.resource);return}const h=t.getDefaultAgent(G.EditingSession)?.fullName,w=o.getUriBasenameLabel(a.resource),R=h?d("message.1","Do you want to accept the changes {0} made in {1}",h,w):d("message.2","Do you want to accept the changes chat made in {1}",w),A=await this._dialogService.confirm({message:R,detail:d("detail","AI-generated changes may be incorect and should be reviewed before saving.",h),primaryButton:d("save","Accept & Save"),cancelButton:d("discard","Discard & Save"),checkbox:{label:d("config","Always accept edits when saving"),checked:!1}});A.confirmed?(await l.accept(a.resource),A.checkboxChecked&&this._storageService.store(S,!0,g.PROFILE,W.USER)):await l.reject(a.resource)})}})))};this._storageService.onDidChangeValue(g.PROFILE,S,this._store)(b),b()}static ID="workbench.chat.editorSaving";_sessionStore=this._store.add(new P);_handleNewEditingSession(e){const t=new u,i=t.add(new k),o=()=>{const c=new u,I=e.entries.get();for(const v of I)v.state.get()===D.Modified&&c.add(this._fileConfigService.disableAutoSave(v.modifiedURI));i.value=c};o(),this._sessionStore.set(e,t),t.add(e.onDidChange(()=>{o()})),t.add(e.onDidDispose(()=>{this._sessionStore.deleteAndDispose(e)}))}};f=_([s(0,K),s(1,H),s(2,j),s(3,U),s(4,N),s(5,C),s(6,z)],f),M(class extends B{constructor(){super({id:"workbench.action.resetChatEditorSaving",title:T("resetChatEditorSaving","Reset Choise for 'Always accept edits when saving'"),category:Q,f1:!0})}run(n){n.get(C).remove(S,g.PROFILE)}});export{f as ChatEditorSaving};
