var U=Object.defineProperty;var V=Object.getOwnPropertyDescriptor;var F=(v,o,i,a)=>{for(var e=a>1?void 0:a?V(o,i):o,d=v.length-1,l;d>=0;d--)(l=v[d])&&(e=(a?l(o,i,e):l(e))||e);return a&&e&&U(o,i,e),e},f=(v,o)=>(i,a)=>o(i,a,v);import{Queue as P}from"../../../../base/common/async.js";import{CancellationError as W}from"../../../../base/common/errors.js";import{Disposable as q,DisposableMap as G,DisposableStore as D,MutableDisposable as H}from"../../../../base/common/lifecycle.js";import"../../../../editor/browser/editorExtensions.js";import{localize as t}from"../../../../nls.js";import{Action2 as O,MenuId as X,registerAction2 as z}from"../../../../platform/actions/common/actions.js";import{IConfigurationService as k}from"../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as K}from"../../../../platform/contextkey/common/contextkey.js";import{IDialogService as L}from"../../../../platform/dialogs/common/dialogs.js";import{ILabelService as x}from"../../../../platform/label/common/label.js";import"../../../common/contributions.js";import{SaveReason as B}from"../../../common/editor.js";import{IEditorService as Q}from"../../../services/editor/common/editorService.js";import{IFilesConfigurationService as j}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{ITextFileService as J}from"../../../services/textfile/common/textfiles.js";import{ChatAgentLocation as M,IChatAgentService as N}from"../common/chatAgents.js";import{CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME as Y,IChatEditingService as T,WorkingSetEntryState as E}from"../common/chatEditingService.js";let c=class extends q{constructor(i,a,e,d,l,h,S){super();this._dialogService=h;this._fileConfigService=S;const r=this._store.add(new D),g=new P,I=()=>{r.clear(),!i.getValue(c._config)&&(a.currentEditingSession&&this._handleNewEditingSession(a.currentEditingSession,r),r.add(a.onDidCreateEditingSession(s=>this._handleNewEditingSession(s,r))),r.add(d.files.addSaveParticipant({participate:async(s,u,m,b)=>{if(u.reason!==B.EXPLICIT)return;const C=a.getEditingSession(s.resource);C&&C.entries.get().find(w=>w.state.get()===E.Modified&&w.modifiedURI.toString()===s.resource.toString())&&await g.queue(async()=>{if(i.getValue(c._config))return;const y=e.getDefaultAgent(M.EditingSession)?.fullName,A=l.getUriBasenameLabel(s.resource),R=y?t("message.1","Do you want to save the changes {0} made in {1}?",y,A):t("message.2","Do you want to save the changes chat made in {0}?",A),_=await this._dialogService.confirm({message:R,detail:t("detail2","AI-generated changes may be incorrect and should be reviewed before saving.",y),primaryButton:t("save","Save"),cancelButton:t("discard","Cancel"),checkbox:{label:t("config","Always save with AI-generated changes without asking"),checked:!1}});if(!_.confirmed)throw new W;_.checkboxChecked&&await i.updateValue(c._config,!0)})}})))};i.onDidChangeConfiguration(n=>{n.affectsConfiguration(c._config)&&I()}),I()}static ID="workbench.chat.editorSaving";static _config="chat.editing.alwaysSaveWithGeneratedChanges";_sessionStore=this._store.add(new G);_handleNewEditingSession(i,a){const e=new D;a.add(e);const d=e.add(new H),l=()=>{const h=new D,S=i.entries.get();for(const r of S)r.state.get()===E.Modified&&h.add(this._fileConfigService.disableAutoSave(r.modifiedURI));d.value=h};l(),this._sessionStore.set(i,e),e.add(i.onDidChange(()=>{l()})),e.add(i.onDidDispose(()=>{e.dispose(),a.delete(e)}))}};c=F([f(0,k),f(1,T),f(2,N),f(3,J),f(4,x),f(5,L),f(6,j)],c);class p extends O{static ID="chatEditing.saveAllFiles";static LABEL=t("save.allFiles","Save All");constructor(){super({id:p.ID,title:p.LABEL,menu:{when:K.equals("resourceScheme",Y),id:X.EditorTitle,order:0,group:"navigation"}})}async run(o,...i){const a=o.get(T),e=o.get(Q),d=o.get(k),l=o.get(N),h=o.get(L),S=o.get(x),r=a.currentEditingSession;if(!r)return;const g=[];for(const n of r.entries.get())if(n.state.get()===E.Modified){const s=n.modifiedURI,u=e.findEditors(s);if(u.length===0)continue;const m=u[0];m.editor.isDirty()&&g.push(m)}if(g.length===0)return;if(!d.getValue(c._config)){const n=l.getDefaultAgent(M.EditingSession)?.fullName;let s;if(g.length===1){const m=g[0].editor.resource;if(m){const b=S.getUriBasenameLabel(m);s=n?t("message.batched.oneFile.1","Do you want to save the changes {0} made in {1}?",n,b):t("message.batched.oneFile.2","Do you want to save the changes chat made in {0}?",b)}else s=n?t("message.batched.oneFile.3","Do you want to save the changes {0} made in 1 file?",n):t("message.batched.oneFile.4","Do you want to save the changes chat made in 1 file?")}else s=n?t("message.batched.multiFile.1","Do you want to save the changes {0} made in {1} files?",n,g.length):t("message.batched.multiFile.2","Do you want to save the changes chat made in {0} files?",g.length);const u=await h.confirm({message:s,detail:t("detail2","AI-generated changes may be incorrect and should be reviewed before saving.",n),primaryButton:t("save all","Save All"),cancelButton:t("discard","Cancel"),checkbox:{label:t("config","Always save with AI-generated changes without asking"),checked:!1}});if(!u.confirmed)return;u.checkboxChecked&&await d.updateValue(c._config,!0)}await e.save(g,{reason:B.EXPLICIT,skipSaveParticipants:!0})}}z(p);export{p as ChatEditingSaveAllAction,c as ChatEditorSaving};
