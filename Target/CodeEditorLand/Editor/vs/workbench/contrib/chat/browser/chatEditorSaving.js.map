{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatEditorSaving.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from '../../../../base/common/async.js';\nimport { Disposable, DisposableMap, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { SaveReason } from '../../../common/editor.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { ChatAgentLocation, IChatAgentService } from '../common/chatAgents.js';\nimport { IChatEditingService, IChatEditingSession, WorkingSetEntryState } from '../common/chatEditingService.js';\nimport { CHAT_CATEGORY } from './actions/chatActions.js';\n\n\nconst _storageKey = 'workbench.chat.editorSaving';\n\nexport class ChatEditorSaving extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID: string = 'workbench.chat.editorSaving';\n\n\n\tprivate readonly _sessionStore = this._store.add(new DisposableMap<IChatEditingSession>());\n\n\tconstructor(\n\t\t@IChatEditingService chatEditingService: IChatEditingService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IFilesConfigurationService private readonly _fileConfigService: IFilesConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst store = this._store.add(new DisposableStore());\n\n\t\tconst queue = new Queue();\n\n\t\tconst update = () => {\n\n\t\t\tstore.clear();\n\n\t\t\tconst alwaysAcceptOnSave = this._storageService.getBoolean(_storageKey, StorageScope.PROFILE, false);\n\t\t\tif (alwaysAcceptOnSave) {\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tstore.add(chatEditingService.onDidCreateEditingSession(e => this._handleNewEditingSession(e)));\n\t\t\tstore.add(textFileService.files.addSaveParticipant({\n\t\t\t\tparticipate: async (workingCopy, context, progress, token) => {\n\n\t\t\t\t\tif (context.reason !== SaveReason.EXPLICIT) {\n\t\t\t\t\t\t// all saves that we are concerned about are explicit\n\t\t\t\t\t\t// because we have disabled auto-save for them\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst session = chatEditingService.getEditingSession(workingCopy.resource);\n\t\t\t\t\tif (!session) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (!session.entries.get().find(e => e.state.get() === WorkingSetEntryState.Modified && e.modifiedURI.toString() === workingCopy.resource.toString())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// ensure one modal at the time\n\t\t\t\t\tawait queue.queue(async () => {\n\n\t\t\t\t\t\t// this might have changed in the meantime and there is checked again and acted upon\n\t\t\t\t\t\tconst alwaysAcceptOnSave = this._storageService.getBoolean(_storageKey, StorageScope.PROFILE, false);\n\t\t\t\t\t\tif (alwaysAcceptOnSave) {\n\t\t\t\t\t\t\tawait session.accept(workingCopy.resource);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst agentName = chatAgentService.getDefaultAgent(ChatAgentLocation.EditingSession)?.fullName;\n\t\t\t\t\t\tconst filelabel = labelService.getUriBasenameLabel(workingCopy.resource);\n\n\t\t\t\t\t\tconst message = agentName\n\t\t\t\t\t\t\t? localize('message.1', \"Do you want to accept the changes {0} made in {1}\", agentName, filelabel)\n\t\t\t\t\t\t\t: localize('message.2', \"Do you want to accept the changes chat made in {1}\", filelabel);\n\n\t\t\t\t\t\tconst result = await this._dialogService.confirm({\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tdetail: localize('detail', \"AI-generated changes may be incorect and should be reviewed before saving.\", agentName),\n\t\t\t\t\t\t\tprimaryButton: localize('save', \"Accept & Save\"),\n\t\t\t\t\t\t\tcancelButton: localize('discard', \"Discard & Save\"),\n\t\t\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\t\t\tlabel: localize('config', \"Always accept edits when saving\"),\n\t\t\t\t\t\t\t\tchecked: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (result.confirmed) {\n\t\t\t\t\t\t\tawait session.accept(workingCopy.resource);\n\n\t\t\t\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\t\t\t\t// remember choice\n\t\t\t\t\t\t\t\tthis._storageService.store(_storageKey, true, StorageScope.PROFILE, StorageTarget.USER);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait session.reject(workingCopy.resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}));\n\t\t};\n\n\t\tthis._storageService.onDidChangeValue(StorageScope.PROFILE, _storageKey, this._store)(update);\n\t\tupdate();\n\t}\n\n\tprivate _handleNewEditingSession(session: IChatEditingSession) {\n\n\t\tconst store = new DisposableStore();\n\n\t\t// disable auto save for those files involved in editing\n\t\tconst saveConfig = store.add(new MutableDisposable());\n\t\tconst update = () => {\n\t\t\tconst store = new DisposableStore();\n\t\t\tconst entries = session.entries.get();\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.state.get() === WorkingSetEntryState.Modified) {\n\t\t\t\t\tstore.add(this._fileConfigService.disableAutoSave(entry.modifiedURI));\n\t\t\t\t}\n\t\t\t}\n\t\t\tsaveConfig.value = store;\n\t\t};\n\n\t\tupdate();\n\n\t\tthis._sessionStore.set(session, store);\n\n\t\tstore.add(session.onDidChange(() => {\n\t\t\tupdate();\n\t\t}));\n\n\t\tstore.add(session.onDidDispose(() => {\n\t\t\tthis._sessionStore.deleteAndDispose(session);\n\t\t}));\n\t}\n}\n\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.resetChatEditorSaving',\n\t\t\ttitle: localize2('resetChatEditorSaving', \"Reset Choise for 'Always accept edits when saving'\"),\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tstorageService.remove(_storageKey, StorageScope.PROFILE);\n\t}\n});\n"],
  "mappings": "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",
  "names": ["alwaysAcceptOnSave", "store"]
}
