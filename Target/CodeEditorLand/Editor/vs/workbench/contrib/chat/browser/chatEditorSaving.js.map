{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatEditorSaving.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from '../../../../base/common/async.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableMap, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ServicesAccessor } from '../../../../editor/browser/editorExtensions.js';\nimport { localize } from '../../../../nls.js';\nimport { Action2, MenuId, registerAction2 } from '../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkbenchContribution } from '../../../common/contributions.js';\nimport { IEditorIdentifier, SaveReason } from '../../../common/editor.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';\nimport { ITextFileService } from '../../../services/textfile/common/textfiles.js';\nimport { ChatAgentLocation, IChatAgentService } from '../common/chatAgents.js';\nimport { CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME, IChatEditingService, IChatEditingSession, WorkingSetEntryState } from '../common/chatEditingService.js';\n\nexport class ChatEditorSaving extends Disposable implements IWorkbenchContribution {\n\n\tstatic readonly ID: string = 'workbench.chat.editorSaving';\n\n\tstatic readonly _config = 'chat.editing.alwaysSaveWithGeneratedChanges';\n\n\tprivate readonly _sessionStore = this._store.add(new DisposableMap<IChatEditingSession>());\n\n\tconstructor(\n\t\t@IConfigurationService configService: IConfigurationService,\n\t\t@IChatEditingService chatEditingService: IChatEditingService,\n\t\t@IChatAgentService chatAgentService: IChatAgentService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IFilesConfigurationService private readonly _fileConfigService: IFilesConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst store = this._store.add(new DisposableStore());\n\n\t\tconst queue = new Queue();\n\n\t\tconst update = () => {\n\n\t\t\tstore.clear();\n\n\t\t\tconst alwaysSave = configService.getValue<boolean>(ChatEditorSaving._config);\n\t\t\tif (alwaysSave) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (chatEditingService.currentEditingSession) {\n\t\t\t\tthis._handleNewEditingSession(chatEditingService.currentEditingSession, store);\n\t\t\t}\n\n\t\t\tstore.add(chatEditingService.onDidCreateEditingSession(e => this._handleNewEditingSession(e, store)));\n\t\t\tstore.add(textFileService.files.addSaveParticipant({\n\t\t\t\tparticipate: async (workingCopy, context, progress, token) => {\n\n\t\t\t\t\tif (context.reason !== SaveReason.EXPLICIT) {\n\t\t\t\t\t\t// all saves that we are concerned about are explicit\n\t\t\t\t\t\t// because we have disabled auto-save for them\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst session = chatEditingService.getEditingSession(workingCopy.resource);\n\t\t\t\t\tif (!session) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (!session.entries.get().find(e => e.state.get() === WorkingSetEntryState.Modified && e.modifiedURI.toString() === workingCopy.resource.toString())) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// ensure one modal at the time\n\t\t\t\t\tawait queue.queue(async () => {\n\n\t\t\t\t\t\t// this might have changed in the meantime and there is checked again and acted upon\n\t\t\t\t\t\tconst alwaysSave = configService.getValue<boolean>(ChatEditorSaving._config);\n\t\t\t\t\t\tif (alwaysSave) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst agentName = chatAgentService.getDefaultAgent(ChatAgentLocation.EditingSession)?.fullName;\n\t\t\t\t\t\tconst filelabel = labelService.getUriBasenameLabel(workingCopy.resource);\n\n\t\t\t\t\t\tconst message = agentName\n\t\t\t\t\t\t\t? localize('message.1', \"Do you want to save the changes {0} made in {1}?\", agentName, filelabel)\n\t\t\t\t\t\t\t: localize('message.2', \"Do you want to save the changes chat made in {0}?\", filelabel);\n\n\t\t\t\t\t\tconst result = await this._dialogService.confirm({\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\tdetail: localize('detail2', \"AI-generated changes may be incorrect and should be reviewed before saving.\", agentName),\n\t\t\t\t\t\t\tprimaryButton: localize('save', \"Save\"),\n\t\t\t\t\t\t\tcancelButton: localize('discard', \"Cancel\"),\n\t\t\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\t\t\tlabel: localize('config', \"Always save with AI-generated changes without asking\"),\n\t\t\t\t\t\t\t\tchecked: false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!result.confirmed) {\n\t\t\t\t\t\t\t// cancel the save\n\t\t\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\t\t\t// remember choice\n\t\t\t\t\t\t\tawait configService.updateValue(ChatEditorSaving._config, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}));\n\t\t};\n\n\t\tconfigService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(ChatEditorSaving._config)) {\n\t\t\t\tupdate();\n\t\t\t}\n\t\t});\n\t\tupdate();\n\t}\n\n\tprivate _handleNewEditingSession(session: IChatEditingSession, container: DisposableStore) {\n\n\t\tconst store = new DisposableStore();\n\t\tcontainer.add(store);\n\n\t\t// disable auto save for those files involved in editing\n\t\tconst saveConfig = store.add(new MutableDisposable());\n\t\tconst update = () => {\n\t\t\tconst store = new DisposableStore();\n\t\t\tconst entries = session.entries.get();\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (entry.state.get() === WorkingSetEntryState.Modified) {\n\t\t\t\t\tstore.add(this._fileConfigService.disableAutoSave(entry.modifiedURI));\n\t\t\t\t}\n\t\t\t}\n\t\t\tsaveConfig.value = store;\n\t\t};\n\n\t\tupdate();\n\n\t\tthis._sessionStore.set(session, store);\n\n\t\tstore.add(session.onDidChange(() => {\n\t\t\tupdate();\n\t\t}));\n\n\t\tstore.add(session.onDidDispose(() => {\n\t\t\tstore.dispose();\n\t\t\tcontainer.delete(store);\n\t\t}));\n\t}\n}\n\nexport class ChatEditingSaveAllAction extends Action2 {\n\tstatic readonly ID = 'chatEditing.saveAllFiles';\n\tstatic readonly LABEL = localize('save.allFiles', 'Save All');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ChatEditingSaveAllAction.ID,\n\t\t\ttitle: ChatEditingSaveAllAction.LABEL,\n\t\t\tmenu: {\n\t\t\t\twhen: ContextKeyExpr.equals('resourceScheme', CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME),\n\t\t\t\tid: MenuId.EditorTitle,\n\t\t\t\torder: 0,\n\t\t\t\tgroup: 'navigation',\n\t\t\t},\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst chatEditingService = accessor.get(IChatEditingService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst configService = accessor.get(IConfigurationService);\n\t\tconst chatAgentService = accessor.get(IChatAgentService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst labelService = accessor.get(ILabelService);\n\n\t\tconst currentEditingSession = chatEditingService.currentEditingSession;\n\t\tif (!currentEditingSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editors: IEditorIdentifier[] = [];\n\t\tfor (const modifiedFileEntry of currentEditingSession.entries.get()) {\n\t\t\tif (modifiedFileEntry.state.get() === WorkingSetEntryState.Modified) {\n\t\t\t\tconst modifiedFile = modifiedFileEntry.modifiedURI;\n\t\t\t\tconst matchingEditors = editorService.findEditors(modifiedFile);\n\t\t\t\tif (matchingEditors.length === 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst matchingEditor = matchingEditors[0];\n\t\t\t\tif (matchingEditor.editor.isDirty()) {\n\t\t\t\t\teditors.push(matchingEditor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (editors.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst alwaysSave = configService.getValue<boolean>(ChatEditorSaving._config);\n\t\tif (!alwaysSave) {\n\t\t\tconst agentName = chatAgentService.getDefaultAgent(ChatAgentLocation.EditingSession)?.fullName;\n\n\t\t\tlet message: string;\n\t\t\tif (editors.length === 1) {\n\t\t\t\tconst resource = editors[0].editor.resource;\n\t\t\t\tif (resource) {\n\t\t\t\t\tconst filelabel = labelService.getUriBasenameLabel(resource);\n\t\t\t\t\tmessage = agentName\n\t\t\t\t\t\t? localize('message.batched.oneFile.1', \"Do you want to save the changes {0} made in {1}?\", agentName, filelabel)\n\t\t\t\t\t\t: localize('message.batched.oneFile.2', \"Do you want to save the changes chat made in {0}?\", filelabel);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = agentName\n\t\t\t\t\t\t? localize('message.batched.oneFile.3', \"Do you want to save the changes {0} made in 1 file?\", agentName)\n\t\t\t\t\t\t: localize('message.batched.oneFile.4', \"Do you want to save the changes chat made in 1 file?\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmessage = agentName\n\t\t\t\t\t? localize('message.batched.multiFile.1', \"Do you want to save the changes {0} made in {1} files?\", agentName, editors.length)\n\t\t\t\t\t: localize('message.batched.multiFile.2', \"Do you want to save the changes chat made in {0} files?\", editors.length);\n\t\t\t}\n\n\n\t\t\tconst result = await dialogService.confirm({\n\t\t\t\tmessage,\n\t\t\t\tdetail: localize('detail2', \"AI-generated changes may be incorrect and should be reviewed before saving.\", agentName),\n\t\t\t\tprimaryButton: localize('save all', \"Save All\"),\n\t\t\t\tcancelButton: localize('discard', \"Cancel\"),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('config', \"Always save with AI-generated changes without asking\"),\n\t\t\t\t\tchecked: false\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tawait configService.updateValue(ChatEditorSaving._config, true);\n\t\t\t}\n\t\t}\n\n\t\t// Skip our own chat editing save blocking participant, since we already showed our own batched dialog\n\t\tawait editorService.save(editors, { reason: SaveReason.EXPLICIT, skipSaveParticipants: true });\n\t}\n}\nregisterAction2(ChatEditingSaveAllAction);\n"],
  "mappings": "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",
  "names": ["alwaysSave", "store"]
}
