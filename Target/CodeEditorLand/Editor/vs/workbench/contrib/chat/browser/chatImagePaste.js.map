{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatImagePaste.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IChatRequestVariableEntry } from '../common/chatModel.js';\nimport { ChatInputPart } from './chatInputPart.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nexport class ChatImageDropAndPaste extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly inputPart: ChatInputPart,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._register(this.inputPart.inputEditor.onDidPaste((e) => {\n\t\t\tif (this.configurationService.getValue<boolean>('chat.experimental.imageAttachments')) {\n\t\t\t\tthis._handlePaste();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _handlePaste(): Promise<void> {\n\t\tconst currClipboard = await this.clipboardService.readImage();\n\n\t\tif (!currClipboard || !isImage(currClipboard)) {\n\t\t\treturn;\n\t\t}\n\t\tconst context = await getImageAttachContext(currClipboard);\n\t\tif (!context) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentContextIds = this.inputPart.attachmentModel.getAttachmentIDs();\n\t\tconst filteredContext = [];\n\n\t\tif (!currentContextIds.has(context.id)) {\n\t\t\tcurrentContextIds.add(context.id);\n\t\t\tfilteredContext.push(context);\n\t\t}\n\n\t\tthis.inputPart.attachmentModel.addContext(...filteredContext);\n\t}\n}\n\nasync function getImageAttachContext(data: Uint8Array): Promise<IChatRequestVariableEntry> {\n\treturn {\n\t\tvalue: data,\n\t\tid: await imageToHash(data),\n\t\tname: localize('pastedImage', 'Pasted Image'),\n\t\tisImage: true,\n\t\ticon: Codicon.fileMedia,\n\t\tisDynamic: true,\n\t};\n}\n\nexport async function imageToHash(data: Uint8Array): Promise<string> {\n\tconst hashBuffer = await crypto.subtle.digest('SHA-256', data);\n\tconst hashArray = Array.from(new Uint8Array(hashBuffer));\n\treturn hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nexport function isImage(array: Uint8Array): boolean {\n\tif (array.length < 4) {\n\t\treturn false;\n\t}\n\n\t// Magic numbers (identification bytes) for various image formats\n\tconst identifier: { [key: string]: number[] } = {\n\t\tpng: [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A],\n\t\tjpeg: [0xFF, 0xD8, 0xFF],\n\t\tbmp: [0x42, 0x4D],\n\t\tgif: [0x47, 0x49, 0x46, 0x38],\n\t\ttiff: [0x49, 0x49, 0x2A, 0x00]\n\t};\n\n\treturn Object.values(identifier).some((signature) =>\n\t\tsignature.every((byte, index) => array[index] === byte)\n\t);\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAS,yBAAyB;AAClC,SAAS,iCAAiC;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,6BAA6B;AAE/B,IAAM,wBAAN,cAAoC,WAAW;AAAA,EAErD,YACkB,WACmB,kBACI,sBACvC;AACD,UAAM;AAJW;AACmB;AACI;AAGxC,SAAK,UAAU,KAAK,UAAU,YAAY,WAAW,CAAC,MAAM;AAC3D,UAAI,KAAK,qBAAqB,SAAkB,oCAAoC,GAAG;AACtF,aAAK,aAAa;AAAA,MACnB;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AAAA,EA1BD,OAasD;AAAA;AAAA;AAAA,EAerD,MAAc,eAA8B;AAC3C,UAAM,gBAAgB,MAAM,KAAK,iBAAiB,UAAU;AAE5D,QAAI,CAAC,iBAAiB,CAAC,QAAQ,aAAa,GAAG;AAC9C;AAAA,IACD;AACA,UAAM,UAAU,MAAM,sBAAsB,aAAa;AACzD,QAAI,CAAC,SAAS;AACb;AAAA,IACD;AAEA,UAAM,oBAAoB,KAAK,UAAU,gBAAgB,iBAAiB;AAC1E,UAAM,kBAAkB,CAAC;AAEzB,QAAI,CAAC,kBAAkB,IAAI,QAAQ,EAAE,GAAG;AACvC,wBAAkB,IAAI,QAAQ,EAAE;AAChC,sBAAgB,KAAK,OAAO;AAAA,IAC7B;AAEA,SAAK,UAAU,gBAAgB,WAAW,GAAG,eAAe;AAAA,EAC7D;AACD;AApCa,wBAAN;AAAA,EAIJ;AAAA,EACA;AAAA,GALU;AAsCb,eAAe,sBAAsB,MAAsD;AAC1F,SAAO;AAAA,IACN,OAAO;AAAA,IACP,IAAI,MAAM,YAAY,IAAI;AAAA,IAC1B,MAAM,SAAS,eAAe,cAAc;AAAA,IAC5C,SAAS;AAAA,IACT,MAAM,QAAQ;AAAA,IACd,WAAW;AAAA,EACZ;AACD;AATe;AAWf,eAAsB,YAAY,MAAmC;AACpE,QAAM,aAAa,MAAM,OAAO,OAAO,OAAO,WAAW,IAAI;AAC7D,QAAM,YAAY,MAAM,KAAK,IAAI,WAAW,UAAU,CAAC;AACvD,SAAO,UAAU,IAAI,OAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EAAE,KAAK,EAAE;AACnE;AAJsB;AAMf,SAAS,QAAQ,OAA4B;AACnD,MAAI,MAAM,SAAS,GAAG;AACrB,WAAO;AAAA,EACR;AAGA,QAAM,aAA0C;AAAA,IAC/C,KAAK,CAAC,KAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAI;AAAA,IACpD,MAAM,CAAC,KAAM,KAAM,GAAI;AAAA,IACvB,KAAK,CAAC,IAAM,EAAI;AAAA,IAChB,KAAK,CAAC,IAAM,IAAM,IAAM,EAAI;AAAA,IAC5B,MAAM,CAAC,IAAM,IAAM,IAAM,CAAI;AAAA,EAC9B;AAEA,SAAO,OAAO,OAAO,UAAU,EAAE;AAAA,IAAK,CAAC,cACtC,UAAU,MAAM,CAAC,MAAM,UAAU,MAAM,KAAK,MAAM,IAAI;AAAA,EACvD;AACD;AAjBgB;",
  "names": []
}
