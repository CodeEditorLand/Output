var N=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var g=(s,t,a,e)=>{for(var i=e>1?void 0:e?P(t,a):t,o=s.length-1,r;o>=0;o--)(r=s[o])&&(i=(e?r(t,a,i):r(i))||i);return e&&i&&N(t,a,i),i},d=(s,t)=>(a,e)=>t(a,e,s);import{coalesce as R,isNonEmptyArray as _}from"../../../../base/common/arrays.js";import{Codicon as C}from"../../../../base/common/codicons.js";import{toErrorMessage as T}from"../../../../base/common/errorMessage.js";import{Event as k}from"../../../../base/common/event.js";import{Disposable as q,DisposableMap as W,DisposableStore as $,toDisposable as y}from"../../../../base/common/lifecycle.js";import*as b from"../../../../base/common/strings.js";import{localize as n,localize2 as v}from"../../../../nls.js";import{ContextKeyExpr as O,IContextKeyService as G}from"../../../../platform/contextkey/common/contextkey.js";import"../../../../platform/extensions/common/extensions.js";import{SyncDescriptor as h}from"../../../../platform/instantiation/common/descriptors.js";import{ILogService as H}from"../../../../platform/log/common/log.js";import{IProductService as L}from"../../../../platform/product/common/productService.js";import{Registry as p}from"../../../../platform/registry/common/platform.js";import{ViewPaneContainer as I}from"../../../browser/parts/views/viewPaneContainer.js";import"../../../common/contributions.js";import{ViewContainerLocation as D,Extensions as m}from"../../../common/views.js";import{isProposedApiEnabled as x}from"../../../services/extensions/common/extensions.js";import*as M from"../../../services/extensions/common/extensionsRegistry.js";import{showExtensionsWithIdsCommandId as j}from"../../extensions/browser/extensionsActions.js";import{IExtensionsWorkbenchService as B}from"../../extensions/common/extensions.js";import{ChatAgentLocation as f,IChatAgentService as K}from"../common/chatAgents.js";import{CONTEXT_CHAT_EDITING_PARTICIPANT_REGISTERED as U,CONTEXT_CHAT_EXTENSION_INVALID as w,CONTEXT_CHAT_PANEL_PARTICIPANT_REGISTERED as X}from"../common/chatContextKeys.js";import"../common/chatParticipantContribTypes.js";import{CHAT_VIEW_ID as V}from"./chat.js";import{CHAT_EDITING_SIDEBAR_PANEL_ID as F,CHAT_SIDEBAR_PANEL_ID as z,ChatViewPane as E}from"./chatViewPane.js";const J=M.ExtensionsRegistry.registerExtensionPoint({extensionPoint:"chatParticipants",jsonSchema:{description:n("vscode.extension.contributes.chatParticipant","Contributes a chat participant"),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name","id"],properties:{id:{description:n("chatParticipantId","A unique id for this chat participant."),type:"string"},name:{description:n("chatParticipantName","User-facing name for this chat participant. The user will use '@' with this name to invoke the participant. Name must not contain whitespace."),type:"string",pattern:"^[\\w-]+$"},fullName:{markdownDescription:n("chatParticipantFullName","The full name of this chat participant, which is shown as the label for responses coming from this participant. If not provided, {0} is used.","`name`"),type:"string"},description:{description:n("chatParticipantDescription","A description of this chat participant, shown in the UI."),type:"string"},isSticky:{description:n("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},sampleRequest:{description:n("chatSampleRequest","When the user clicks this participant in `/help`, this text will be submitted to the participant."),type:"string"},when:{description:n("chatParticipantWhen","A condition which must be true to enable this participant."),type:"string"},disambiguation:{description:n("chatParticipantDisambiguation","Metadata to help with automatically routing user questions to this chat participant."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:n("chatParticipantDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:n("chatParticipantDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat participant."),type:"string"},examples:{description:n("chatParticipantDisambiguationExamples","A list of representative example questions that are suitable for this chat participant."),type:"array"}}}},commands:{markdownDescription:n("chatCommandsDescription","Commands available for this chat participant, which the user can invoke with a `/`."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{name:"",description:""}}],required:["name"],properties:{name:{description:n("chatCommand","A short name by which this command is referred to in the UI, e.g. `fix` or * `explain` for commands that fix an issue or explain code. The name should be unique among the commands provided by this participant."),type:"string"},description:{description:n("chatCommandDescription","A description of this command."),type:"string"},when:{description:n("chatCommandWhen","A condition which must be true to enable this command."),type:"string"},sampleRequest:{description:n("chatCommandSampleRequest","When the user clicks this command in `/help`, this text will be submitted to the participant."),type:"string"},isSticky:{description:n("chatCommandSticky","Whether invoking the command puts the chat into a persistent mode, where the command is automatically added to the chat input for the next message."),type:"boolean"},disambiguation:{description:n("chatCommandDisambiguation","Metadata to help with automatically routing user questions to this chat command."),type:"array",items:{additionalProperties:!1,type:"object",defaultSnippets:[{body:{category:"",description:"",examples:[]}}],required:["category","description","examples"],properties:{category:{markdownDescription:n("chatCommandDisambiguationCategory","A detailed name for this category, e.g. `workspace_questions` or `web_questions`."),type:"string"},description:{description:n("chatCommandDisambiguationDescription","A detailed description of the kinds of questions that are suitable for this chat command."),type:"string"},examples:{description:n("chatCommandDisambiguationExamples","A list of representative example questions that are suitable for this chat command."),type:"array"}}}}}}}}}},activationEventsGenerator:(s,t)=>{for(const a of s)t.push(`onChatParticipant:${a.id}`)}});let l=class{constructor(t,a){this._chatAgentService=t;this.logService=a;this._viewContainer=this.registerViewContainer(),this.registerDefaultParticipantView(),this.registerChatEditingView(),this.handleAndRegisterChatExtensions()}static ID="workbench.contrib.chatExtensionPointHandler";_viewContainer;_participantRegistrationDisposables=new W;handleAndRegisterChatExtensions(){J.setHandler((t,a)=>{for(const e of a.added)for(const i of e.value){if(!i.name?.match(/^[\w-]+$/)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with invalid name: ${i.name}. Name must match /^[\\w-]+$/.`);continue}if(i.fullName&&b.AmbiguousCharacters.getInstance(new Set).containsAmbiguousCharacter(i.fullName)){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains ambiguous characters: ${i.fullName}.`);continue}if(i.fullName&&b.InvisibleCharacters.containsInvisibleCharacter(i.fullName.replace(/ /g,""))){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant with fullName that contains invisible characters: ${i.fullName}.`);continue}if(i.isDefault&&!x(e.description,"defaultChatParticipant")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: defaultChatParticipant.`);continue}if((i.defaultImplicitVariables||i.locations)&&!x(e.description,"chatParticipantAdditions")){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT use API proposal: chatParticipantAdditions.`);continue}if(!i.id||!i.name){this.logService.error(`Extension '${e.description.identifier.value}' CANNOT register participant without both id and name.`);continue}const o=[];if(i.disambiguation?.length&&o.push(...i.disambiguation.map(r=>({...r,category:r.category??r.categoryName}))),i.commands)for(const r of i.commands)r.disambiguation?.length&&o.push(...r.disambiguation.map(c=>({...c,category:c.category??c.categoryName})));try{const r=new $;r.add(this._chatAgentService.registerAgent(i.id,{extensionId:e.description.identifier,publisherDisplayName:e.description.publisherDisplayName??e.description.publisher,extensionPublisherId:e.description.publisher,extensionDisplayName:e.description.displayName??e.description.name,id:i.id,description:i.description,when:i.when,metadata:{isSticky:i.isSticky,sampleRequest:i.sampleRequest},name:i.name,fullName:i.fullName,isDefault:i.isDefault,locations:_(i.locations)?i.locations.map(f.fromRaw):[f.Panel],slashCommands:i.commands??[],disambiguation:R(o.flat())})),this._participantRegistrationDisposables.set(A(e.description.identifier,i.id),r)}catch(r){this.logService.error(`Failed to register participant ${i.id}: ${T(r,!0)}`)}}for(const e of a.removed)for(const i of e.value)this._participantRegistrationDisposables.deleteAndDispose(A(e.description.identifier,i.id))})}registerViewContainer(){const t=v("chat.viewContainer.label","Chat"),a=C.commentDiscussion,e=z;return p.as(m.ViewContainersRegistry).registerViewContainer({id:e,title:t,icon:a,ctorDescriptor:new h(I,[e,{mergeViewWithContainerWhenSingleView:!0}]),storageId:e,hideIfEmpty:!0,order:100},D.Sidebar)}registerDefaultParticipantView(){const t="GitHub Copilot",a=[{id:V,containerIcon:this._viewContainer.icon,containerTitle:this._viewContainer.title.value,singleViewPaneContainerTitle:this._viewContainer.title.value,name:{value:t,original:t},canToggleVisibility:!1,canMoveView:!0,ctorDescriptor:new h(E),when:O.or(X,w)}];return p.as(m.ViewsRegistry).registerViews(a,this._viewContainer),y(()=>{p.as(m.ViewsRegistry).deregisterViews(a,this._viewContainer)})}registerChatEditingView(){const t=v("chatEditing.viewContainer.label","Copilot Edits"),a=C.requestChanges,e=F,i=p.as(m.ViewContainersRegistry).registerViewContainer({id:e,title:t,icon:a,ctorDescriptor:new h(I,[e,{mergeViewWithContainerWhenSingleView:!0}]),storageId:e,hideIfEmpty:!0,order:100},D.AuxiliaryBar),o="workbench.panel.chat.view.edits",r=[{id:o,containerIcon:i.icon,containerTitle:t.value,singleViewPaneContainerTitle:t.value,name:{value:t.value,original:t.value},canToggleVisibility:!1,canMoveView:!0,ctorDescriptor:new h(E,[{id:o,title:t.value},{location:f.EditingSession}]),when:U}];return p.as(m.ViewsRegistry).registerViews(r,i),y(()=>{p.as(m.ViewContainersRegistry).deregisterViewContainer(i),p.as(m.ViewsRegistry).deregisterViews(r,i)})}};l=g([d(0,K),d(1,H)],l);function A(s,t){return`${s.value}_${t}`}let u=class extends q{constructor(a,e,i){super();this.productService=i;const o=w.bindTo(e);this._register(k.runAndSubscribe(a.onDidChangeExtensionsNotification,()=>{const c=a.getExtensionsNotification()?.extensions.find(S=>S.identifier.id==="github.copilot-chat");c?(o.set(!0),this.registerWelcomeView(c)):o.set(!1)}))}static ID="workbench.contrib.chatCompatNotifier";registeredWelcomeView=!1;registerWelcomeView(a){if(this.registeredWelcomeView)return;this.registeredWelcomeView=!0;const e=n("showExtension","Show Extension"),i=n("chatFailErrorMessage","Chat failed to load because the installed version of the {0} extension is not compatible with this version of {1}. Please ensure that the GitHub Copilot Chat extension is up to date.","GitHub Copilot Chat",this.productService.nameLong),o=`[${e}](command:${j}?${encodeURIComponent(JSON.stringify([["GitHub.copilot-chat"]]))})`,r=`GitHub Copilot Chat version: ${a.version}`,c=p.as(m.ViewsRegistry);this._register(c.registerViewWelcomeContent(V,{content:[i,o,r].join(`

`),when:w}))}};u=g([d(0,B),d(1,G),d(2,L)],u);export{u as ChatCompatibilityNotifier,l as ChatExtensionPointHandler};
