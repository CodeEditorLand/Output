{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatPasteProviders.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDataTransferItem, IReadonlyVSDataTransfer } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { IRange } from '../../../../editor/common/core/range.js';\nimport { DocumentPasteContext, DocumentPasteEditProvider, DocumentPasteEditsSession } from '../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { ILanguageFeaturesService } from '../../../../editor/common/services/languageFeatures.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ChatInputPart } from './chatInputPart.js';\nimport { IChatWidgetService } from './chat.js';\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { localize } from '../../../../nls.js';\nimport { IChatRequestVariableEntry } from '../common/chatModel.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nexport class PasteImageProvider implements DocumentPasteEditProvider {\n\n\tpublic readonly kind = new HierarchicalKind('image');\n\n\tpublic readonly pasteMimeTypes = ['image/*'];\n\tconstructor(\n\t\tprivate readonly chatWidgetService: IChatWidgetService,\n\t\tprivate readonly configurationService: IConfigurationService\n\t) { }\n\n\tasync provideDocumentPasteEdits(_model: ITextModel, _ranges: readonly IRange[], dataTransfer: IReadonlyVSDataTransfer, context: DocumentPasteContext, token: CancellationToken): Promise<DocumentPasteEditsSession | undefined> {\n\t\tif (!this.configurationService.getValue<boolean>('chat.experimental.imageAttachments')) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportedMimeTypes = [\n\t\t\t'image/png',\n\t\t\t'image/jpeg',\n\t\t\t'image/jpg',\n\t\t\t'image/bmp',\n\t\t\t'image/gif',\n\t\t\t'image/tiff'\n\t\t];\n\n\t\tlet mimeType: string | undefined;\n\t\tlet imageItem: IDataTransferItem | undefined;\n\n\t\t// Find the first matching image type in the dataTransfer\n\t\tfor (const type of supportedMimeTypes) {\n\t\t\timageItem = dataTransfer.get(type);\n\t\t\tif (imageItem) {\n\t\t\t\tmimeType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!imageItem || !mimeType) {\n\t\t\treturn;\n\t\t}\n\t\tconst currClipboard = await imageItem.asFile()?.data();\n\t\tif (token.isCancellationRequested || !currClipboard) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst widget = this.chatWidgetService.getWidgetByInputUri(_model.uri);\n\t\tif (!widget) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attachedVariables = widget.attachmentModel.attachments;\n\t\tconst displayName = localize('pastedImageName', 'Pasted Image');\n\t\tlet tempDisplayName = displayName;\n\n\t\tfor (let appendValue = 2; attachedVariables.some(attachment => attachment.name === tempDisplayName); appendValue++) {\n\t\t\ttempDisplayName = `${displayName} ${appendValue}`;\n\t\t}\n\n\t\tconst imageContext = await getImageAttachContext(currClipboard, mimeType, token, tempDisplayName);\n\n\t\tif (token.isCancellationRequested || !imageContext) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure to attach only new contexts\n\t\tconst currentContextIds = widget.attachmentModel.getAttachmentIDs();\n\t\tif (currentContextIds.has(imageContext.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\twidget.attachmentModel.addContext(imageContext);\n\n\t\treturn;\n\t}\n}\n\nasync function getImageAttachContext(data: Uint8Array, mimeType: string, token: CancellationToken, displayName: string): Promise<IChatRequestVariableEntry | undefined> {\n\tconst imageHash = await imageToHash(data);\n\tif (token.isCancellationRequested) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tvalue: data,\n\t\tid: imageHash,\n\t\tname: displayName,\n\t\tisImage: true,\n\t\ticon: Codicon.fileMedia,\n\t\tisDynamic: true,\n\t\tisFile: false,\n\t\tmimeType\n\t};\n}\n\nexport async function imageToHash(data: Uint8Array): Promise<string> {\n\tconst hashBuffer = await crypto.subtle.digest('SHA-256', data);\n\tconst hashArray = Array.from(new Uint8Array(hashBuffer));\n\treturn hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nexport function isImage(array: Uint8Array): boolean {\n\tif (array.length < 4) {\n\t\treturn false;\n\t}\n\n\t// Magic numbers (identification bytes) for various image formats\n\tconst identifier: { [key: string]: number[] } = {\n\t\tpng: [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A],\n\t\tjpeg: [0xFF, 0xD8, 0xFF],\n\t\tbmp: [0x42, 0x4D],\n\t\tgif: [0x47, 0x49, 0x46, 0x38],\n\t\ttiff: [0x49, 0x49, 0x2A, 0x00]\n\t};\n\n\treturn Object.values(identifier).some((signature) =>\n\t\tsignature.every((byte, index) => array[index] === byte)\n\t);\n}\n\nexport class ChatPasteProvidersFeature extends Disposable {\n\tconstructor(\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t\t@IChatWidgetService chatWidgetService: IChatWidgetService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._register(languageFeaturesService.documentPasteEditProvider.register({ scheme: ChatInputPart.INPUT_SCHEME, pattern: '*', hasAccessToAllModels: true }, new PasteImageProvider(chatWidgetService, configurationService)));\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
