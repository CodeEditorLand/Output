var y=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var g=(d,a,r,t)=>{for(var o=t>1?void 0:t?w(a,r):a,n=d.length-1,i;n>=0;n--)(i=d[n])&&(o=(t?i(a,r,o):i(o))||o);return t&&o&&y(a,r,o),o},b=(d,a)=>(r,t)=>a(r,t,d);import{coalesce as I}from"../../../../base/common/arrays.js";import"../../../../base/common/cancellation.js";import{onUnexpectedExternalError as v}from"../../../../base/common/errors.js";import{Iterable as V}from"../../../../base/common/iterator.js";import{toDisposable as D}from"../../../../base/common/lifecycle.js";import{ThemeIcon as p}from"../../../../base/common/themables.js";import{URI as P}from"../../../../base/common/uri.js";import"../../../../editor/common/languages.js";import{IViewsService as q}from"../../../services/views/common/viewsService.js";import{ChatAgentLocation as R}from"../common/chatAgents.js";import"../common/chatModel.js";import{ChatRequestDynamicVariablePart as L,ChatRequestToolPart as _,ChatRequestVariablePart as E}from"../common/chatParserTypes.js";import"../common/chatService.js";import"../common/chatVariables.js";import{IChatWidgetService as N,showChatView as S}from"./chat.js";import{ChatDynamicVariableModel as x}from"./contrib/chatDynamicVariables.js";let C=class{constructor(a,r){this.chatWidgetService=a;this.viewsService=r}_resolver=new Map;async resolveVariables(a,r,t,o,n){let i=[];const h=[];a.parts.forEach((e,c)=>{if(e instanceof E){const l=this._resolver.get(e.variableName.toLowerCase());if(l){const m=[],u=s=>{if(s.kind==="reference"){m.push(s);return}o(s)};h.push(l.resolver(a.text,e.variableArg,t,u,n).then(s=>{s&&(i[c]={id:l.data.id,modelDescription:l.data.modelDescription,name:e.variableName,range:e.range,value:s,references:m,fullName:l.data.fullName,icon:l.data.icon})}).catch(v))}}else e instanceof L?i[c]={id:e.id,name:e.referenceText,range:e.range,value:e.data,fullName:e.fullName,icon:e.icon}:e instanceof _&&(i[c]={id:e.toolId,name:e.toolName,range:e.range,value:void 0,isTool:!0,icon:p.isThemeIcon(e.icon)?e.icon:void 0,fullName:e.displayName})});const f=[];return r?.forEach((e,c)=>{const l=this._resolver.get(e.name?.toLowerCase());if(l){const m=[],u=s=>{if(s.kind==="reference"){m.push(s);return}o(s)};h.push(l.resolver(a.text,"",t,u,n).then(s=>{s&&(f[c]={id:l.data.id,modelDescription:l.data.modelDescription,name:e.name,fullName:e.fullName,range:e.range,value:s,references:m,icon:e.icon})}).catch(v))}else(e.isDynamic||e.isTool)&&(f[c]=e)}),await Promise.allSettled(h),i=I(i),i.sort((e,c)=>c.range.start-e.range.start),i.push(...I(f)),{variables:i}}async resolveVariable(a,r,t,o,n){const i=this._resolver.get(a.toLowerCase());if(i)return await i.resolver(r,void 0,t,o,n)}hasVariable(a){return this._resolver.has(a.toLowerCase())}getVariable(a){return this._resolver.get(a.toLowerCase())?.data}getVariables(a){const r=V.map(this._resolver.values(),t=>t.data);return V.filter(r,t=>a!==R.Editor||!new Set(["selection","editor"]).has(t.name))}getDynamicVariables(a){const r=this.chatWidgetService.getWidgetBySessionId(a);if(!r||!r.viewModel||!r.supportsFileReferences)return[];const t=r.getContrib(x.ID);return t?t.variables:[]}registerVariable(a,r){const t=a.name.toLowerCase();if(this._resolver.has(t))throw new Error(`A chat variable with the name '${a.name}' already exists.`);return this._resolver.set(t,{data:a,resolver:r}),D(()=>{this._resolver.delete(t)})}async attachContext(a,r,t){if(t!==R.Panel)return;const o=this.chatWidgetService.lastFocusedWidget??await S(this.viewsService);if(!o||!o.viewModel)return;const n=a.toLowerCase();if(n==="file"&&typeof r!="string"){const h=P.isUri(r)?r:r.uri,f="range"in r?r.range:void 0;o.attachmentModel.addFile(h,f);return}const i=this._resolver.get(n);i&&o.attachmentModel.addContext({...i.data,value:r})}};C=g([b(0,N),b(1,q)],C);export{C as ChatVariablesService};
