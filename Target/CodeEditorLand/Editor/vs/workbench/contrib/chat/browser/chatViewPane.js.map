{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/chatViewPane.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { MarshalledId } from '../../../../base/common/marshallingIds.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../../platform/instantiation/common/serviceCollection.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IOpenerService } from '../../../../platform/opener/common/opener.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { editorBackground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IViewPaneOptions, ViewPane } from '../../../browser/parts/views/viewPane.js';\nimport { Memento } from '../../../common/memento.js';\nimport { SIDE_BAR_FOREGROUND } from '../../../common/theme.js';\nimport { IViewDescriptorService } from '../../../common/views.js';\nimport { IChatViewTitleActionContext } from '../common/chatActions.js';\nimport { ChatAgentLocation, IChatAgentService } from '../common/chatAgents.js';\nimport { ChatModelInitState, IChatModel } from '../common/chatModel.js';\nimport { CHAT_PROVIDER_ID } from '../common/chatParticipantContribTypes.js';\nimport { IChatService } from '../common/chatService.js';\nimport { ChatWidget, IChatViewState } from './chatWidget.js';\nimport { ChatViewWelcomeController, IViewWelcomeDelegate } from './viewsWelcome/chatViewWelcomeController.js';\n\ninterface IViewPaneState extends IChatViewState {\n\tsessionId?: string;\n}\n\nexport const CHAT_SIDEBAR_PANEL_ID = 'workbench.panel.chatSidebar';\nexport const CHAT_EDITING_SIDEBAR_PANEL_ID = 'workbench.panel.chatEditing';\nexport class ChatViewPane extends ViewPane implements IViewWelcomeDelegate {\n\tprivate _widget!: ChatWidget;\n\tget widget(): ChatWidget { return this._widget; }\n\n\tprivate readonly modelDisposables = this._register(new DisposableStore());\n\tprivate memento: Memento;\n\tprivate readonly viewState: IViewPaneState;\n\tprivate defaultParticipantRegistrationFailed = false;\n\tprivate didUnregisterProvider = false;\n\n\tconstructor(\n\t\toptions: IViewPaneOptions,\n\t\tprivate readonly chatOptions: { location: ChatAgentLocation.Panel | ChatAgentLocation.EditingSession } = { location: ChatAgentLocation.Panel },\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IHoverService hoverService: IHoverService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);\n\n\t\t// View state for the ViewPane is currently global per-provider basically, but some other strictly per-model state will require a separate memento.\n\t\tthis.memento = new Memento('interactive-session-view-' + CHAT_PROVIDER_ID + (this.chatOptions.location === ChatAgentLocation.EditingSession ? `-edits` : ''), this.storageService);\n\t\tthis.viewState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IViewPaneState;\n\t\tthis._register(this.chatAgentService.onDidChangeAgents(() => {\n\t\t\tif (this.chatAgentService.getDefaultAgent(this.chatOptions?.location)) {\n\t\t\t\tif (!this._widget?.viewModel) {\n\t\t\t\t\tconst sessionId = this.getSessionId();\n\t\t\t\t\tconst model = sessionId ? this.chatService.getOrRestoreSession(sessionId) : undefined;\n\n\t\t\t\t\t// The widget may be hidden at this point, because welcome views were allowed. Use setVisible to\n\t\t\t\t\t// avoid doing a render while the widget is hidden. This is changing the condition in `shouldShowWelcome`\n\t\t\t\t\t// so it should fire onDidChangeViewWelcomeState.\n\t\t\t\t\tconst wasVisible = this._widget.visible;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._widget.setVisible(false);\n\t\t\t\t\t\tthis.updateModel(model);\n\t\t\t\t\t\tthis.defaultParticipantRegistrationFailed = false;\n\t\t\t\t\t\tthis.didUnregisterProvider = false;\n\t\t\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis.widget.setVisible(wasVisible);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this._widget?.viewModel?.initState === ChatModelInitState.Initialized) {\n\t\t\t\t// Model is initialized, and the default agent disappeared, so show welcome view\n\t\t\t\tthis.didUnregisterProvider = true;\n\t\t\t}\n\n\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t}));\n\t}\n\n\toverride getActionsContext(): IChatViewTitleActionContext | undefined {\n\t\treturn this.widget?.viewModel ? {\n\t\t\tsessionId: this.widget.viewModel.sessionId,\n\t\t\t$mid: MarshalledId.ChatViewContext\n\t\t} : undefined;\n\t}\n\n\tprivate updateModel(model?: IChatModel | undefined, viewState?: IChatViewState): void {\n\t\tthis.modelDisposables.clear();\n\n\t\tmodel = model ?? (this.chatService.transferredSessionData?.sessionId\n\t\t\t? this.chatService.getOrRestoreSession(this.chatService.transferredSessionData.sessionId)\n\t\t\t: this.chatService.startSession(this.chatOptions.location, CancellationToken.None));\n\t\tif (!model) {\n\t\t\tthrow new Error('Could not start chat session');\n\t\t}\n\n\t\tif (viewState) {\n\t\t\tthis.updateViewState(viewState);\n\t\t}\n\n\t\tthis.viewState.sessionId = model.sessionId;\n\t\tthis._widget.setModel(model, { ...this.viewState });\n\n\t\t// Update the toolbar context with new sessionId\n\t\tthis.updateActions();\n\t}\n\n\toverride shouldShowWelcome(): boolean {\n\t\tconst noPersistedSessions = !this.chatService.hasSessions();\n\t\tconst shouldShow = this.didUnregisterProvider || !this._widget?.viewModel && noPersistedSessions || this.defaultParticipantRegistrationFailed;\n\t\tthis.logService.trace(`ChatViewPane#shouldShowWelcome(${this.chatOptions.location}) = ${shouldShow}: didUnregister=${this.didUnregisterProvider} || noViewModel:${!this._widget?.viewModel} && noPersistedSessions=${noPersistedSessions} || defaultParticipantRegistrationFailed=${this.defaultParticipantRegistrationFailed}`);\n\t\treturn shouldShow;\n\t}\n\n\tprivate getSessionId() {\n\t\tlet sessionId: string | undefined;\n\t\tif (this.chatService.transferredSessionData) {\n\t\t\tsessionId = this.chatService.transferredSessionData.sessionId;\n\t\t\tthis.viewState.inputValue = this.chatService.transferredSessionData.inputValue;\n\t\t} else {\n\t\t\tsessionId = this.viewState.sessionId;\n\t\t}\n\t\treturn sessionId;\n\t}\n\n\tprotected override renderBody(parent: HTMLElement): void {\n\t\ttry {\n\t\t\tsuper.renderBody(parent);\n\n\t\t\tthis._register(this.instantiationService.createInstance(ChatViewWelcomeController, parent, this));\n\n\t\t\tconst scopedInstantiationService = this._register(this.instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService])));\n\t\t\tconst locationBasedColors = this.getLocationBasedColors();\n\t\t\tthis._widget = this._register(scopedInstantiationService.createInstance(\n\t\t\t\tChatWidget,\n\t\t\t\tthis.chatOptions.location,\n\t\t\t\t{ viewId: this.id },\n\t\t\t\t{\n\t\t\t\t\tautoScroll: this.chatOptions.location === ChatAgentLocation.EditingSession,\n\t\t\t\t\trenderFollowups: this.chatOptions.location === ChatAgentLocation.Panel,\n\t\t\t\t\tsupportsFileReferences: true,\n\t\t\t\t\tsupportsAdditionalParticipants: this.chatOptions.location === ChatAgentLocation.Panel,\n\t\t\t\t\trendererOptions: {\n\t\t\t\t\t\trenderCodeBlockPills: this.chatOptions.location === ChatAgentLocation.EditingSession,\n\t\t\t\t\t\trenderTextEditsAsSummary: (uri) => {\n\t\t\t\t\t\t\treturn this.chatOptions.location === ChatAgentLocation.EditingSession;\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlistForeground: SIDE_BAR_FOREGROUND,\n\t\t\t\t\tlistBackground: locationBasedColors.background,\n\t\t\t\t\toverlayBackground: locationBasedColors.overlayBackground,\n\t\t\t\t\tinputEditorBackground: locationBasedColors.background,\n\t\t\t\t\tresultEditorBackground: editorBackground,\n\n\t\t\t\t}));\n\t\t\tthis._register(this.onDidChangeBodyVisibility(visible => {\n\t\t\t\tthis._widget.setVisible(visible);\n\t\t\t}));\n\t\t\tthis._register(this._widget.onDidClear(() => this.clear()));\n\t\t\tthis._widget.render(parent);\n\n\t\t\tconst sessionId = this.getSessionId();\n\t\t\tconst disposeListener = this._register(this.chatService.onDidDisposeSession((e) => {\n\t\t\t\t// Render the welcome view if provider registration fails, eg when signed out. This activates for any session, but the problem is the same regardless\n\t\t\t\tif (e.reason === 'initializationFailed') {\n\t\t\t\t\tthis.defaultParticipantRegistrationFailed = true;\n\t\t\t\t\tdisposeListener?.dispose();\n\t\t\t\t\tthis._onDidChangeViewWelcomeState.fire();\n\t\t\t\t}\n\t\t\t}));\n\t\t\tconst model = sessionId ? this.chatService.getOrRestoreSession(sessionId) : undefined;\n\n\t\t\tthis.updateModel(model);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tacceptInput(query?: string): void {\n\t\tthis._widget.acceptInput(query);\n\t}\n\n\tprivate clear(): void {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\n\t\t// Grab the widget's latest view state because it will be loaded back into the widget\n\t\tthis.updateViewState();\n\t\tthis.updateModel(undefined);\n\n\t\t// Update the toolbar context with new sessionId\n\t\tthis.updateActions();\n\t}\n\n\tloadSession(sessionId: string, viewState?: IChatViewState): void {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\n\t\tconst newModel = this.chatService.getOrRestoreSession(sessionId);\n\t\tthis.updateModel(newModel, viewState);\n\t}\n\n\tfocusInput(): void {\n\t\tthis._widget.focusInput();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis._widget.focusInput();\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis._widget.layout(height, width);\n\t}\n\n\toverride saveState(): void {\n\t\tif (this._widget) {\n\t\t\t// Since input history is per-provider, this is handled by a separate service and not the memento here.\n\t\t\t// TODO multiple chat views will overwrite each other\n\t\t\tthis._widget.saveState();\n\n\t\t\tthis.updateViewState();\n\t\t\tthis.memento.saveMemento();\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate updateViewState(viewState?: IChatViewState): void {\n\t\tconst newViewState = viewState ?? this._widget.getViewState();\n\t\tfor (const [key, value] of Object.entries(newViewState)) {\n\t\t\t// Assign all props to the memento so they get saved\n\t\t\t(this.viewState as any)[key] = value;\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
