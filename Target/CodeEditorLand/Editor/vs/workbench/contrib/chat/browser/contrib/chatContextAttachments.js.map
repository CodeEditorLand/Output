{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/browser/contrib/chatContextAttachments.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from \"../../../../../base/common/lifecycle.js\";\nimport {\n\tIChatRequestVariableEntry,\n\tisChatRequestVariableEntry,\n} from \"../../common/chatModel.js\";\nimport { IChatWidget } from \"../chat.js\";\nimport { ChatWidget, IChatWidgetContrib } from \"../chatWidget.js\";\n\nexport class ChatContextAttachments\n\textends Disposable\n\timplements IChatWidgetContrib\n{\n\tprivate _attachedContext = new Map<string, IChatRequestVariableEntry>();\n\n\tpublic static readonly ID = \"chatContextAttachments\";\n\n\tget id() {\n\t\treturn ChatContextAttachments.ID;\n\t}\n\n\tconstructor(readonly widget: IChatWidget) {\n\t\tsuper();\n\n\t\tthis._register(\n\t\t\tthis.widget.onDidChangeContext(({ removed, added }) => {\n\t\t\t\tremoved?.forEach((attachment) =>\n\t\t\t\t\tthis._attachedContext.delete(attachment.id),\n\t\t\t\t);\n\t\t\t\tadded?.forEach((attachment) => {\n\t\t\t\t\tif (!this._attachedContext.has(attachment.id)) {\n\t\t\t\t\t\tthis._attachedContext.set(attachment.id, attachment);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t);\n\n\t\tthis._register(\n\t\t\tthis.widget.onDidSubmitAgent(() => {\n\t\t\t\tthis._clearAttachedContext();\n\t\t\t}),\n\t\t);\n\t}\n\n\tgetInputState(): IChatRequestVariableEntry[] {\n\t\treturn [...this._attachedContext.values()];\n\t}\n\n\tsetInputState(s: unknown): void {\n\t\tconst attachments = Array.isArray(s)\n\t\t\t? s.filter(isChatRequestVariableEntry)\n\t\t\t: [];\n\t\tthis.setContext(true, ...attachments);\n\t}\n\n\tgetContext() {\n\t\treturn new Set(this._attachedContext.keys());\n\t}\n\n\tsetContext(\n\t\toverwrite: boolean,\n\t\t...attachments: IChatRequestVariableEntry[]\n\t) {\n\t\tif (overwrite) {\n\t\t\tthis._attachedContext.clear();\n\t\t}\n\n\t\tconst newAttachments = [];\n\t\tfor (const attachment of attachments) {\n\t\t\tif (!this._attachedContext.has(attachment.id)) {\n\t\t\t\tthis._attachedContext.set(attachment.id, attachment);\n\t\t\t\tnewAttachments.push(attachment);\n\t\t\t}\n\t\t}\n\n\t\tthis.widget.setContext(overwrite, ...newAttachments);\n\t}\n\n\tprivate _clearAttachedContext() {\n\t\tthis._attachedContext.clear();\n\t}\n}\n\nChatWidget.CONTRIBS.push(ChatContextAttachments);\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AACP,SAAS,mBAAmB;AAC5B,SAAS,YAAY,0BAA0B;AAExC,MAAM,+BACJ,WAET;AAAA,EASC,YAAqB,QAAqB;AACzC,UAAM;AADc;AAGpB,SAAK;AAAA,MACJ,KAAK,OAAO,mBAAmB,CAAC,EAAE,SAAS,MAAM,MAAM;AACtD,iBAAS;AAAA,UAAQ,CAAC,eACjB,KAAK,iBAAiB,OAAO,WAAW,EAAE;AAAA,QAC3C;AACA,eAAO,QAAQ,CAAC,eAAe;AAC9B,cAAI,CAAC,KAAK,iBAAiB,IAAI,WAAW,EAAE,GAAG;AAC9C,iBAAK,iBAAiB,IAAI,WAAW,IAAI,UAAU;AAAA,UACpD;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF;AAEA,SAAK;AAAA,MACJ,KAAK,OAAO,iBAAiB,MAAM;AAClC,aAAK,sBAAsB;AAAA,MAC5B,CAAC;AAAA,IACF;AAAA,EACD;AAAA,EA9CD,OAgBA;AAAA;AAAA;AAAA,EACS,mBAAmB,oBAAI,IAAuC;AAAA,EAEtE,OAAuB,KAAK;AAAA,EAE5B,IAAI,KAAK;AACR,WAAO,uBAAuB;AAAA,EAC/B;AAAA,EAyBA,gBAA6C;AAC5C,WAAO,CAAC,GAAG,KAAK,iBAAiB,OAAO,CAAC;AAAA,EAC1C;AAAA,EAEA,cAAc,GAAkB;AAC/B,UAAM,cAAc,MAAM,QAAQ,CAAC,IAChC,EAAE,OAAO,0BAA0B,IACnC,CAAC;AACJ,SAAK,WAAW,MAAM,GAAG,WAAW;AAAA,EACrC;AAAA,EAEA,aAAa;AACZ,WAAO,IAAI,IAAI,KAAK,iBAAiB,KAAK,CAAC;AAAA,EAC5C;AAAA,EAEA,WACC,cACG,aACF;AACD,QAAI,WAAW;AACd,WAAK,iBAAiB,MAAM;AAAA,IAC7B;AAEA,UAAM,iBAAiB,CAAC;AACxB,eAAW,cAAc,aAAa;AACrC,UAAI,CAAC,KAAK,iBAAiB,IAAI,WAAW,EAAE,GAAG;AAC9C,aAAK,iBAAiB,IAAI,WAAW,IAAI,UAAU;AACnD,uBAAe,KAAK,UAAU;AAAA,MAC/B;AAAA,IACD;AAEA,SAAK,OAAO,WAAW,WAAW,GAAG,cAAc;AAAA,EACpD;AAAA,EAEQ,wBAAwB;AAC/B,SAAK,iBAAiB,MAAM;AAAA,EAC7B;AACD;AAEA,WAAW,SAAS,KAAK,sBAAsB;",
  "names": []
}
