var T=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var m=(a,r,e,o)=>{for(var t=o>1?void 0:o?v(r,e):r,i=a.length-1,n;i>=0;i--)(n=a[i])&&(t=(o?n(r,e,t):n(t))||t);return o&&t&&T(r,e,t),t},l=(a,r)=>(e,o)=>r(e,o,a);import{renderStringAsPlaintext as u}from"../../../../base/browser/markdownRenderer.js";import{RunOnceScheduler as _}from"../../../../base/common/async.js";import"../../../../base/common/cancellation.js";import{CancellationError as y}from"../../../../base/common/errors.js";import{Emitter as C}from"../../../../base/common/event.js";import{Iterable as h}from"../../../../base/common/iterator.js";import{Disposable as w,toDisposable as p}from"../../../../base/common/lifecycle.js";import{localize as S}from"../../../../nls.js";import{IContextKeyService as x}from"../../../../platform/contextkey/common/contextkey.js";import{IDialogService as D}from"../../../../platform/dialogs/common/dialogs.js";import{IExtensionService as E}from"../../../services/extensions/common/extensions.js";import"../common/chatModel.js";import{ChatToolInvocation as M}from"../common/chatProgressTypes/chatToolInvocation.js";import{IChatService as K}from"../common/chatService.js";import"../common/languageModelToolsService.js";let c=class extends w{constructor(e,o,t,i){super();this._extensionService=e;this._contextKeyService=o;this._chatService=t;this._dialogService=i;this._register(this._contextKeyService.onDidChangeContext(n=>{n.affectsSome(this._toolContextKeys)&&this._onDidChangeToolsScheduler.schedule()}))}_serviceBrand;_onDidChangeTools=new C;onDidChangeTools=this._onDidChangeTools.event;_onDidChangeToolsScheduler=new _(()=>this._onDidChangeTools.fire(),750);_tools=new Map;_toolContextKeys=new Set;registerToolData(e){if(this._tools.has(e.id))throw new Error(`Tool "${e.id}" is already registered.`);return this._tools.set(e.id,{data:e}),this._onDidChangeToolsScheduler.schedule(),e.when?.keys().forEach(o=>this._toolContextKeys.add(o)),p(()=>{this._tools.delete(e.id),this._refreshAllToolContextKeys(),this._onDidChangeToolsScheduler.schedule()})}_refreshAllToolContextKeys(){this._toolContextKeys.clear();for(const e of this._tools.values())e.data.when?.keys().forEach(o=>this._toolContextKeys.add(o))}registerToolImplementation(e,o){const t=this._tools.get(e);if(!t)throw new Error(`Tool "${e}" was not contributed.`);if(t.impl)throw new Error(`Tool "${e}" already has an implementation.`);return t.impl=o,p(()=>{t.impl=void 0})}getTools(){const e=h.map(this._tools.values(),o=>o.data);return h.filter(e,o=>!o.when||this._contextKeyService.contextMatchesRules(o.when))}getTool(e){return this._getToolEntry(e)?.data}_getToolEntry(e){const o=this._tools.get(e);if(o&&(!o.data.when||this._contextKeyService.contextMatchesRules(o.data.when)))return o}getToolByName(e){for(const o of this.getTools())if(o.toolReferenceName===e)return o}async invokeTool(e,o,t){let i=this._tools.get(e.toolId);if(!i)throw new Error(`Tool ${e.toolId} was not contributed`);if(!i.impl&&(await this._extensionService.activateByEvent(`onLanguageModelTool:${e.toolId}`),i=this._tools.get(e.toolId),!i?.impl))throw new Error(`Tool ${e.toolId} does not have an implementation registered.`);let n;if(e.context){const s=this._chatService.getSession(e.context?.sessionId),f=s.getRequests().at(-1),d=i.impl.prepareToolInvocation?await i.impl.prepareToolInvocation(e.parameters,t):void 0,I=S("toolInvocationMessage","Using {0}",`"${i.data.displayName}"`),g=d?.invocationMessage??I;if(n=new M(g,d?.confirmationMessages),t.onCancellationRequested(()=>{n.confirmed.complete(!1)}),s.acceptResponseProgress(f,n),d?.confirmationMessages&&!await n.confirmed.p)throw new y}else{const s=i.impl.prepareToolInvocation?await i.impl.prepareToolInvocation(e.parameters,t):void 0;s?.confirmationMessages&&await this._dialogService.confirm({message:s.confirmationMessages.title,detail:u(s.confirmationMessages.message)})}try{return await i.impl.invoke(e,o,t)}finally{n?.isCompleteDeferred.complete()}}};c=m([l(0,E),l(1,x),l(2,K),l(3,D)],c);export{c as LanguageModelToolsService};
