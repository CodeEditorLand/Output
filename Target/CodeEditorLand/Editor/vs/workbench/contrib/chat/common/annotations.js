import{MarkdownString as a}from"../../../../base/common/htmlContent.js";import{basename as k}from"../../../../base/common/resources.js";import{URI as f}from"../../../../base/common/uri.js";import{generateUuid as v}from"../../../../base/common/uuid.js";import"../../../../editor/common/core/range.js";import{appendMarkdownString as u,canMergeMarkdownStrings as R}from"./chatModel.js";import"./chatService.js";const b="http://_vscodecontentref_";function D(i){const e=[];for(const n of i){const t=e.filter(o=>o.kind!=="textEditGroup").at(-1),l=e.findIndex(o=>o===t);if(n.kind==="inlineReference"){let o=n.name;o||(f.isUri(n.inlineReference)?o=k(n.inlineReference):"name"in n.inlineReference?o=n.inlineReference.name:o=k(n.inlineReference.uri));const r=v(),s=f.parse(b).with({path:r}),d=`[${o}](${s.toString()})`,c={[r]:n};if(t?.kind==="markdownContent"){const m=u(t.content,new a(d));e[l]={...t,content:m,inlineReferences:{...c,...t.inlineReferences||{}}}}else e.push({content:new a(d),inlineReferences:c,kind:"markdownContent"})}else if(n.kind==="markdownContent"&&t?.kind==="markdownContent"&&R(t.content,n.content)){const o=u(t.content,n.content);e[l]={...t,content:o}}else if(n.kind==="markdownVuln"){const r=`<vscode_annotation details='${encodeURIComponent(JSON.stringify(n.vulnerabilities))}'>${n.content.value}</vscode_annotation>`;if(t?.kind==="markdownContent"){const s=u(t.content,new a(r));e[l]={...t,content:s}}else e.push({content:new a(r),kind:"markdownContent"})}else if(n.kind==="codeblockUri"){if(t?.kind==="markdownContent"){const o=`<vscode_codeblock_uri>${n.uri.toString()}</vscode_codeblock_uri>`,r=u(t.content,new a(o));e[l]={...t,content:r}}}else e.push(n)}return e}function E(i){const e=[];for(const n of i){const t=e[e.length-1];if(n.kind==="markdownContent")t?.kind==="markdownContent"?e[e.length-1]={content:new a(t.content.value+n.content.value,{isTrusted:t.content.isTrusted}),kind:"markdownContent"}:e.push(n);else if(n.kind==="markdownVuln"){const o=`<vscode_annotation details='${encodeURIComponent(JSON.stringify(n.vulnerabilities))}'>${n.content.value}</vscode_annotation>`;t?.kind==="markdownContent"?e[e.length-1]={content:new a(t.content.value+o,{isTrusted:t.content.isTrusted}),kind:"markdownContent"}:e.push({content:new a(o),kind:"markdownContent"})}}return e}function J(i){const e=/<vscode_codeblock_uri>(.*?)<\/vscode_codeblock_uri>/ms.exec(i);if(e&&e[1]){const n=f.parse(e[1]),t=i.substring(0,e.index)+i.substring(e.index+e[0].length);return{uri:n,textWithoutResult:t}}}function B(i){const e=[];let n=i,t;for(;(t=/<vscode_annotation details='(.*?)'>(.*?)<\/vscode_annotation>/ms.exec(n))!==null;){const[l,o,r]=t,s=t.index,d=n.substring(0,s),c=d.split(`
`).length-1,m=r.split(`
`).length-1,g=d.lastIndexOf(`
`),p=s-(g+1)+1,w=(d+r).lastIndexOf(`
`),C=s+r.length-(w+1)+1;try{JSON.parse(decodeURIComponent(o)).forEach(({title:h,description:I})=>e.push({title:h,description:I,range:{startLineNumber:c+1,startColumn:p,endLineNumber:c+m+1,endColumn:C}}))}catch{}n=n.substring(0,s)+r+n.substring(s+l.length)}return{newText:n,vulnerabilities:e}}export{D as annotateSpecialMarkdownContent,E as annotateVulnerabilitiesInText,b as contentRefUrl,J as extractCodeblockUrisFromText,B as extractVulnerabilitiesFromText};
