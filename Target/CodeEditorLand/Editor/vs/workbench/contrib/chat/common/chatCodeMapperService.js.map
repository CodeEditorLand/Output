{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/common/chatCodeMapperService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { splitLinesIncludeSeparators } from '../../../../base/common/strings.js';\nimport { isString } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DocumentContextItem, isLocation, TextEdit } from '../../../../editor/common/languages.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IChatAgentResult } from './chatAgents.js';\nimport { IChatResponseModel } from './chatModel.js';\nimport { IChatContentReference } from './chatService.js';\n\n\nexport interface ICodeMapperResponse {\n\ttextEdit: (resource: URI, textEdit: TextEdit[]) => void;\n}\n\nexport interface ICodeMapperCodeBlock {\n\treadonly code: string;\n\treadonly resource: URI;\n\treadonly markdownBeforeBlock?: string;\n}\n\nexport interface ConversationRequest {\n\treadonly type: 'request';\n\treadonly message: string;\n}\n\nexport interface ConversationResponse {\n\treadonly type: 'response';\n\treadonly message: string;\n\treadonly result?: IChatAgentResult;\n\treadonly references?: DocumentContextItem[];\n}\n\nexport interface ICodeMapperRequest {\n\treadonly codeBlocks: ICodeMapperCodeBlock[];\n\treadonly conversation: (ConversationResponse | ConversationRequest)[];\n}\n\nexport interface ICodeMapperResult {\n\treadonly errorMessage?: string;\n}\n\nexport interface ICodeMapperProvider {\n\tmapCode(request: ICodeMapperRequest, response: ICodeMapperResponse, token: CancellationToken): Promise<ICodeMapperResult | undefined>;\n}\n\nexport const ICodeMapperService = createDecorator<ICodeMapperService>('codeMapperService');\n\nexport interface ICodeMapperService {\n\treadonly _serviceBrand: undefined;\n\tregisterCodeMapperProvider(handle: number, provider: ICodeMapperProvider): IDisposable;\n\tmapCode(request: ICodeMapperRequest, response: ICodeMapperResponse, token: CancellationToken): Promise<ICodeMapperResult | undefined>;\n\tmapCodeFromResponse(responseModel: IChatResponseModel, response: ICodeMapperResponse, token: CancellationToken): Promise<ICodeMapperResult | undefined>;\n}\n\nexport class CodeMapperService implements ICodeMapperService {\n\t_serviceBrand: undefined;\n\n\tprivate readonly providers: ICodeMapperProvider[] = [];\n\n\tregisterCodeMapperProvider(handle: number, provider: ICodeMapperProvider): IDisposable {\n\t\tthis.providers.push(provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tconst index = this.providers.indexOf(provider);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tthis.providers.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tasync mapCode(request: ICodeMapperRequest, response: ICodeMapperResponse, token: CancellationToken) {\n\t\tfor (const provider of this.providers) {\n\t\t\tconst result = await provider.mapCode(request, response, token);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync mapCodeFromResponse(responseModel: IChatResponseModel, response: ICodeMapperResponse, token: CancellationToken) {\n\t\tconst fenceLanguageRegex = /^`{3,}/;\n\t\tconst codeBlocks: ICodeMapperCodeBlock[] = [];\n\n\t\tconst currentBlock = [];\n\t\tconst markdownBeforeBlock = [];\n\t\tlet currentBlockUri = undefined;\n\n\t\tlet fence = undefined; // if set, we are in a block\n\n\t\tfor (const lineOrUri of iterateLinesOrUris(responseModel)) {\n\t\t\tif (isString(lineOrUri)) {\n\t\t\t\tconst fenceLanguageIdMatch = lineOrUri.match(fenceLanguageRegex);\n\t\t\t\tif (fenceLanguageIdMatch) {\n\t\t\t\t\t// we found a line that starts with a fence\n\t\t\t\t\tif (fence !== undefined && fenceLanguageIdMatch[0] === fence) {\n\t\t\t\t\t\t// we are in a code block and the fence matches the opening fence: Close the code block\n\t\t\t\t\t\tfence = undefined;\n\t\t\t\t\t\tif (currentBlockUri) {\n\t\t\t\t\t\t\t// report the code block if we have a URI\n\t\t\t\t\t\t\tcodeBlocks.push({ code: currentBlock.join(''), resource: currentBlockUri, markdownBeforeBlock: markdownBeforeBlock.join('') });\n\t\t\t\t\t\t\tcurrentBlock.length = 0;\n\t\t\t\t\t\t\tmarkdownBeforeBlock.length = 0;\n\t\t\t\t\t\t\tcurrentBlockUri = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// we are not in a code block. Open the block\n\t\t\t\t\t\tfence = fenceLanguageIdMatch[0];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (fence !== undefined) {\n\t\t\t\t\t\tcurrentBlock.push(lineOrUri);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmarkdownBeforeBlock.push(lineOrUri);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentBlockUri = lineOrUri;\n\t\t\t}\n\t\t}\n\t\tconst conversation: (ConversationRequest | ConversationResponse)[] = [];\n\t\tfor (const request of responseModel.session.getRequests()) {\n\t\t\tconst response = request.response;\n\t\t\tif (!response || response === responseModel) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconversation.push({\n\t\t\t\ttype: 'request',\n\t\t\t\tmessage: request.message.text\n\t\t\t});\n\t\t\tconversation.push({\n\t\t\t\ttype: 'response',\n\t\t\t\tmessage: response.response.toMarkdown(),\n\t\t\t\tresult: response.result,\n\t\t\t\treferences: getReferencesAsDocumentContext(response.contentReferences)\n\t\t\t});\n\t\t}\n\t\treturn this.mapCode({ codeBlocks, conversation }, response, token);\n\t}\n}\n\nfunction iterateLinesOrUris(responseModel: IChatResponseModel): Iterable<string | URI> {\n\treturn {\n\t\t*[Symbol.iterator](): Iterator<string | URI> {\n\t\t\tlet lastIncompleteLine = undefined;\n\t\t\tfor (const part of responseModel.response.value) {\n\t\t\t\tif (part.kind === 'markdownContent' || part.kind === 'markdownVuln') {\n\t\t\t\t\tconst lines = splitLinesIncludeSeparators(part.content.value);\n\t\t\t\t\tif (lines.length > 0) {\n\t\t\t\t\t\tif (lastIncompleteLine !== undefined) {\n\t\t\t\t\t\t\tlines[0] = lastIncompleteLine + lines[0]; // merge the last incomplete line with the first markdown line\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastIncompleteLine = isLineIncomplete(lines[lines.length - 1]) ? lines.pop() : undefined;\n\t\t\t\t\t\tfor (const line of lines) {\n\t\t\t\t\t\t\tyield line;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (part.kind === 'codeblockUri') {\n\t\t\t\t\tyield part.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lastIncompleteLine !== undefined) {\n\t\t\t\tyield lastIncompleteLine;\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction isLineIncomplete(line: string) {\n\tconst lastChar = line.charCodeAt(line.length - 1);\n\treturn lastChar !== CharCode.LineFeed && lastChar !== CharCode.CarriageReturn;\n}\n\n\nexport function getReferencesAsDocumentContext(res: readonly IChatContentReference[]): DocumentContextItem[] {\n\tconst map = new ResourceMap<DocumentContextItem>();\n\tfor (const r of res) {\n\t\tlet uri;\n\t\tlet range;\n\t\tif (URI.isUri(r.reference)) {\n\t\t\turi = r.reference;\n\t\t} else if (isLocation(r.reference)) {\n\t\t\turi = r.reference.uri;\n\t\t\trange = r.reference.range;\n\t\t}\n\t\tif (uri) {\n\t\t\tconst item = map.get(uri);\n\t\t\tif (item) {\n\t\t\t\tif (range) {\n\t\t\t\t\titem.ranges.push(range);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmap.set(uri, { uri, version: -1, ranges: range ? [range] : [] });\n\t\t\t}\n\t\t}\n\t}\n\treturn [...map.values()];\n}\n"],
  "mappings": "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",
  "names": ["response"]
}
