{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/common/chatEditingService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { ResourceMap } from '../../../../base/common/map.js';\nimport { IObservable, ITransaction } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IDocumentDiff } from '../../../../editor/common/diff/documentDiffProvider.js';\nimport { TextEdit } from '../../../../editor/common/languages.js';\nimport { ITextModel } from '../../../../editor/common/model.js';\nimport { localize } from '../../../../nls.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IChatResponseModel } from './chatModel.js';\n\nexport const IChatEditingService = createDecorator<IChatEditingService>('chatEditingService');\n\nexport interface IChatEditingService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidCreateEditingSession: Event<IChatEditingSession>;\n\t/**\n\t * emitted when a session is created, changed or disposed\n\t */\n\treadonly onDidChangeEditingSession: Event<void>;\n\n\treadonly currentEditingSessionObs: IObservable<IChatEditingSession | null>;\n\n\treadonly currentEditingSession: IChatEditingSession | null;\n\treadonly currentAutoApplyOperation: CancellationTokenSource | null;\n\n\tstartOrContinueEditingSession(chatSessionId: string, options?: { silent: boolean }): Promise<IChatEditingSession>;\n\taddFileToWorkingSet(resource: URI): Promise<void>;\n\ttriggerEditComputation(responseModel: IChatResponseModel): Promise<void>;\n\tgetEditingSession(resource: URI): IChatEditingSession | null;\n\tcreateSnapshot(requestId: string): void;\n\tgetSnapshotUri(requestId: string, uri: URI): URI | undefined;\n\trestoreSnapshot(requestId: string | undefined): Promise<void>;\n}\n\nexport interface IChatEditingSession {\n\treadonly chatSessionId: string;\n\treadonly onDidChange: Event<void>;\n\treadonly onDidDispose: Event<void>;\n\treadonly state: IObservable<ChatEditingSessionState>;\n\treadonly entries: IObservable<readonly IModifiedFileEntry[]>;\n\treadonly workingSet: ResourceMap<WorkingSetEntryState>;\n\treadonly isVisible: boolean;\n\tshow(): Promise<void>;\n\tremove(...uris: URI[]): void;\n\taccept(...uris: URI[]): Promise<void>;\n\treject(...uris: URI[]): Promise<void>;\n\t/**\n\t * Will lead to this object getting disposed\n\t */\n\tstop(): Promise<void>;\n}\n\nexport const enum WorkingSetEntryState {\n\tModified,\n\tAccepted,\n\tRejected,\n\tTransient,\n\tAttached,\n\tSent,\n}\n\nexport interface IModifiedFileEntry {\n\treadonly originalURI: URI;\n\treadonly originalModel: ITextModel;\n\treadonly modifiedURI: URI;\n\treadonly state: IObservable<WorkingSetEntryState>;\n\treadonly diffInfo: IObservable<IDocumentDiff>;\n\taccept(transaction: ITransaction | undefined): Promise<void>;\n\treject(transaction: ITransaction | undefined): Promise<void>;\n}\n\nexport interface IChatEditingSessionStream {\n\ttextEdits(resource: URI, textEdits: TextEdit[], responseModel: IChatResponseModel): void;\n}\n\nexport const enum ChatEditingSessionState {\n\tInitial = 0,\n\tStreamingEdits = 1,\n\tIdle = 2,\n\tDisposed = 3\n}\n\nexport const CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME = 'chat-editing-multi-diff-source';\n\nexport const chatEditingWidgetFileStateContextKey = new RawContextKey<WorkingSetEntryState>('chatEditingWidgetFileState', undefined, localize('chatEditingWidgetFileState', \"The current state of the file in the chat editing widget\"));\nexport const decidedChatEditingResourceContextKey = new RawContextKey<string[]>('decidedChatEditingResource', []);\nexport const chatEditingResourceContextKey = new RawContextKey<string | undefined>('chatEditingResource', undefined);\nexport const inChatEditingSessionContextKey = new RawContextKey<boolean | undefined>('inChatEditingSession', undefined);\nexport const applyingChatEditsContextKey = new RawContextKey<boolean | undefined>('isApplyingChatEdits', undefined);\nexport const isChatRequestCheckpointed = new RawContextKey<boolean | undefined>('isChatRequestCheckpointed', false);\n"],
  "mappings": "AAKA,SAAS,+BAA+B;AACxC,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,aAAa,oBAAoB;AAC1C,SAAS,WAAW;AACpB,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,kBAAkB;AAC3B,SAAS,gBAAgB;AACzB,SAAS,qBAAqB;AAC9B,SAAS,uBAAuB;AAChC,SAAS,0BAA0B;AAE5B,MAAM,sBAAsB,gBAAqC,oBAAoB;AA2CrF,IAAW,uBAAX,kBAAWA,0BAAX;AACN,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AACA,EAAAA,4CAAA;AANiB,SAAAA;AAAA,GAAA;AAuBX,IAAW,0BAAX,kBAAWC,6BAAX;AACN,EAAAA,kDAAA,aAAU,KAAV;AACA,EAAAA,kDAAA,oBAAiB,KAAjB;AACA,EAAAA,kDAAA,UAAO,KAAP;AACA,EAAAA,kDAAA,cAAW,KAAX;AAJiB,SAAAA;AAAA,GAAA;AAOX,MAAM,iDAAiD;AAEvD,MAAM,uCAAuC,IAAI,cAAoC,8BAA8B,QAAW,SAAS,8BAA8B,0DAA0D,CAAC;AAChO,MAAM,uCAAuC,IAAI,cAAwB,8BAA8B,CAAC,CAAC;AACzG,MAAM,gCAAgC,IAAI,cAAkC,uBAAuB,MAAS;AAC5G,MAAM,iCAAiC,IAAI,cAAmC,wBAAwB,MAAS;AAC/G,MAAM,8BAA8B,IAAI,cAAmC,uBAAuB,MAAS;AAC3G,MAAM,4BAA4B,IAAI,cAAmC,6BAA6B,KAAK;",
  "names": ["WorkingSetEntryState", "ChatEditingSessionState"]
}
