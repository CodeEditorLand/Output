var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var y=(o,t,e,r)=>{for(var i=r>1?void 0:r?v(t,e):t,n=o.length-1,s;n>=0;n--)(s=o[n])&&(i=(r?s(t,e,i):s(i))||i);return r&&i&&m(t,e,i),i},h=(o,t)=>(e,r)=>t(e,r,o);import{Emitter as c}from"../../../../base/common/event.js";import"../../../../base/common/uri.js";import{createDecorator as d}from"../../../../platform/instantiation/common/instantiation.js";import{IStorageService as C,StorageScope as I,StorageTarget as g}from"../../../../platform/storage/common/storage.js";import{Memento as p}from"../../../common/memento.js";import{ChatAgentLocation as S}from"./chatAgents.js";import"./chatEditingService.js";import"./chatModel.js";import{CHAT_PROVIDER_ID as H}from"./chatParticipantContribTypes.js";const K=d("IChatWidgetHistoryService");let a=class{_serviceBrand;memento;viewState;_onDidClearHistory=new c;onDidClearHistory=this._onDidClearHistory.event;constructor(t){this.memento=new p("interactive-session",t);const e=this.memento.getMemento(I.WORKSPACE,g.MACHINE);for(const r in e.history)e.history[r]=e.history[r].map(i=>typeof i=="string"?{text:i}:i);this.viewState=e}getHistory(t){const e=this.getKey(t);return this.viewState.history?.[e]??[]}getKey(t){return t===S.Panel?H:t}saveHistory(t,e){this.viewState.history||(this.viewState.history={});const r=this.getKey(t);this.viewState.history[r]=e,this.memento.saveMemento()}clearHistory(){this.viewState.history={},this.memento.saveMemento(),this._onDidClearHistory.fire()}};a=y([h(0,C)],a);export{a as ChatWidgetHistoryService,K as IChatWidgetHistoryService};
