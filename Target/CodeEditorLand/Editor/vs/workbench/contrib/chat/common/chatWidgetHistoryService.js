var v=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var y=(o,t,e,i)=>{for(var r=i>1?void 0:i?m(t,e):t,n=o.length-1,s;n>=0;n--)(s=o[n])&&(r=(i?s(t,e,r):s(r))||r);return i&&r&&v(t,e,r),r},h=(o,t)=>(e,i)=>t(e,i,o);import{Emitter as c}from"../../../../base/common/event.js";import{createDecorator as C}from"../../../../platform/instantiation/common/instantiation.js";import{IStorageService as d,StorageScope as I,StorageTarget as g}from"../../../../platform/storage/common/storage.js";import{Memento as p}from"../../../common/memento.js";import{ChatAgentLocation as H}from"./chatAgents.js";import"./chatModel.js";import{CHAT_PROVIDER_ID as S}from"./chatParticipantContribTypes.js";const M=C("IChatWidgetHistoryService");let a=class{_serviceBrand;memento;viewState;_onDidClearHistory=new c;onDidClearHistory=this._onDidClearHistory.event;constructor(t){this.memento=new p("interactive-session",t);const e=this.memento.getMemento(I.WORKSPACE,g.MACHINE);for(const i in e.history)e.history[i]=e.history[i].map(r=>typeof r=="string"?{text:r}:r);this.viewState=e}getHistory(t){const e=this.getKey(t);return this.viewState.history?.[e]??[]}getKey(t){return t===H.Panel?S:t}saveHistory(t,e){this.viewState.history||(this.viewState.history={});const i=this.getKey(t);this.viewState.history[i]=e,this.memento.saveMemento()}clearHistory(){this.viewState.history={},this.memento.saveMemento(),this._onDidClearHistory.fire()}};a=y([h(0,d)],a);export{a as ChatWidgetHistoryService,M as IChatWidgetHistoryService};
