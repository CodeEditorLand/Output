{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/chat/common/languageModelToolsService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { IMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { IJSONSchema } from '../../../../base/common/jsonSchema.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../../../base/common/themables.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ContextKeyExpression } from '../../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport interface IToolData {\n\tid: string;\n\ttoolReferenceName?: string;\n\ticon?: { dark: URI; light?: URI } | ThemeIcon;\n\twhen?: ContextKeyExpression;\n\ttags?: string[];\n\tdisplayName: string;\n\tuserDescription?: string;\n\tmodelDescription: string;\n\tparametersSchema?: IJSONSchema;\n\tcanBeReferencedInPrompt?: boolean;\n\tsupportedContentTypes: string[];\n}\n\nexport interface IToolInvocation {\n\tcallId: string;\n\ttoolId: string;\n\tparameters: Object;\n\ttokenBudget?: number;\n\tcontext: IToolInvocationContext | undefined;\n\trequestedContentTypes: string[];\n}\n\nexport interface IToolInvocationContext {\n\tsessionId: string;\n}\n\nexport interface IToolResult {\n\t[contentType: string]: any;\n}\n\nexport interface IToolConfirmationMessages {\n\ttitle: string;\n\tmessage: string | IMarkdownString;\n}\n\nexport interface IPreparedToolInvocation {\n\tinvocationMessage?: string;\n\tconfirmationMessages?: IToolConfirmationMessages;\n}\n\nexport interface IToolImpl {\n\tinvoke(invocation: IToolInvocation, countTokens: CountTokensCallback, token: CancellationToken): Promise<IToolResult>;\n\tprepareToolInvocation?(parameters: any, token: CancellationToken): Promise<IPreparedToolInvocation | undefined>;\n}\n\nexport const ILanguageModelToolsService = createDecorator<ILanguageModelToolsService>('ILanguageModelToolsService');\n\nexport type CountTokensCallback = (input: string, token: CancellationToken) => Promise<number>;\n\nexport interface ILanguageModelToolsService {\n\t_serviceBrand: undefined;\n\tonDidChangeTools: Event<void>;\n\tregisterToolData(toolData: IToolData): IDisposable;\n\tregisterToolImplementation(id: string, tool: IToolImpl): IDisposable;\n\tgetTools(): Iterable<Readonly<IToolData>>;\n\tgetTool(id: string): IToolData | undefined;\n\tgetToolByName(name: string): IToolData | undefined;\n\tinvokeTool(invocation: IToolInvocation, countTokens: CountTokensCallback, token: CancellationToken): Promise<IToolResult>;\n}\n"],
  "mappings": "AAKA,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,iBAAiB;AAC1B,SAAS,WAAW;AACpB,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAgDzB,MAAM,6BAA6B,gBAA4C,4BAA4B;",
  "names": []
}
