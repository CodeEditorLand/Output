var _=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var m=(p,e,o,t)=>{for(var i=t>1?void 0:t?I(e,o):e,r=p.length-1,a;r>=0;r--)(a=p[r])&&(i=(t?a(e,o,i):a(i))||i);return t&&i&&_(e,o,i),i},n=(p,e)=>(o,t)=>e(o,t,p);import{Queue as y}from"../../../../base/common/async.js";import"../../../../base/common/cancellation.js";import{DisposableStore as D,MutableDisposable as b,combinedDisposable as C,dispose as u}from"../../../../base/common/lifecycle.js";import{localize as d}from"../../../../nls.js";import{IConfigurationService as w}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/progress/common/progress.js";import{SaveReason as k}from"../../../common/editor.js";import"./inlineChatSession.js";import{IInlineChatSessionService as P}from"./inlineChatSessionService.js";import{InlineChatConfigKeys as S}from"../common/inlineChat.js";import{IEditorGroupsService as F}from"../../../services/editor/common/editorGroupsService.js";import{IFilesConfigurationService as U}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{ITextFileService as E}from"../../../services/textfile/common/textfiles.js";import"./inlineChatSavingService.js";import{Iterable as h}from"../../../../base/common/iterator.js";import{Schemas as x}from"../../../../base/common/network.js";import{CellUri as G}from"../../notebook/common/notebookCommon.js";import{IWorkingCopyFileService as A}from"../../../services/workingCopy/common/workingCopyFileService.js";import"../../../../base/common/uri.js";import{Event as B}from"../../../../base/common/event.js";import{IDialogService as M}from"../../../../platform/dialogs/common/dialogs.js";import{ILabelService as z}from"../../../../platform/label/common/label.js";import{CancellationError as L}from"../../../../base/common/errors.js";const f="chat.editing.alwaysSaveWithGeneratedChanges";let v=class{constructor(e,o,t,i,r,a,c,l){this._fileConfigService=e;this._editorGroupService=o;this._textFileService=t;this._configService=r;this._workingCopyFileService=a;this._dialogService=c;this._labelService=l;this._store.add(B.any(i.onDidEndSession,i.onDidStashSession)(s=>{this._sessionData.get(s.session)?.dispose()})),this._store.add(r.onDidChangeConfiguration(s=>{!s.affectsConfiguration(f)&&!s.affectsConfiguration(S.AcceptedOrDiscardBeforeSave)||this._isDisabled()&&(u(this._sessionData.values()),this._sessionData.clear())}))}_store=new D;_saveParticipant=this._store.add(new b);_sessionData=new Map;dispose(){this._store.dispose(),u(this._sessionData.values())}markChanged(e){if(!this._isDisabled()&&!this._sessionData.has(e)){let o=e.targetUri;if(o.scheme===x.vscodeNotebookCell){const i=G.parse(o);if(!i)return;o=i?.notebook}this._sessionData.size===0&&this._installSaveParticpant();const t=this._fileConfigService.disableAutoSave(o);this._sessionData.set(e,{resourceUri:o,groupCandidate:this._editorGroupService.activeGroup,session:e,dispose:()=>{t.dispose(),this._sessionData.delete(e),this._sessionData.size===0&&this._saveParticipant.clear()}})}}_installSaveParticpant(){const e=new y,o=this._textFileService.files.addSaveParticipant({participate:(i,r,a,c)=>e.queue(()=>this._participate(r.savedFrom??i.textEditorModel?.uri,r.reason,a,c))}),t=this._workingCopyFileService.addSaveParticipant({participate:(i,r,a,c)=>e.queue(()=>this._participate(r.savedFrom??i.resource,r.reason,a,c))});this._saveParticipant.value=C(o,t,e)}async _participate(e,o,t,i){if(o!==k.EXPLICIT||this._isDisabled())return;const r=new Map;for(const[l,s]of this._sessionData)e?.toString()===s.resourceUri.toString()&&r.set(l,s);if(r.size===0)return;let a;if(r.size===1){const l=h.first(r.values()).session,s=l.agent.fullName,g=this._labelService.getUriBasenameLabel(l.textModelN.uri);a=d("message.1","Do you want to save the changes {0} made in {1}?",s,g)}else{const l=Array.from(h.map(r.values(),s=>this._labelService.getUriBasenameLabel(s.session.textModelN.uri)));a=d("message.2","Do you want to save the changes inline chat made in {0}?",l.join(", "))}const c=await this._dialogService.confirm({message:a,detail:d("detail","AI-generated changes may be incorect and should be reviewed before saving."),primaryButton:d("save","Save"),cancelButton:d("discard","Cancel"),checkbox:{label:d("config","Always save with AI-generated changes without asking"),checked:!1}});if(!c.confirmed)throw new L;c.checkboxChecked&&this._configService.updateValue(f,!0)}_isDisabled(){return this._configService.getValue(S.AcceptedOrDiscardBeforeSave)===!0||this._configService.getValue(f)}};v=m([n(0,U),n(1,F),n(2,E),n(3,P),n(4,w),n(5,A),n(6,M),n(7,z)],v);export{v as InlineChatSavingServiceImpl};
