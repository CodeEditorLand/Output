var D=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var b=(a,e,t,i)=>{for(var n=i>1?void 0:i?k(e,t):e,r=a.length-1,o;r>=0;r--)(o=a[r])&&(n=(i?o(e,t,n):o(n))||n);return i&&n&&D(e,t,n),n},h=(a,e)=>(t,i)=>e(t,i,a);import*as c from"../../../../base/browser/dom.js";import{StandardKeyboardEvent as S}from"../../../../base/browser/keyboardEvent.js";import{HoverPosition as w}from"../../../../base/browser/ui/hover/hoverWidget.js";import{SimpleIconLabel as I}from"../../../../base/browser/ui/iconLabel/simpleIconLabel.js";import{RunOnceScheduler as C}from"../../../../base/common/async.js";import"../../../../base/common/event.js";import{MarkdownString as x}from"../../../../base/common/htmlContent.js";import{KeyCode as v}from"../../../../base/common/keyCodes.js";import{DisposableStore as f}from"../../../../base/common/lifecycle.js";import{ILanguageService as H}from"../../../../editor/common/languages/language.js";import{localize as s}from"../../../../nls.js";import{ICommandService as A}from"../../../../platform/commands/common/commands.js";import{ConfigurationTarget as L}from"../../../../platform/configuration/common/configuration.js";import"../../../../platform/userDataProfile/common/userDataProfile.js";import{IUserDataSyncEnablementService as P}from"../../../../platform/userDataSync/common/userDataSync.js";import"./settingsTreeModels.js";import{EXPERIMENTAL_INDICATOR_DESCRIPTION as M,POLICY_SETTING_TAG as U,PREVIEW_INDICATOR_DESCRIPTION as W}from"../common/preferences.js";import{IWorkbenchConfigurationService as N}from"../../../services/configuration/common/configuration.js";import{IHoverService as R}from"../../../../platform/hover/browser/hover.js";const u=c.$;let O=new Set,y=[],m=class{constructor(e,t,i,n,r,o){this.configurationService=t;this.hoverService=i;this.userDataSyncEnablementService=n;this.languageService=r;this.commandService=o;this.indicatorsContainerElement=c.append(e,u(".setting-indicators-container")),this.indicatorsContainerElement.style.display="inline",this.previewIndicator=this.createPreviewIndicator(),this.isolatedIndicators=[this.previewIndicator],this.workspaceTrustIndicator=this.createWorkspaceTrustIndicator(),this.scopeOverridesIndicator=this.createScopeOverridesIndicator(),this.syncIgnoredIndicator=this.createSyncIgnoredIndicator(),this.defaultOverrideIndicator=this.createDefaultOverrideIndicator(),this.parenthesizedIndicators=[this.workspaceTrustIndicator,this.scopeOverridesIndicator,this.syncIgnoredIndicator,this.defaultOverrideIndicator]}indicatorsContainerElement;previewIndicator;workspaceTrustIndicator;scopeOverridesIndicator;syncIgnoredIndicator;defaultOverrideIndicator;isolatedIndicators=[];parenthesizedIndicators;keybindingListeners=new f;focusedIndex=0;defaultHoverOptions={trapFocus:!0,position:{hoverPosition:w.BELOW},appearance:{showPointer:!0,compact:!1}};addHoverDisposables(e,t,i){e.clear();const n=e.add(new C(()=>{const r=i(!1);r&&e.add(r)},this.configurationService.getValue("workbench.hover.delay")));e.add(c.addDisposableListener(t,c.EventType.MOUSE_OVER,()=>{n.isScheduled()||n.schedule()})),e.add(c.addDisposableListener(t,c.EventType.MOUSE_LEAVE,()=>{n.cancel()})),e.add(c.addDisposableListener(t,c.EventType.KEY_DOWN,r=>{const o=new S(r);if(o.equals(v.Space)||o.equals(v.Enter)){const p=i(!0);p&&e.add(p),r.preventDefault()}}))}createWorkspaceTrustIndicator(){const e=new f,t=u("span.setting-indicator.setting-item-workspace-trust"),i=e.add(new I(t));i.text="$(warning) "+s("workspaceUntrustedLabel","Setting value not applied");const n=s("trustLabel","The setting value can only be applied in a trusted workspace."),r=o=>this.hoverService.showHover({...this.defaultHoverOptions,content:n,target:t,actions:[{label:s("manageWorkspaceTrust","Manage Workspace Trust"),commandId:"workbench.trust.manage",run:p=>{this.commandService.executeCommand("workbench.trust.manage")}}]},o);return this.addHoverDisposables(e,t,r),{element:t,label:i,disposables:e}}createScopeOverridesIndicator(){const e=new f,t=u("span.setting-item-overrides"),i=e.add(new I(t));return{element:t,label:i,disposables:e}}createSyncIgnoredIndicator(){const e=new f,t=u("span.setting-indicator.setting-item-ignored"),i=e.add(new I(t));i.text=s("extensionSyncIgnoredLabel","Not synced");const n=s("syncIgnoredTitle","This setting is ignored during sync"),r=o=>this.hoverService.showHover({...this.defaultHoverOptions,content:n,target:t},o);return this.addHoverDisposables(e,t,r),{element:t,label:i,disposables:e}}createDefaultOverrideIndicator(){const e=new f,t=u("span.setting-indicator.setting-item-default-overridden"),i=e.add(new I(t));return i.text=s("defaultOverriddenLabel","Default value changed"),{element:t,label:i,disposables:e}}createPreviewIndicator(){const e=new f,t=u("span.setting-indicator.setting-item-preview"),i=e.add(new I(t));return{element:t,label:i,disposables:e}}render(){this.indicatorsContainerElement.innerText="",this.indicatorsContainerElement.style.display="none";const e=this.isolatedIndicators.filter(i=>i.element.style.display!=="none");if(e.length){this.indicatorsContainerElement.style.display="inline";for(let i=0;i<e.length;i++)c.append(this.indicatorsContainerElement,e[i].element)}const t=this.parenthesizedIndicators.filter(i=>i.element.style.display!=="none");if(t.length){this.indicatorsContainerElement.style.display="inline",c.append(this.indicatorsContainerElement,u("span",void 0,"("));for(let i=0;i<t.length-1;i++)c.append(this.indicatorsContainerElement,t[i].element),c.append(this.indicatorsContainerElement,u("span.comma",void 0," \u2022 "));c.append(this.indicatorsContainerElement,t[t.length-1].element),c.append(this.indicatorsContainerElement,u("span",void 0,")"))}this.resetIndicatorNavigationKeyBindings([...e,...t])}resetIndicatorNavigationKeyBindings(e){if(this.keybindingListeners.clear(),this.indicatorsContainerElement.role=e.length>=1?"toolbar":"button",!e.length)return;const t=e[0].focusElement??e[0].element;t.tabIndex=0,this.keybindingListeners.add(c.addDisposableListener(this.indicatorsContainerElement,"keydown",i=>{const n=new S(i);let r=!0;if(n.equals(v.Home))this.focusIndicatorAt(e,0);else if(n.equals(v.End))this.focusIndicatorAt(e,e.length-1);else if(n.equals(v.RightArrow)){const o=(this.focusedIndex+1)%e.length;this.focusIndicatorAt(e,o)}else if(n.equals(v.LeftArrow)){const o=this.focusedIndex?this.focusedIndex-1:e.length-1;this.focusIndicatorAt(e,o)}else r=!1;r&&(i.preventDefault(),i.stopPropagation())}))}focusIndicatorAt(e,t){if(t===this.focusedIndex)return;const i=e[t],n=i.focusElement??i.element;n.tabIndex=0,n.focus();const r=e[this.focusedIndex],o=r.focusElement??r.element;o.tabIndex=-1,this.focusedIndex=t}updateWorkspaceTrust(e){this.workspaceTrustIndicator.element.style.display=e.isUntrusted?"inline":"none",this.render()}updateSyncIgnored(e,t){this.syncIgnoredIndicator.element.style.display=this.userDataSyncEnablementService.isEnabled()&&t.includes(e.setting.key)?"inline":"none",this.render(),y!==t&&(y=t,O=new Set(y))}updatePreviewIndicator(e){const t=e.tags?.has("preview"),i=e.tags?.has("experimental");this.previewIndicator.element.style.display=t||i?"inline":"none",this.previewIndicator.label.text=t?s("previewLabel","Preview"):s("experimentalLabel","Experimental");const n=t?W:M,r=o=>this.hoverService.showHover({...this.defaultHoverOptions,content:n,target:this.previewIndicator.element},o);this.addHoverDisposables(this.previewIndicator.disposables,this.previewIndicator.element,r),this.render()}getInlineScopeDisplayText(e){const[t,i]=e.split(":"),n=t==="user"?s("user","User"):t==="workspace"?s("workspace","Workspace"):s("remote","Remote");return i?`${this.languageService.getLanguageName(i)} > ${n}`:n}dispose(){this.keybindingListeners.dispose();for(const e of this.isolatedIndicators)e.disposables.dispose();for(const e of this.parenthesizedIndicators)e.disposables.dispose()}updateScopeOverrides(e,t,i){if(this.scopeOverridesIndicator.element.innerText="",this.scopeOverridesIndicator.element.style.display="none",this.scopeOverridesIndicator.focusElement=this.scopeOverridesIndicator.element,e.hasPolicyValue){this.scopeOverridesIndicator.element.style.display="inline",this.scopeOverridesIndicator.element.classList.add("setting-indicator"),this.scopeOverridesIndicator.label.text="$(warning) "+s("policyLabelText","Setting value not applied");const n=s("policyDescription","This setting is managed by your organization and its applied value cannot be changed."),r=o=>this.hoverService.showHover({...this.defaultHoverOptions,content:n,actions:[{label:s("policyFilterLink","View policy settings"),commandId:"_settings.action.viewPolicySettings",run:p=>{i.fire(`@${U}`)}}],target:this.scopeOverridesIndicator.element},o);this.addHoverDisposables(this.scopeOverridesIndicator.disposables,this.scopeOverridesIndicator.element,r)}else if(e.settingsTarget===L.USER_LOCAL&&this.configurationService.isSettingAppliedForAllProfiles(e.setting.key)){this.scopeOverridesIndicator.element.style.display="inline",this.scopeOverridesIndicator.element.classList.add("setting-indicator"),this.scopeOverridesIndicator.label.text=s("applicationSetting","Applies to all profiles");const n=s("applicationSettingDescription","The setting is not specific to the current profile, and will retain its value when switching profiles."),r=o=>this.hoverService.showHover({...this.defaultHoverOptions,content:n,target:this.scopeOverridesIndicator.element},o);this.addHoverDisposables(this.scopeOverridesIndicator.disposables,this.scopeOverridesIndicator.element,r)}else if(e.overriddenScopeList.length||e.overriddenDefaultsLanguageList.length)if(e.overriddenScopeList.length===1&&!e.overriddenDefaultsLanguageList.length){this.scopeOverridesIndicator.element.style.display="inline",this.scopeOverridesIndicator.element.classList.remove("setting-indicator"),this.scopeOverridesIndicator.disposables.clear();const n=e.isConfigured?s("alsoConfiguredIn","Also modified in"):s("configuredIn","Modified in");this.scopeOverridesIndicator.label.text=`${n} `;const r=e.overriddenScopeList[0],o=c.append(this.scopeOverridesIndicator.element,u("a.modified-scope",void 0,this.getInlineScopeDisplayText(r)));o.tabIndex=-1,this.scopeOverridesIndicator.focusElement=o;const p=d=>{const[l,g]=r.split(":");t.fire({settingKey:e.setting.key,scope:l,language:g}),d.preventDefault(),d.stopPropagation()};this.scopeOverridesIndicator.disposables.add(c.addDisposableListener(o,c.EventType.CLICK,d=>{p(d)})),this.scopeOverridesIndicator.disposables.add(c.addDisposableListener(o,c.EventType.KEY_DOWN,d=>{const l=new S(d);(l.equals(v.Space)||l.equals(v.Enter))&&p(d)}))}else{this.scopeOverridesIndicator.element.style.display="inline",this.scopeOverridesIndicator.element.classList.add("setting-indicator");const n=e.isConfigured?s("alsoConfiguredElsewhere","Also modified elsewhere"):s("configuredElsewhere","Modified elsewhere");this.scopeOverridesIndicator.label.text=n;let r="";if(e.overriddenScopeList.length){r=e.isConfigured?s("alsoModifiedInScopes","The setting has also been modified in the following scopes:"):s("modifiedInScopes","The setting has been modified in the following scopes:");for(const l of e.overriddenScopeList){const g=this.getInlineScopeDisplayText(l);r+=`
- [${g}](${encodeURIComponent(l)} "${$(l,this.languageService)}")`}}if(e.overriddenDefaultsLanguageList.length){r&&(r+=`

`);const d=s("hasDefaultOverridesForLanguages","The following languages have default overrides:");r+=d;for(const l of e.overriddenDefaultsLanguageList){const g=this.languageService.getLanguageName(l);r+=`
- [${g}](${encodeURIComponent(`default:${l}`)} "${g}")`}}const o={value:r,isTrusted:!1,supportHtml:!1},p=d=>this.hoverService.showHover({...this.defaultHoverOptions,content:o,linkHandler:l=>{const[g,T]=decodeURIComponent(l).split(":");t.fire({settingKey:e.setting.key,scope:g,language:T})},target:this.scopeOverridesIndicator.element},d);this.addHoverDisposables(this.scopeOverridesIndicator.disposables,this.scopeOverridesIndicator.element,p)}this.render()}updateDefaultOverrideIndicator(e){this.defaultOverrideIndicator.element.style.display="none";let t=E(e);if(t!==void 0){this.defaultOverrideIndicator.element.style.display="inline",this.defaultOverrideIndicator.disposables.clear(),Array.isArray(t)&&t.length===1&&(t=t[0]);let i;Array.isArray(t)?(t=t.map(r=>`\`${r}\``),i=s("multipledefaultOverriddenDetails","A default values has been set by {0}",t.slice(0,-1).join(", ")+" & "+t.slice(-1))):i=s("defaultOverriddenDetails","Default setting value overridden by `{0}`",t);const n=r=>this.hoverService.showHover({content:new x().appendMarkdown(i),target:this.defaultOverrideIndicator.element,position:{hoverPosition:w.BELOW},appearance:{showPointer:!0,compact:!1}},r);this.addHoverDisposables(this.defaultOverrideIndicator.disposables,this.defaultOverrideIndicator.element,n)}this.render()}};m=b([h(1,N),h(2,R),h(3,P),h(4,H),h(5,A)],m);function E(a){let e;const t=a.defaultValueSource;if(t)if(t instanceof Map){e=[];for(const[,i]of t){const n=typeof i!="string"?i.displayName??i.id:i;e.includes(n)||e.push(n)}}else typeof t=="string"?e=t:e=t.displayName??t.id;return e}function $(a,e){const[t,i]=a.split(":"),n=t==="user"?s("user","User"):t==="workspace"?s("workspace","Workspace"):s("remote","Remote");return i?s("modifiedInScopeForLanguage","The {0} scope for {1}",n,e.getLanguageName(i)):n}function _(a,e){const[t,i]=a.split(":"),n=t==="user"?s("user","User"):t==="workspace"?s("workspace","Workspace"):s("remote","Remote");return i?s("modifiedInScopeForLanguageMidSentence","the {0} scope for {1}",n.toLowerCase(),e.getLanguageName(i)):n}function pe(a,e,t,i){const n=[];if(a.isUntrusted&&n.push(s("workspaceUntrustedAriaLabel","Workspace untrusted; setting value not applied")),a.hasPolicyValue)n.push(s("policyDescriptionAccessible","Managed by organization policy; setting value not applied"));else if(a.settingsTarget===L.USER_LOCAL&&e.isSettingAppliedForAllProfiles(a.setting.key))n.push(s("applicationSettingDescriptionAccessible","Setting value retained when switching profiles"));else{const d=a.isConfigured?s("alsoConfiguredIn","Also modified in"):s("configuredIn","Modified in"),l=a.overriddenScopeList.map(g=>_(g,i)).join(", ");a.overriddenScopeList.length&&n.push(`${d} ${l}`)}O.has(a.setting.key)&&n.push(s("syncIgnoredAriaLabel","Setting ignored during sync"));let r=E(a);if(r!==void 0){Array.isArray(r)&&r.length===1&&(r=r[0]);let d;Array.isArray(r)?d=s("multipleDefaultOverriddenDetailsAriaLabel","{0} override the default value",r.slice(0,-1).join(", ")+" & "+r.slice(-1)):d=s("defaultOverriddenDetailsAriaLabel","{0} overrides the default value",r),n.push(d)}const o=a.overriddenDefaultsLanguageList.map(d=>i.getLanguageName(d)).join(", ");if(a.overriddenDefaultsLanguageList.length){const d=s("defaultOverriddenLanguagesList","Language-specific default values exist for {0}",o);n.push(d)}return n.join(". ")}export{m as SettingsTreeIndicatorsLabel,pe as getIndicatorsLabelAriaLabel};
