{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/notebookSearch/notebookSearchModelBase.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextSearchMatch } from '../../../../services/search/common/search.js';\nimport { ICellViewModel } from '../../../notebook/browser/notebookBrowser.js';\nimport { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';\nimport { INotebookCellMatchNoModel } from '../../common/searchNotebookHelpers.js';\nimport { ISearchTreeFileMatch, ISearchTreeMatch, isSearchTreeFileMatch } from '../searchTreeModel/searchTreeCommon.js';\nimport { INotebookCellMatchWithModel } from './searchNotebookHelpers.js';\n\nexport interface INotebookFileInstanceMatch extends ISearchTreeFileMatch {\n\tbindNotebookEditorWidget(editor: NotebookEditorWidget): void;\n\tupdateMatchesForEditorWidget(): Promise<void>;\n\tunbindNotebookEditorWidget(editor: NotebookEditorWidget): void;\n\tupdateNotebookHighlights(): void;\n\tgetCellMatch(cellID: string): ICellMatch | undefined;\n\taddCellMatch(rawCell: INotebookCellMatchNoModel | INotebookCellMatchWithModel): void;\n\tshowMatch(match: IMatchInNotebook): Promise<void>;\n\tcellMatches(): ICellMatch[];\n}\n\nexport function isNotebookFileMatch(obj: any): obj is INotebookFileInstanceMatch {\n\treturn obj &&\n\t\ttypeof obj.bindNotebookEditorWidget === 'function' &&\n\t\ttypeof obj.updateMatchesForEditorWidget === 'function' &&\n\t\ttypeof obj.unbindNotebookEditorWidget === 'function' &&\n\t\ttypeof obj.updateNotebookHighlights === 'function'\n\t\t&& isSearchTreeFileMatch(obj);\n}\n\nexport interface IMatchInNotebook extends ISearchTreeMatch {\n\tparent(): INotebookFileInstanceMatch;\n\tcellParent: ICellMatch;\n\tisWebviewMatch(): boolean;\n\tcellIndex: number;\n\twebviewIndex: number | undefined;\n\tcell: ICellViewModel | undefined;\n}\nexport function isIMatchInNotebook(obj: any): obj is IMatchInNotebook {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.parent === 'function' &&\n\t\ttypeof obj.cellParent === 'object' &&\n\t\ttypeof obj.isWebviewMatch === 'function' &&\n\t\ttypeof obj.isReadonly === 'function' &&\n\t\ttypeof obj.cellIndex === 'number' &&\n\t\t(typeof obj.webviewIndex === 'number' || obj.webviewIndex === undefined) &&\n\t\t(typeof obj.cell === 'object' || obj.cell === undefined);\n}\n\nexport interface ICellMatch {\n\thasCellViewModel(): boolean;\n\tcontext: Map<number, string>;\n\tmatches(): IMatchInNotebook[];\n\tcontentMatches: IMatchInNotebook[];\n\twebviewMatches: IMatchInNotebook[];\n\tremove(matches: IMatchInNotebook | IMatchInNotebook[]): void;\n\tclearAllMatches(): void;\n\taddContentMatches(textSearchMatches: ITextSearchMatch[]): void;\n\taddContext(textSearchMatches: ITextSearchMatch[]): void;\n\taddWebviewMatches(textSearchMatches: ITextSearchMatch[]): void;\n\tsetCellModel(cell: ICellViewModel): void;\n\tparent: INotebookFileInstanceMatch;\n\tid: string;\n\tcellIndex: number;\n\tcell: ICellViewModel | undefined;\n}\n"],
  "mappings": ";;AAKA,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,4BAA4B;AACrC,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB,kBAAkB,6BAA6B;AAC9E,SAAS,mCAAmC;AAarC,SAAS,oBAAoB,KAA6C;AAChF,SAAO,OACN,OAAO,IAAI,6BAA6B,cACxC,OAAO,IAAI,iCAAiC,cAC5C,OAAO,IAAI,+BAA+B,cAC1C,OAAO,IAAI,6BAA6B,cACrC,sBAAsB,GAAG;AAC9B;AAPgB;AAiBT,SAAS,mBAAmB,KAAmC;AACrE,SAAO,OAAO,QAAQ,YACrB,QAAQ,QACR,OAAO,IAAI,WAAW,cACtB,OAAO,IAAI,eAAe,YAC1B,OAAO,IAAI,mBAAmB,cAC9B,OAAO,IAAI,eAAe,cAC1B,OAAO,IAAI,cAAc,aACxB,OAAO,IAAI,iBAAiB,YAAY,IAAI,iBAAiB,YAC7D,OAAO,IAAI,SAAS,YAAY,IAAI,SAAS;AAChD;AAVgB;",
  "names": []
}
