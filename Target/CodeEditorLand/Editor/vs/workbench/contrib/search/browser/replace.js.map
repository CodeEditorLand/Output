{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/replace.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgress, IProgressStep } from '../../../../platform/progress/common/progress.js';\nimport { ISearchTreeFileMatch, ISearchTreeMatch, FileMatchOrMatch } from './searchTreeModel/searchTreeCommon.js';\n\nexport const IReplaceService = createDecorator<IReplaceService>('replaceService');\n\nexport interface IReplaceService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Replaces the given match in the file that match belongs to\n\t */\n\treplace(match: ISearchTreeMatch): Promise<any>;\n\n\t/**\n\t *\tReplace all the matches from the given file matches in the files\n\t *  You can also pass the progress runner to update the progress of replacing.\n\t */\n\treplace(files: ISearchTreeFileMatch[], progress?: IProgress<IProgressStep>): Promise<any>;\n\n\t/**\n\t * Opens the replace preview for given file match or match\n\t */\n\topenReplacePreview(element: FileMatchOrMatch, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<any>;\n\n\t/**\n\t * Update the replace preview for the given file.\n\t * If `override` is `true`, then replace preview is constructed from source model\n\t */\n\tupdateReplacePreview(file: ISearchTreeFileMatch, override?: boolean): Promise<void>;\n}\n"],
  "mappings": "AAKA,SAAS,uBAAuB;AAChC,SAAS,WAAW,qBAAqB;AACzC,SAAS,sBAAsB,kBAAkB,wBAAwB;AAElE,MAAM,kBAAkB,gBAAiC,gBAAgB;",
  "names": []
}
