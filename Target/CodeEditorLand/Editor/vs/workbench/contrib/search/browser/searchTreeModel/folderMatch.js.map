{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/folderMatch.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Lazy } from '../../../../../base/common/lazy.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../base/common/map.js';\nimport { TernarySearchTree } from '../../../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ILabelService } from '../../../../../platform/label/common/label.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IReplaceService } from './../replace.js';\nimport { IFileMatch, IPatternInfo, ITextQuery, ITextSearchPreviewOptions, resultIsMatch } from '../../../../services/search/common/search.js';\n\nimport { FileMatchImpl } from './fileMatch.js';\nimport { IChangeEvent, ISearchTreeFileMatch, ISearchTreeFolderMatch, ISearchTreeFolderMatchWithResource, ISearchTreeFolderMatchNoRoot, ISearchTreeFolderMatchWorkspaceRoot, ISearchModel, ISearchResult, isSearchTreeFolderMatchWorkspaceRoot, ITextSearchHeading, isSearchTreeFolderMatchNoRoot, FOLDER_MATCH_PREFIX, getFileMatches } from './searchTreeCommon.js';\nimport { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';\nimport { isINotebookFileMatchNoModel } from '../../common/searchNotebookHelpers.js';\nimport { NotebookCompatibleFileMatch } from '../notebookSearch/notebookSearchModel.js';\nimport { isINotebookFileMatchWithModel, getIDFromINotebookCellMatch } from '../notebookSearch/searchNotebookHelpers.js';\nimport { isNotebookFileMatch } from '../notebookSearch/notebookSearchModelBase.js';\nimport { textSearchResultToMatches } from './match.js';\n\nexport class FolderMatchImpl extends Disposable implements ISearchTreeFolderMatch {\n\n\tprotected _onChange = this._register(new Emitter<IChangeEvent>());\n\treadonly onChange: Event<IChangeEvent> = this._onChange.event;\n\n\tprivate _onDispose = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprotected _fileMatches: ResourceMap<ISearchTreeFileMatch>;\n\tprotected _folderMatches: ResourceMap<FolderMatchWithResourceImpl>;\n\tprotected _folderMatchesMap: TernarySearchTree<URI, FolderMatchWithResourceImpl>;\n\tprotected _unDisposedFileMatches: ResourceMap<ISearchTreeFileMatch>;\n\tprotected _unDisposedFolderMatches: ResourceMap<FolderMatchWithResourceImpl>;\n\tprivate _replacingAll: boolean = false;\n\tprivate _name: Lazy<string>;\n\tprivate readonly _id: string;\n\n\tconstructor(\n\t\tprotected _resource: URI | null,\n\t\t_id: string,\n\t\tprotected _index: number,\n\t\tprotected _query: ITextQuery,\n\t\tprivate _parent: ITextSearchHeading | FolderMatchImpl,\n\t\tprivate _searchResult: ISearchResult,\n\t\tprivate _closestRoot: ISearchTreeFolderMatchWorkspaceRoot | null,\n\t\t@IReplaceService private readonly replaceService: IReplaceService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\t\tthis._fileMatches = new ResourceMap<ISearchTreeFileMatch>();\n\t\tthis._folderMatches = new ResourceMap<FolderMatchWithResourceImpl>();\n\t\tthis._folderMatchesMap = TernarySearchTree.forUris<FolderMatchWithResourceImpl>(key => this.uriIdentityService.extUri.ignorePathCasing(key));\n\t\tthis._unDisposedFileMatches = new ResourceMap<ISearchTreeFileMatch>();\n\t\tthis._unDisposedFolderMatches = new ResourceMap<FolderMatchWithResourceImpl>();\n\t\tthis._name = new Lazy(() => this.resource ? labelService.getUriBasenameLabel(this.resource) : '');\n\t\tthis._id = FOLDER_MATCH_PREFIX + _id;\n\t}\n\n\tget searchModel(): ISearchModel {\n\t\treturn this._searchResult.searchModel;\n\t}\n\n\tget showHighlights(): boolean {\n\t\treturn this._parent.showHighlights;\n\t}\n\n\tget closestRoot(): ISearchTreeFolderMatchWorkspaceRoot | null {\n\t\treturn this._closestRoot;\n\t}\n\n\tset replacingAll(b: boolean) {\n\t\tthis._replacingAll = b;\n\t}\n\n\tid(): string {\n\t\treturn this._id;\n\t}\n\n\tget resource(): URI | null {\n\t\treturn this._resource;\n\t}\n\n\tindex(): number {\n\t\treturn this._index;\n\t}\n\n\tname(): string {\n\t\treturn this._name.value;\n\t}\n\n\tparent(): ITextSearchHeading | FolderMatchImpl {\n\t\treturn this._parent;\n\t}\n\n\tisAIContributed(): boolean {\n\t\treturn false;\n\t}\n\n\tget hasChildren(): boolean {\n\t\treturn this._fileMatches.size > 0 || this._folderMatches.size > 0;\n\t}\n\n\tbindModel(model: ITextModel): void {\n\t\tconst fileMatch = this._fileMatches.get(model.uri);\n\n\t\tif (fileMatch) {\n\t\t\tfileMatch.bindModel(model);\n\t\t} else {\n\t\t\tconst folderMatch = this.getFolderMatch(model.uri);\n\t\t\tconst match = folderMatch?.getDownstreamFileMatch(model.uri);\n\t\t\tmatch?.bindModel(model);\n\t\t}\n\t}\n\n\tpublic createIntermediateFolderMatch(resource: URI, id: string, index: number, query: ITextQuery, baseWorkspaceFolder: ISearchTreeFolderMatchWorkspaceRoot): FolderMatchWithResourceImpl {\n\t\tconst folderMatch = this._register(this.instantiationService.createInstance(FolderMatchWithResourceImpl, resource, id, index, query, this, this._searchResult, baseWorkspaceFolder));\n\t\tthis.configureIntermediateMatch(folderMatch);\n\t\tthis.doAddFolder(folderMatch);\n\t\treturn folderMatch;\n\t}\n\n\tpublic configureIntermediateMatch(folderMatch: FolderMatchWithResourceImpl) {\n\t\tconst disposable = folderMatch.onChange((event) => this.onFolderChange(folderMatch, event));\n\t\tthis._register(folderMatch.onDispose(() => disposable.dispose()));\n\t}\n\n\tclear(clearingAll = false): void {\n\t\tconst changed: ISearchTreeFileMatch[] = this.allDownstreamFileMatches();\n\t\tthis.disposeMatches();\n\t\tthis._onChange.fire({ elements: changed, removed: true, added: false, clearingAll });\n\t}\n\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource | (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[]): void {\n\t\tif (!Array.isArray(matches)) {\n\t\t\tmatches = [matches];\n\t\t}\n\t\tconst allMatches = getFileMatches(matches);\n\t\tthis.doRemoveFile(allMatches);\n\t}\n\n\tasync replace(match: FileMatchImpl): Promise<any> {\n\t\treturn this.replaceService.replace([match]).then(() => {\n\t\t\tthis.doRemoveFile([match], true, true, true);\n\t\t});\n\t}\n\n\treplaceAll(): Promise<any> {\n\t\tconst matches = this.matches();\n\t\treturn this.batchReplace(matches);\n\t}\n\n\tmatches(): (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[] {\n\t\treturn [...this.fileMatchesIterator(), ...this.folderMatchesIterator()];\n\t}\n\n\tfileMatchesIterator(): IterableIterator<ISearchTreeFileMatch> {\n\t\treturn this._fileMatches.values();\n\t}\n\n\tfolderMatchesIterator(): IterableIterator<ISearchTreeFolderMatchWithResource> {\n\t\treturn this._folderMatches.values();\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (this.fileCount() + this.folderCount()) === 0;\n\t}\n\n\tgetDownstreamFileMatch(uri: URI): ISearchTreeFileMatch | null {\n\t\tconst directChildFileMatch = this._fileMatches.get(uri);\n\t\tif (directChildFileMatch) {\n\t\t\treturn directChildFileMatch;\n\t\t}\n\n\t\tconst folderMatch = this.getFolderMatch(uri);\n\t\tconst match = folderMatch?.getDownstreamFileMatch(uri);\n\t\tif (match) {\n\t\t\treturn match;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tallDownstreamFileMatches(): ISearchTreeFileMatch[] {\n\t\tlet recursiveChildren: ISearchTreeFileMatch[] = [];\n\t\tconst iterator = this.folderMatchesIterator();\n\t\tfor (const elem of iterator) {\n\t\t\trecursiveChildren = recursiveChildren.concat(elem.allDownstreamFileMatches());\n\t\t}\n\n\t\treturn [...this.fileMatchesIterator(), ...recursiveChildren];\n\t}\n\n\tprivate fileCount(): number {\n\t\treturn this._fileMatches.size;\n\t}\n\n\tprivate folderCount(): number {\n\t\treturn this._folderMatches.size;\n\t}\n\n\tcount(): number {\n\t\treturn this.fileCount() + this.folderCount();\n\t}\n\n\trecursiveFileCount(): number {\n\t\treturn this.allDownstreamFileMatches().length;\n\t}\n\n\trecursiveMatchCount(): number {\n\t\treturn this.allDownstreamFileMatches().reduce<number>((prev, match) => prev + match.count(), 0);\n\t}\n\n\tget query(): ITextQuery | null {\n\t\treturn this._query;\n\t}\n\n\tdoAddFile(fileMatch: ISearchTreeFileMatch): void {\n\t\tthis._fileMatches.set(fileMatch.resource, fileMatch);\n\t\tif (this._unDisposedFileMatches.has(fileMatch.resource)) {\n\t\t\tthis._unDisposedFileMatches.delete(fileMatch.resource);\n\t\t}\n\t}\n\n\thasOnlyReadOnlyMatches(): boolean {\n\t\treturn Array.from(this._fileMatches.values()).every(fm => fm.hasOnlyReadOnlyMatches());\n\t}\n\n\tprotected uriHasParent(parent: URI, child: URI) {\n\t\treturn this.uriIdentityService.extUri.isEqualOrParent(child, parent) && !this.uriIdentityService.extUri.isEqual(child, parent);\n\t}\n\n\tprivate isInParentChain(folderMatch: FolderMatchWithResourceImpl) {\n\n\t\tlet matchItem: FolderMatchImpl | ITextSearchHeading = this;\n\t\twhile (matchItem instanceof FolderMatchImpl) {\n\t\t\tif (matchItem.id() === folderMatch.id()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmatchItem = matchItem.parent();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getFolderMatch(resource: URI): FolderMatchWithResourceImpl | undefined {\n\t\tconst folderMatch = this._folderMatchesMap.findSubstr(resource);\n\t\treturn folderMatch;\n\t}\n\n\tdoAddFolder(folderMatch: FolderMatchWithResourceImpl) {\n\t\tif (this.resource && !this.uriHasParent(this.resource, folderMatch.resource)) {\n\t\t\tthrow Error(`${folderMatch.resource} does not belong as a child of ${this.resource}`);\n\t\t} else if (this.isInParentChain(folderMatch)) {\n\t\t\tthrow Error(`${folderMatch.resource} is a parent of ${this.resource}`);\n\t\t}\n\n\t\tthis._folderMatches.set(folderMatch.resource, folderMatch);\n\t\tthis._folderMatchesMap.set(folderMatch.resource, folderMatch);\n\t\tif (this._unDisposedFolderMatches.has(folderMatch.resource)) {\n\t\t\tthis._unDisposedFolderMatches.delete(folderMatch.resource);\n\t\t}\n\t}\n\n\tprivate async batchReplace(matches: (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[]): Promise<any> {\n\t\tconst allMatches = getFileMatches(matches);\n\n\t\tawait this.replaceService.replace(allMatches);\n\t\tthis.doRemoveFile(allMatches, true, true, true);\n\t}\n\n\tpublic onFileChange(fileMatch: ISearchTreeFileMatch, removed = false): void {\n\t\tlet added = false;\n\t\tif (!this._fileMatches.has(fileMatch.resource)) {\n\t\t\tthis.doAddFile(fileMatch);\n\t\t\tadded = true;\n\t\t}\n\t\tif (fileMatch.count() === 0) {\n\t\t\tthis.doRemoveFile([fileMatch], false, false);\n\t\t\tadded = false;\n\t\t\tremoved = true;\n\t\t}\n\t\tif (!this._replacingAll) {\n\t\t\tthis._onChange.fire({ elements: [fileMatch], added: added, removed: removed });\n\t\t}\n\t}\n\n\tpublic onFolderChange(folderMatch: FolderMatchWithResourceImpl, event: IChangeEvent): void {\n\t\tif (!this._folderMatches.has(folderMatch.resource)) {\n\t\t\tthis.doAddFolder(folderMatch);\n\t\t}\n\t\tif (folderMatch.isEmpty()) {\n\t\t\tthis._folderMatches.delete(folderMatch.resource);\n\t\t\tfolderMatch.dispose();\n\t\t}\n\n\t\tthis._onChange.fire(event);\n\t}\n\n\tdoRemoveFile(fileMatches: ISearchTreeFileMatch[], dispose: boolean = true, trigger: boolean = true, keepReadonly = false): void {\n\n\t\tconst removed = [];\n\t\tfor (const match of fileMatches as ISearchTreeFileMatch[]) {\n\t\t\tif (this._fileMatches.get(match.resource)) {\n\t\t\t\tif (keepReadonly && match.hasReadonlyMatches()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._fileMatches.delete(match.resource);\n\t\t\t\tif (dispose) {\n\t\t\t\t\tmatch.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tthis._unDisposedFileMatches.set(match.resource, match);\n\t\t\t\t}\n\t\t\t\tremoved.push(match);\n\t\t\t} else {\n\t\t\t\tconst folder = this.getFolderMatch(match.resource);\n\t\t\t\tif (folder) {\n\t\t\t\t\tfolder.doRemoveFile([match], dispose, trigger);\n\t\t\t\t} else {\n\t\t\t\t\tthrow Error(`FileMatch ${match.resource} is not located within FolderMatch ${this.resource}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (trigger) {\n\t\t\tthis._onChange.fire({ elements: removed, removed: true });\n\t\t}\n\t}\n\n\tasync bindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI) {\n\t\tconst fileMatch = this._fileMatches.get(resource);\n\t\tif (isNotebookFileMatch(fileMatch)) {\n\t\t\tif (fileMatch) {\n\t\t\t\tfileMatch.bindNotebookEditorWidget(editor);\n\t\t\t\tawait fileMatch.updateMatchesForEditorWidget();\n\t\t\t} else {\n\t\t\t\tconst folderMatches = this.folderMatchesIterator();\n\t\t\t\tfor (const elem of folderMatches) {\n\t\t\t\t\tawait elem.bindNotebookEditorWidget(editor, resource);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\taddFileMatch(raw: IFileMatch[], silent: boolean, searchInstanceID: string): void {\n\t\t// when adding a fileMatch that has intermediate directories\n\t\tconst added: ISearchTreeFileMatch[] = [];\n\t\tconst updated: ISearchTreeFileMatch[] = [];\n\n\t\traw.forEach(rawFileMatch => {\n\t\t\tconst existingFileMatch = this.getDownstreamFileMatch(rawFileMatch.resource);\n\t\t\tif (existingFileMatch) {\n\n\t\t\t\tif (rawFileMatch.results) {\n\t\t\t\t\trawFileMatch\n\t\t\t\t\t\t.results\n\t\t\t\t\t\t.filter(resultIsMatch)\n\t\t\t\t\t\t.forEach(m => {\n\t\t\t\t\t\t\ttextSearchResultToMatches(m, existingFileMatch, false)\n\t\t\t\t\t\t\t\t.forEach(m => existingFileMatch.add(m));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// add cell matches\n\t\t\t\tif (isINotebookFileMatchWithModel(rawFileMatch) || isINotebookFileMatchNoModel(rawFileMatch)) {\n\t\t\t\t\trawFileMatch.cellResults?.forEach(rawCellMatch => {\n\t\t\t\t\t\tif (isNotebookFileMatch(existingFileMatch)) {\n\t\t\t\t\t\t\tconst existingCellMatch = existingFileMatch.getCellMatch(getIDFromINotebookCellMatch(rawCellMatch));\n\t\t\t\t\t\t\tif (existingCellMatch) {\n\t\t\t\t\t\t\t\texistingCellMatch.addContentMatches(rawCellMatch.contentResults);\n\t\t\t\t\t\t\t\texistingCellMatch.addWebviewMatches(rawCellMatch.webviewResults);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\texistingFileMatch.addCellMatch(rawCellMatch);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tupdated.push(existingFileMatch);\n\n\t\t\t\tif (rawFileMatch.results && rawFileMatch.results.length > 0) {\n\t\t\t\t\texistingFileMatch.addContext(rawFileMatch.results);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isSearchTreeFolderMatchWorkspaceRoot(this) || isSearchTreeFolderMatchNoRoot(this)) {\n\t\t\t\t\tconst fileMatch = this.createAndConfigureFileMatch(rawFileMatch, searchInstanceID);\n\t\t\t\t\tadded.push(fileMatch);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst elements = [...added, ...updated];\n\t\tif (!silent && elements.length) {\n\t\t\tthis._onChange.fire({ elements, added: !!added.length });\n\t\t}\n\t}\n\n\tunbindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI) {\n\t\tconst fileMatch = this._fileMatches.get(resource);\n\n\t\tif (isNotebookFileMatch(fileMatch)) {\n\t\t\tif (fileMatch) {\n\t\t\t\tfileMatch.unbindNotebookEditorWidget(editor);\n\t\t\t} else {\n\t\t\t\tconst folderMatches = this.folderMatchesIterator();\n\t\t\t\tfor (const elem of folderMatches) {\n\t\t\t\t\telem.unbindNotebookEditorWidget(editor, resource);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tdisposeMatches(): void {\n\t\t[...this._fileMatches.values()].forEach((fileMatch: ISearchTreeFileMatch) => fileMatch.dispose());\n\t\t[...this._folderMatches.values()].forEach((folderMatch: FolderMatchImpl) => folderMatch.disposeMatches());\n\t\t[...this._unDisposedFileMatches.values()].forEach((fileMatch: ISearchTreeFileMatch) => fileMatch.dispose());\n\t\t[...this._unDisposedFolderMatches.values()].forEach((folderMatch: FolderMatchImpl) => folderMatch.disposeMatches());\n\t\tthis._fileMatches.clear();\n\t\tthis._folderMatches.clear();\n\t\tthis._unDisposedFileMatches.clear();\n\t\tthis._unDisposedFolderMatches.clear();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposeMatches();\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nexport class FolderMatchWithResourceImpl extends FolderMatchImpl implements ISearchTreeFolderMatchWithResource {\n\n\tprotected _normalizedResource: Lazy<URI>;\n\n\tconstructor(_resource: URI,\n\t\t_id: string,\n\t\t_index: number,\n\t\t_query: ITextQuery,\n\t\t_parent: ITextSearchHeading | FolderMatchImpl,\n\t\t_searchResult: ISearchResult,\n\t\t_closestRoot: ISearchTreeFolderMatchWorkspaceRoot | null,\n\t\t@IReplaceService replaceService: IReplaceService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper(_resource, _id, _index, _query, _parent, _searchResult, _closestRoot, replaceService, instantiationService, labelService, uriIdentityService);\n\t\tthis._normalizedResource = new Lazy(() => this.uriIdentityService.extUri.removeTrailingPathSeparator(this.uriIdentityService.extUri.normalizePath(\n\t\t\tthis.resource)));\n\t}\n\n\toverride get resource(): URI {\n\t\treturn this._resource!;\n\t}\n\n\tget normalizedResource(): URI {\n\t\treturn this._normalizedResource.value;\n\t}\n}\n\n/**\n * FolderMatchWorkspaceRoot => folder for workspace root\n */\nexport class FolderMatchWorkspaceRootImpl extends FolderMatchWithResourceImpl implements ISearchTreeFolderMatchWorkspaceRoot {\n\tconstructor(_resource: URI, _id: string, _index: number, _query: ITextQuery, _parent: ITextSearchHeading,\n\t\t@IReplaceService replaceService: IReplaceService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper(_resource, _id, _index, _query, _parent, _parent.parent(), null, replaceService, instantiationService, labelService, uriIdentityService);\n\t}\n\n\tprivate normalizedUriParent(uri: URI): URI {\n\t\treturn this.uriIdentityService.extUri.normalizePath(this.uriIdentityService.extUri.dirname(uri));\n\t}\n\n\tprivate uriEquals(uri1: URI, ur2: URI): boolean {\n\t\treturn this.uriIdentityService.extUri.isEqual(uri1, ur2);\n\t}\n\n\tprivate createFileMatch(query: IPatternInfo, previewOptions: ITextSearchPreviewOptions | undefined, maxResults: number | undefined, parent: FolderMatchImpl, rawFileMatch: IFileMatch, closestRoot: ISearchTreeFolderMatchWorkspaceRoot | null, searchInstanceID: string): FileMatchImpl {\n\t\t// TODO: can probably just create FileMatchImpl if we don't expect cell results from the file.\n\t\tconst fileMatch =\n\t\t\tthis.instantiationService.createInstance(\n\t\t\t\tNotebookCompatibleFileMatch,\n\t\t\t\tquery,\n\t\t\t\tpreviewOptions,\n\t\t\t\tmaxResults,\n\t\t\t\tparent,\n\t\t\t\trawFileMatch,\n\t\t\t\tclosestRoot,\n\t\t\t\tsearchInstanceID,\n\t\t\t);\n\t\tfileMatch.createMatches();\n\t\tparent.doAddFile(fileMatch);\n\t\tconst disposable = fileMatch.onChange(({ didRemove }) => parent.onFileChange(fileMatch, didRemove));\n\t\tthis._register(fileMatch.onDispose(() => disposable.dispose()));\n\t\treturn fileMatch;\n\t}\n\n\tcreateAndConfigureFileMatch(rawFileMatch: IFileMatch<URI>, searchInstanceID: string): FileMatchImpl {\n\n\t\tif (!this.uriHasParent(this.resource, rawFileMatch.resource)) {\n\t\t\tthrow Error(`${rawFileMatch.resource} is not a descendant of ${this.resource}`);\n\t\t}\n\n\t\tconst fileMatchParentParts: URI[] = [];\n\t\tlet uri = this.normalizedUriParent(rawFileMatch.resource);\n\n\t\twhile (!this.uriEquals(this.normalizedResource, uri)) {\n\t\t\tfileMatchParentParts.unshift(uri);\n\t\t\tconst prevUri = uri;\n\t\t\turi = this.uriIdentityService.extUri.removeTrailingPathSeparator(this.normalizedUriParent(uri));\n\t\t\tif (this.uriEquals(prevUri, uri)) {\n\t\t\t\tthrow Error(`${rawFileMatch.resource} is not correctly configured as a child of ${this.normalizedResource}`);\n\t\t\t}\n\t\t}\n\n\t\tconst root = this.closestRoot ?? this;\n\t\tlet parent: FolderMatchWithResourceImpl = this;\n\t\tfor (let i = 0; i < fileMatchParentParts.length; i++) {\n\t\t\tlet folderMatch: FolderMatchWithResourceImpl | undefined = parent.getFolderMatch(fileMatchParentParts[i]);\n\t\t\tif (!folderMatch) {\n\t\t\t\tfolderMatch = parent.createIntermediateFolderMatch(fileMatchParentParts[i], fileMatchParentParts[i].toString(), -1, this._query, root);\n\t\t\t}\n\t\t\tparent = folderMatch;\n\t\t}\n\n\t\treturn this.createFileMatch(this._query.contentPattern, this._query.previewOptions, this._query.maxResults, parent, rawFileMatch, root, searchInstanceID);\n\t}\n}\n\n// currently, no support for AI results in out-of-workspace files\nexport class FolderMatchNoRootImpl extends FolderMatchImpl implements ISearchTreeFolderMatchNoRoot {\n\tconstructor(_id: string, _index: number, _query: ITextQuery, _parent: ITextSearchHeading,\n\t\t@IReplaceService replaceService: IReplaceService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\n\t) {\n\t\tsuper(null, _id, _index, _query, _parent, _parent.parent(), null, replaceService, instantiationService, labelService, uriIdentityService);\n\t}\n\n\tcreateAndConfigureFileMatch(rawFileMatch: IFileMatch, searchInstanceID: string): ISearchTreeFileMatch {\n\t\t// TODO: can probably just create FileMatchImpl if we don't expect cell results from the file.\n\t\tconst fileMatch = this._register(this.instantiationService.createInstance(\n\t\t\tNotebookCompatibleFileMatch,\n\t\t\tthis._query.contentPattern,\n\t\t\tthis._query.previewOptions,\n\t\t\tthis._query.maxResults,\n\t\t\tthis, rawFileMatch,\n\t\t\tnull,\n\t\t\tsearchInstanceID,\n\t\t));\n\t\tfileMatch.createMatches();\n\t\tthis.doAddFile(fileMatch);\n\t\tconst disposable = fileMatch.onChange(({ didRemove }) => this.onFileChange(fileMatch, didRemove));\n\t\tthis._register(fileMatch.onDispose(() => disposable.dispose()));\n\t\treturn fileMatch;\n\t}\n}\n"],
  "mappings": "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",
  "names": ["m"]
}
