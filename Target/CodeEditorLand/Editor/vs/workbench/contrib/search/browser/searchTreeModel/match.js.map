{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/match.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { memoize } from '../../../../../base/common/decorators.js';\nimport { lcut } from '../../../../../base/common/strings.js';\nimport { ISearchRange, ITextSearchMatch, OneLineRange } from '../../../../services/search/common/search.js';\nimport { ISearchTreeMatch, ISearchTreeFileMatch, MATCH_PREFIX } from './searchTreeCommon.js';\nimport { Range } from '../../../../../editor/common/core/range.js';\n\nexport function textSearchResultToMatches(rawMatch: ITextSearchMatch, fileMatch: ISearchTreeFileMatch, isAiContributed: boolean): ISearchTreeMatch[] {\n\tconst previewLines = rawMatch.previewText.split('\\n');\n\treturn rawMatch.rangeLocations.map((rangeLocation) => {\n\t\tconst previewRange: ISearchRange = rangeLocation.preview;\n\t\treturn new MatchImpl(fileMatch, previewLines, previewRange, rangeLocation.source, isAiContributed);\n\t});\n}\n\nexport class MatchImpl implements ISearchTreeMatch {\n\n\tprivate static readonly MAX_PREVIEW_CHARS = 250;\n\tprotected _id: string;\n\tprotected _range: Range;\n\tprivate _oneLinePreviewText: string;\n\tprivate _rangeInPreviewText: ISearchRange;\n\t// For replace\n\tprivate _fullPreviewRange: ISearchRange;\n\n\tconstructor(protected _parent: ISearchTreeFileMatch, private _fullPreviewLines: string[], _fullPreviewRange: ISearchRange, _documentRange: ISearchRange, private readonly _isReadonly: boolean = false) {\n\t\tthis._oneLinePreviewText = _fullPreviewLines[_fullPreviewRange.startLineNumber];\n\t\tconst adjustedEndCol = _fullPreviewRange.startLineNumber === _fullPreviewRange.endLineNumber ?\n\t\t\t_fullPreviewRange.endColumn :\n\t\t\tthis._oneLinePreviewText.length;\n\t\tthis._rangeInPreviewText = new OneLineRange(1, _fullPreviewRange.startColumn + 1, adjustedEndCol + 1);\n\n\t\tthis._range = new Range(\n\t\t\t_documentRange.startLineNumber + 1,\n\t\t\t_documentRange.startColumn + 1,\n\t\t\t_documentRange.endLineNumber + 1,\n\t\t\t_documentRange.endColumn + 1);\n\n\t\tthis._fullPreviewRange = _fullPreviewRange;\n\n\t\tthis._id = MATCH_PREFIX + this._parent.resource.toString() + '>' + this._range + this.getMatchString();\n\t}\n\n\tid(): string {\n\t\treturn this._id;\n\t}\n\n\tparent(): ISearchTreeFileMatch {\n\t\treturn this._parent;\n\t}\n\n\ttext(): string {\n\t\treturn this._oneLinePreviewText;\n\t}\n\n\trange(): Range {\n\t\treturn this._range;\n\t}\n\n\t@memoize\n\tpreview(): { before: string; fullBefore: string; inside: string; after: string } {\n\t\tconst fullBefore = this._oneLinePreviewText.substring(0, this._rangeInPreviewText.startColumn - 1), before = lcut(fullBefore, 26, '\u2026');\n\n\t\tlet inside = this.getMatchString(), after = this._oneLinePreviewText.substring(this._rangeInPreviewText.endColumn - 1);\n\n\t\tlet charsRemaining = MatchImpl.MAX_PREVIEW_CHARS - before.length;\n\t\tinside = inside.substr(0, charsRemaining);\n\t\tcharsRemaining -= inside.length;\n\t\tafter = after.substr(0, charsRemaining);\n\n\t\treturn {\n\t\t\tbefore,\n\t\t\tfullBefore,\n\t\t\tinside,\n\t\t\tafter,\n\t\t};\n\t}\n\n\tget replaceString(): string {\n\t\tconst searchModel = this.parent().parent().searchModel;\n\t\tif (!searchModel.replacePattern) {\n\t\t\tthrow new Error('searchModel.replacePattern must be set before accessing replaceString');\n\t\t}\n\n\t\tconst fullMatchText = this.fullMatchText();\n\t\tlet replaceString = searchModel.replacePattern.getReplaceString(fullMatchText, searchModel.preserveCase);\n\t\tif (replaceString !== null) {\n\t\t\treturn replaceString;\n\t\t}\n\n\t\t// Search/find normalize line endings - check whether \\r prevents regex from matching\n\t\tconst fullMatchTextWithoutCR = fullMatchText.replace(/\\r\\n/g, '\\n');\n\t\tif (fullMatchTextWithoutCR !== fullMatchText) {\n\t\t\treplaceString = searchModel.replacePattern.getReplaceString(fullMatchTextWithoutCR, searchModel.preserveCase);\n\t\t\tif (replaceString !== null) {\n\t\t\t\treturn replaceString;\n\t\t\t}\n\t\t}\n\n\t\t// If match string is not matching then regex pattern has a lookahead expression\n\t\tconst contextMatchTextWithSurroundingContent = this.fullMatchText(true);\n\t\treplaceString = searchModel.replacePattern.getReplaceString(contextMatchTextWithSurroundingContent, searchModel.preserveCase);\n\t\tif (replaceString !== null) {\n\t\t\treturn replaceString;\n\t\t}\n\n\t\t// Search/find normalize line endings, this time in full context\n\t\tconst contextMatchTextWithoutCR = contextMatchTextWithSurroundingContent.replace(/\\r\\n/g, '\\n');\n\t\tif (contextMatchTextWithoutCR !== contextMatchTextWithSurroundingContent) {\n\t\t\treplaceString = searchModel.replacePattern.getReplaceString(contextMatchTextWithoutCR, searchModel.preserveCase);\n\t\t\tif (replaceString !== null) {\n\t\t\t\treturn replaceString;\n\t\t\t}\n\t\t}\n\n\t\t// Match string is still not matching. Could be unsupported matches (multi-line).\n\t\treturn searchModel.replacePattern.pattern;\n\t}\n\n\tfullMatchText(includeSurrounding = false): string {\n\t\tlet thisMatchPreviewLines: string[];\n\t\tif (includeSurrounding) {\n\t\t\tthisMatchPreviewLines = this._fullPreviewLines;\n\t\t} else {\n\t\t\tthisMatchPreviewLines = this._fullPreviewLines.slice(this._fullPreviewRange.startLineNumber, this._fullPreviewRange.endLineNumber + 1);\n\t\t\tthisMatchPreviewLines[thisMatchPreviewLines.length - 1] = thisMatchPreviewLines[thisMatchPreviewLines.length - 1].slice(0, this._fullPreviewRange.endColumn);\n\t\t\tthisMatchPreviewLines[0] = thisMatchPreviewLines[0].slice(this._fullPreviewRange.startColumn);\n\t\t}\n\n\t\treturn thisMatchPreviewLines.join('\\n');\n\t}\n\n\trangeInPreview() {\n\t\t// convert to editor's base 1 positions.\n\t\treturn {\n\t\t\t...this._fullPreviewRange,\n\t\t\tstartColumn: this._fullPreviewRange.startColumn + 1,\n\t\t\tendColumn: this._fullPreviewRange.endColumn + 1\n\t\t};\n\t}\n\n\tfullPreviewLines(): string[] {\n\t\treturn this._fullPreviewLines.slice(this._fullPreviewRange.startLineNumber, this._fullPreviewRange.endLineNumber + 1);\n\t}\n\n\tgetMatchString(): string {\n\t\treturn this._oneLinePreviewText.substring(this._rangeInPreviewText.startColumn - 1, this._rangeInPreviewText.endColumn - 1);\n\t}\n\n\tget isReadonly() {\n\t\treturn this._isReadonly;\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
