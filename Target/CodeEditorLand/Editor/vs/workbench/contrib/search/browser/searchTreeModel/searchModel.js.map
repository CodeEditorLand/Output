{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/searchModel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { CancellationToken, CancellationTokenSource } from '../../../../../base/common/cancellation.js';\nimport * as errors from '../../../../../base/common/errors.js';\nimport { Emitter, Event, PauseableEmitter } from '../../../../../base/common/event.js';\nimport { Lazy } from '../../../../../base/common/lazy.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../../../base/common/network.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../../platform/telemetry/common/telemetry.js';\nimport { INotebookSearchService } from '../../common/notebookSearch.js';\nimport { ReplacePattern } from '../../../../services/search/common/replace.js';\nimport { IAITextQuery, IFileMatch, IPatternInfo, ISearchComplete, ISearchConfigurationProperties, ISearchProgressItem, ISearchService, ITextQuery, ITextSearchStats, QueryType, SearchCompletionExitCode } from '../../../../services/search/common/search.js';\nimport { IChangeEvent, mergeSearchResultEvents, SearchModelLocation, ISearchModel, ISearchResult, SEARCH_MODEL_PREFIX } from './searchTreeCommon.js';\nimport { SearchResultImpl } from './searchResult.js';\nimport { ISearchViewModelWorkbenchService } from './searchViewModelWorkbenchService.js';\n\nexport class SearchModelImpl extends Disposable implements ISearchModel {\n\n\tprivate _searchResult: ISearchResult;\n\tprivate _searchQuery: ITextQuery | null = null;\n\tprivate _replaceActive: boolean = false;\n\tprivate _replaceString: string | null = null;\n\tprivate _replacePattern: ReplacePattern | null = null;\n\tprivate _preserveCase: boolean = false;\n\tprivate _startStreamDelay: Promise<void> = Promise.resolve();\n\tprivate readonly _resultQueue: IFileMatch[] = [];\n\tprivate readonly _aiResultQueue: IFileMatch[] = [];\n\n\tprivate readonly _onReplaceTermChanged: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onReplaceTermChanged: Event<void> = this._onReplaceTermChanged.event;\n\n\tprivate readonly _onSearchResultChanged = this._register(new PauseableEmitter<IChangeEvent>({\n\t\tmerge: mergeSearchResultEvents\n\t}));\n\treadonly onSearchResultChanged: Event<IChangeEvent> = this._onSearchResultChanged.event;\n\n\tprivate currentCancelTokenSource: CancellationTokenSource | null = null;\n\tprivate currentAICancelTokenSource: CancellationTokenSource | null = null;\n\tprivate searchCancelledForNewSearch: boolean = false;\n\tprivate aiSearchCancelledForNewSearch: boolean = false;\n\tpublic location: SearchModelLocation = SearchModelLocation.PANEL;\n\tprivate readonly _aiTextResultProviderName: Lazy<Promise<string | undefined>>;\n\n\tprivate readonly _id: string;\n\n\tconstructor(\n\t\t@ISearchService private readonly searchService: ISearchService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INotebookSearchService private readonly notebookSearchService: INotebookSearchService,\n\t) {\n\t\tsuper();\n\t\tthis._searchResult = this.instantiationService.createInstance(SearchResultImpl, this);\n\t\tthis._register(this._searchResult.onChange((e) => this._onSearchResultChanged.fire(e)));\n\n\t\tthis._aiTextResultProviderName = new Lazy(async () => this.searchService.getAIName());\n\t\tthis._id = SEARCH_MODEL_PREFIX + Date.now().toString();\n\t}\n\n\tid(): string {\n\t\treturn this._id;\n\t}\n\n\tasync getAITextResultProviderName(): Promise<string> {\n\t\tconst result = await this._aiTextResultProviderName.value;\n\t\tif (!result) {\n\t\t\tthrow Error('Fetching AI name when no provider present.');\n\t\t}\n\t\treturn result;\n\t}\n\n\tisReplaceActive(): boolean {\n\t\treturn this._replaceActive;\n\t}\n\n\tset replaceActive(replaceActive: boolean) {\n\t\tthis._replaceActive = replaceActive;\n\t}\n\n\tget replacePattern(): ReplacePattern | null {\n\t\treturn this._replacePattern;\n\t}\n\n\tget replaceString(): string {\n\t\treturn this._replaceString || '';\n\t}\n\n\tset preserveCase(value: boolean) {\n\t\tthis._preserveCase = value;\n\t}\n\n\tget preserveCase(): boolean {\n\t\treturn this._preserveCase;\n\t}\n\n\tset replaceString(replaceString: string) {\n\t\tthis._replaceString = replaceString;\n\t\tif (this._searchQuery) {\n\t\t\tthis._replacePattern = new ReplacePattern(replaceString, this._searchQuery.contentPattern);\n\t\t}\n\t\tthis._onReplaceTermChanged.fire();\n\t}\n\n\tget searchResult(): ISearchResult {\n\t\treturn this._searchResult;\n\t}\n\n\tasync addAIResults(onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tif (this.hasAIResults) {\n\t\t\t// already has matches or pending matches\n\t\t\tthrow Error('AI results already exist');\n\t\t} else {\n\t\t\tif (this._searchQuery) {\n\t\t\t\treturn this.aiSearch(\n\t\t\t\t\t{ ...this._searchQuery, contentPattern: this._searchQuery.contentPattern.pattern, type: QueryType.aiText },\n\t\t\t\t\tonProgress,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow Error('No search query');\n\t\t\t}\n\t\t}\n\t}\n\n\taiSearch(query: IAITextQuery, onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\n\t\tconst searchInstanceID = Date.now().toString();\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\tthis.currentAICancelTokenSource = tokenSource;\n\t\tconst start = Date.now();\n\t\tconst asyncAIResults = this.searchService.aiTextSearch(\n\t\t\tquery,\n\t\t\ttokenSource.token,\n\t\t\tasync (p: ISearchProgressItem) => {\n\t\t\t\tthis.onSearchProgress(p, searchInstanceID, false, true);\n\t\t\t\tonProgress?.(p);\n\t\t\t}).finally(() => {\n\t\t\t\ttokenSource.dispose(true);\n\t\t\t}).then(\n\t\t\t\tvalue => {\n\t\t\t\t\tthis.onSearchCompleted(value, Date.now() - start, searchInstanceID, true);\n\t\t\t\t\treturn value;\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\tthis.onSearchError(e, Date.now() - start, true);\n\t\t\t\t\tthrow e;\n\t\t\t\t});\n\t\treturn asyncAIResults;\n\t}\n\n\tprivate doSearch(query: ITextQuery, progressEmitter: Emitter<void>, searchQuery: ITextQuery, searchInstanceID: string, onProgress?: (result: ISearchProgressItem) => void, callerToken?: CancellationToken): {\n\t\tasyncResults: Promise<ISearchComplete>;\n\t\tsyncResults: IFileMatch<URI>[];\n\t} {\n\t\tconst asyncGenerateOnProgress = async (p: ISearchProgressItem) => {\n\t\t\tprogressEmitter.fire();\n\t\t\tthis.onSearchProgress(p, searchInstanceID, false, false);\n\t\t\tonProgress?.(p);\n\t\t};\n\n\t\tconst syncGenerateOnProgress = (p: ISearchProgressItem) => {\n\t\t\tprogressEmitter.fire();\n\t\t\tthis.onSearchProgress(p, searchInstanceID, true);\n\t\t\tonProgress?.(p);\n\t\t};\n\t\tconst tokenSource = this.currentCancelTokenSource = new CancellationTokenSource(callerToken);\n\n\t\tconst notebookResult = this.notebookSearchService.notebookSearch(query, tokenSource.token, searchInstanceID, asyncGenerateOnProgress);\n\t\tconst textResult = this.searchService.textSearchSplitSyncAsync(\n\t\t\tsearchQuery,\n\t\t\ttokenSource.token, asyncGenerateOnProgress,\n\t\t\tnotebookResult.openFilesToScan,\n\t\t\tnotebookResult.allScannedFiles,\n\t\t);\n\n\t\tconst syncResults = textResult.syncResults.results;\n\t\tsyncResults.forEach(p => { if (p) { syncGenerateOnProgress(p); } });\n\n\t\tconst getAsyncResults = async (): Promise<ISearchComplete> => {\n\t\t\tconst searchStart = Date.now();\n\n\t\t\t// resolve async parts of search\n\t\t\tconst allClosedEditorResults = await textResult.asyncResults;\n\t\t\tconst resolvedNotebookResults = await notebookResult.completeData;\n\t\t\tconst searchLength = Date.now() - searchStart;\n\t\t\tconst resolvedResult: ISearchComplete = {\n\t\t\t\tresults: [...allClosedEditorResults.results, ...resolvedNotebookResults.results],\n\t\t\t\tmessages: [...allClosedEditorResults.messages, ...resolvedNotebookResults.messages],\n\t\t\t\tlimitHit: allClosedEditorResults.limitHit || resolvedNotebookResults.limitHit,\n\t\t\t\texit: allClosedEditorResults.exit,\n\t\t\t\tstats: allClosedEditorResults.stats,\n\t\t\t};\n\t\t\tthis.logService.trace(`whole search time | ${searchLength}ms`);\n\t\t\treturn resolvedResult;\n\t\t};\n\t\treturn {\n\t\t\tasyncResults: getAsyncResults()\n\t\t\t\t.finally(() => tokenSource.dispose(true)),\n\t\t\tsyncResults\n\t\t};\n\t}\n\n\tget hasAIResults(): boolean {\n\t\treturn !!(this.searchResult.getCachedSearchComplete(true)) || (!!this.currentAICancelTokenSource && !this.currentAICancelTokenSource.token.isCancellationRequested);\n\t}\n\n\tget hasPlainResults(): boolean {\n\t\treturn !!(this.searchResult.getCachedSearchComplete(false)) || (!!this.currentCancelTokenSource && !this.currentCancelTokenSource.token.isCancellationRequested);\n\t}\n\n\tsearch(query: ITextQuery, onProgress?: (result: ISearchProgressItem) => void, callerToken?: CancellationToken): {\n\t\tasyncResults: Promise<ISearchComplete>;\n\t\tsyncResults: IFileMatch<URI>[];\n\t} {\n\t\tthis.cancelSearch(true);\n\n\t\tthis._searchQuery = query;\n\t\tif (!this.searchConfig.searchOnType) {\n\t\t\tthis.searchResult.clear();\n\t\t}\n\t\tconst searchInstanceID = Date.now().toString();\n\n\t\tthis._searchResult.query = this._searchQuery;\n\n\t\tconst progressEmitter = this._register(new Emitter<void>());\n\t\tthis._replacePattern = new ReplacePattern(this.replaceString, this._searchQuery.contentPattern);\n\n\t\t// In search on type case, delay the streaming of results just a bit, so that we don't flash the only \"local results\" fast path\n\t\tthis._startStreamDelay = new Promise(resolve => setTimeout(resolve, this.searchConfig.searchOnType ? 150 : 0));\n\n\t\tconst req = this.doSearch(query, progressEmitter, this._searchQuery, searchInstanceID, onProgress, callerToken);\n\t\tconst asyncResults = req.asyncResults;\n\t\tconst syncResults = req.syncResults;\n\n\t\tif (onProgress) {\n\t\t\tsyncResults.forEach(p => {\n\t\t\t\tif (p) {\n\t\t\t\t\tonProgress(p);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst start = Date.now();\n\t\tlet event: IDisposable | undefined;\n\n\t\tconst progressEmitterPromise = new Promise(resolve => {\n\t\t\tevent = Event.once(progressEmitter.event)(resolve);\n\t\t\treturn event;\n\t\t});\n\n\t\tPromise.race([asyncResults, progressEmitterPromise]).finally(() => {\n\t\t\t/* __GDPR__\n\t\t\t\t\"searchResultsFirstRender\" : {\n\t\t\t\t\t\"owner\": \"roblourens\",\n\t\t\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tevent?.dispose();\n\t\t\tthis.telemetryService.publicLog('searchResultsFirstRender', { duration: Date.now() - start });\n\t\t});\n\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tasyncResults: asyncResults.then(\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tthis.onSearchCompleted(value, Date.now() - start, searchInstanceID, false);\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t},\n\t\t\t\t\te => {\n\t\t\t\t\t\tthis.onSearchError(e, Date.now() - start, false);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}),\n\t\t\t\tsyncResults\n\t\t\t};\n\t\t} finally {\n\t\t\t/* __GDPR__\n\t\t\t\t\"searchResultsFinished\" : {\n\t\t\t\t\t\"owner\": \"roblourens\",\n\t\t\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('searchResultsFinished', { duration: Date.now() - start });\n\t\t}\n\t}\n\n\tprivate onSearchCompleted(completed: ISearchComplete | undefined, duration: number, searchInstanceID: string, ai: boolean): ISearchComplete | undefined {\n\t\tif (!this._searchQuery) {\n\t\t\tthrow new Error('onSearchCompleted must be called after a search is started');\n\t\t}\n\n\t\tif (ai) {\n\t\t\tthis._searchResult.add(this._aiResultQueue, searchInstanceID, true);\n\t\t\tthis._aiResultQueue.length = 0;\n\t\t} else {\n\t\t\tthis._searchResult.add(this._resultQueue, searchInstanceID, false);\n\t\t\tthis._resultQueue.length = 0;\n\t\t}\n\n\t\tthis.searchResult.setCachedSearchComplete(completed, ai);\n\n\t\tconst options: IPatternInfo = Object.assign({}, this._searchQuery.contentPattern);\n\t\tdelete (options as any).pattern;\n\n\t\tconst stats = completed && completed.stats as ITextSearchStats;\n\n\t\tconst fileSchemeOnly = this._searchQuery.folderQueries.every(fq => fq.folder.scheme === Schemas.file);\n\t\tconst otherSchemeOnly = this._searchQuery.folderQueries.every(fq => fq.folder.scheme !== Schemas.file);\n\t\tconst scheme = fileSchemeOnly ? Schemas.file :\n\t\t\totherSchemeOnly ? 'other' :\n\t\t\t\t'mixed';\n\n\t\t/* __GDPR__\n\t\t\t\"searchResultsShown\" : {\n\t\t\t\t\"owner\": \"roblourens\",\n\t\t\t\t\"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"fileCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"options\": { \"${inline}\": [ \"${IPatternInfo}\" ] },\n\t\t\t\t\"duration\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\"searchOnTypeEnabled\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('searchResultsShown', {\n\t\t\tcount: this._searchResult.count(),\n\t\t\tfileCount: this._searchResult.fileCount(),\n\t\t\toptions,\n\t\t\tduration,\n\t\t\ttype: stats && stats.type,\n\t\t\tscheme,\n\t\t\tsearchOnTypeEnabled: this.searchConfig.searchOnType\n\t\t});\n\t\treturn completed;\n\t}\n\n\tprivate onSearchError(e: any, duration: number, ai: boolean): void {\n\t\tif (errors.isCancellationError(e)) {\n\t\t\tthis.onSearchCompleted(\n\t\t\t\t(ai ? this.aiSearchCancelledForNewSearch : this.searchCancelledForNewSearch)\n\t\t\t\t\t? { exit: SearchCompletionExitCode.NewSearchStarted, results: [], messages: [] }\n\t\t\t\t\t: undefined,\n\t\t\t\tduration, '', ai);\n\t\t\tif (ai) {\n\t\t\t\tthis.aiSearchCancelledForNewSearch = false;\n\t\t\t} else {\n\t\t\t\tthis.searchCancelledForNewSearch = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onSearchProgress(p: ISearchProgressItem, searchInstanceID: string, sync = true, ai: boolean = false) {\n\t\tconst targetQueue = ai ? this._aiResultQueue : this._resultQueue;\n\t\tif ((<IFileMatch>p).resource) {\n\t\t\ttargetQueue.push(<IFileMatch>p);\n\t\t\tif (sync) {\n\t\t\t\tif (targetQueue.length) {\n\t\t\t\t\tthis._searchResult.add(targetQueue, searchInstanceID, false, true);\n\t\t\t\t\ttargetQueue.length = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._startStreamDelay.then(() => {\n\t\t\t\t\tif (targetQueue.length) {\n\t\t\t\t\t\tthis._searchResult.add(targetQueue, searchInstanceID, ai, true);\n\t\t\t\t\t\ttargetQueue.length = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate get searchConfig() {\n\t\treturn this.configurationService.getValue<ISearchConfigurationProperties>('search');\n\t}\n\n\tcancelSearch(cancelledForNewSearch = false): boolean {\n\t\tif (this.currentCancelTokenSource) {\n\t\t\tthis.searchCancelledForNewSearch = cancelledForNewSearch;\n\t\t\tthis.currentCancelTokenSource.cancel();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tcancelAISearch(cancelledForNewSearch = false): boolean {\n\t\tif (this.currentAICancelTokenSource) {\n\t\t\tthis.aiSearchCancelledForNewSearch = cancelledForNewSearch;\n\t\t\tthis.currentAICancelTokenSource.cancel();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\toverride dispose(): void {\n\t\tthis.cancelSearch();\n\t\tthis.cancelAISearch();\n\t\tthis.searchResult.dispose();\n\t\tsuper.dispose();\n\t}\n\n}\n\n\nexport class SearchViewModelWorkbenchService implements ISearchViewModelWorkbenchService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate _searchModel: SearchModelImpl | null = null;\n\n\tconstructor(@IInstantiationService private readonly instantiationService: IInstantiationService) {\n\t}\n\n\tget searchModel(): SearchModelImpl {\n\t\tif (!this._searchModel) {\n\t\t\tthis._searchModel = this.instantiationService.createInstance(SearchModelImpl);\n\t\t}\n\t\treturn this._searchModel;\n\t}\n\n\tset searchModel(searchModel: SearchModelImpl) {\n\t\tthis._searchModel?.dispose();\n\t\tthis._searchModel = searchModel;\n\t}\n}\n\n"],
  "mappings": "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",
  "names": []
}
