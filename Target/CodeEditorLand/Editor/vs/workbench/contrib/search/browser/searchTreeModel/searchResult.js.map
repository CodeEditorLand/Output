{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/searchResult.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, PauseableEmitter } from '../../../../../base/common/event.js';\nimport { Disposable, IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IModelService } from '../../../../../editor/common/services/model.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IProgress, IProgressStep } from '../../../../../platform/progress/common/progress.js';\nimport { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';\nimport { INotebookEditorService } from '../../../notebook/browser/services/notebookEditorService.js';\nimport { IFileMatch, ISearchComplete, ITextQuery } from '../../../../services/search/common/search.js';\nimport { arrayContainsElementOrParent, IChangeEvent, ISearchTreeFileMatch, ISearchTreeFolderMatch, IPlainTextSearchHeading, ISearchModel, ISearchResult, isSearchTreeFileMatch, isSearchTreeFolderMatch, isSearchTreeFolderMatchWithResource, isSearchTreeMatch, isTextSearchHeading, ITextSearchHeading, mergeSearchResultEvents, RenderableMatch, SEARCH_RESULT_PREFIX } from './searchTreeCommon.js';\n\nimport { RangeHighlightDecorations } from './rangeDecorations.js';\nimport { PlainTextSearchHeadingImpl } from './textSearchHeading.js';\nimport { AITextSearchHeadingImpl } from '../AISearch/aiSearchModel.js';\n\nexport class SearchResultImpl extends Disposable implements ISearchResult {\n\n\tprivate _onChange = this._register(new PauseableEmitter<IChangeEvent>({\n\t\tmerge: mergeSearchResultEvents\n\t}));\n\treadonly onChange: Event<IChangeEvent> = this._onChange.event;\n\tprivate _onWillChangeModelListener: IDisposable | undefined;\n\tprivate _onDidChangeModelListener: IDisposable | undefined;\n\tprivate _plainTextSearchResult: IPlainTextSearchHeading;\n\tprivate _aiTextSearchResult: ITextSearchHeading;\n\n\tprivate readonly _id: string;\n\tconstructor(\n\t\tpublic readonly searchModel: ISearchModel,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@INotebookEditorService private readonly notebookEditorService: INotebookEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._plainTextSearchResult = this._register(this.instantiationService.createInstance(PlainTextSearchHeadingImpl, this));\n\t\tthis._aiTextSearchResult = this._register(this.instantiationService.createInstance(AITextSearchHeadingImpl, this));\n\n\t\tthis._register(this._plainTextSearchResult.onChange((e) => this._onChange.fire(e)));\n\t\tthis._register(this._aiTextSearchResult.onChange((e) => this._onChange.fire(e)));\n\n\t\tthis.modelService.getModels().forEach(model => this.onModelAdded(model));\n\t\tthis._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));\n\n\t\tthis._register(this.notebookEditorService.onDidAddNotebookEditor(widget => {\n\t\t\tif (widget instanceof NotebookEditorWidget) {\n\t\t\t\tthis.onDidAddNotebookEditorWidget(<NotebookEditorWidget>widget);\n\t\t\t}\n\t\t}));\n\n\t\tthis._id = SEARCH_RESULT_PREFIX + Date.now().toString();\n\t}\n\n\tid(): string {\n\t\treturn this._id;\n\t}\n\n\tget plainTextSearchResult(): IPlainTextSearchHeading {\n\t\treturn this._plainTextSearchResult;\n\t}\n\n\tget aiTextSearchResult(): ITextSearchHeading {\n\t\treturn this._aiTextSearchResult;\n\t}\n\n\tget children() {\n\t\treturn this.textSearchResults;\n\t}\n\n\tget hasChildren(): boolean {\n\t\treturn true; // should always have a Text Search Result for plain results.\n\t}\n\tget textSearchResults(): ITextSearchHeading[] {\n\t\treturn [this._plainTextSearchResult, this._aiTextSearchResult];\n\t}\n\n\tasync batchReplace(elementsToReplace: RenderableMatch[]) {\n\t\ttry {\n\t\t\tthis._onChange.pause();\n\t\t\tawait Promise.all(elementsToReplace.map(async (elem) => {\n\t\t\t\tconst parent = elem.parent();\n\n\t\t\t\tif ((isSearchTreeFolderMatch(parent) || isSearchTreeFileMatch(parent)) && arrayContainsElementOrParent(parent, elementsToReplace)) {\n\t\t\t\t\t// skip any children who have parents in the array\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isSearchTreeFileMatch(elem)) {\n\t\t\t\t\tawait elem.parent().replace(elem);\n\t\t\t\t} else if (isSearchTreeMatch(elem)) {\n\t\t\t\t\tawait elem.parent().replace(elem);\n\t\t\t\t} else if (isSearchTreeFolderMatch(elem)) {\n\t\t\t\t\tawait elem.replaceAll();\n\t\t\t\t}\n\t\t\t}));\n\t\t} finally {\n\t\t\tthis._onChange.resume();\n\t\t}\n\t}\n\n\tbatchRemove(elementsToRemove: RenderableMatch[]) {\n\t\t// need to check that we aren't trying to remove elements twice\n\t\tconst removedElems: RenderableMatch[] = [];\n\n\t\ttry {\n\t\t\tthis._onChange.pause();\n\t\t\telementsToRemove.forEach((currentElement) => {\n\t\t\t\tif (!arrayContainsElementOrParent(currentElement, removedElems)) {\n\t\t\t\t\tif (isTextSearchHeading(currentElement)) {\n\t\t\t\t\t\tcurrentElement.hide();\n\t\t\t\t\t} else if (!isSearchTreeFolderMatch(currentElement) || isSearchTreeFolderMatchWithResource(currentElement)) {\n\t\t\t\t\t\tif (isSearchTreeFileMatch(currentElement)) {\n\t\t\t\t\t\t\tcurrentElement.parent().remove(currentElement);\n\t\t\t\t\t\t} else if (isSearchTreeMatch(currentElement)) {\n\t\t\t\t\t\t\tcurrentElement.parent().remove(currentElement);\n\t\t\t\t\t\t} else if (isSearchTreeFolderMatchWithResource(currentElement)) {\n\t\t\t\t\t\t\tcurrentElement.parent().remove(currentElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremovedElems.push(currentElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t);\n\t\t} finally {\n\t\t\tthis._onChange.resume();\n\t\t}\n\t}\n\n\tget isDirty(): boolean {\n\t\treturn this._aiTextSearchResult.isDirty || this._plainTextSearchResult.isDirty;\n\t}\n\n\tget query(): ITextQuery | null {\n\t\treturn this._plainTextSearchResult.query;\n\t}\n\n\tset query(query: ITextQuery | null) {\n\t\tthis._plainTextSearchResult.query = query;\n\t\tthis._aiTextSearchResult.query = query;\n\t}\n\n\tprivate onDidAddNotebookEditorWidget(widget: NotebookEditorWidget): void {\n\n\t\tthis._onWillChangeModelListener?.dispose();\n\t\tthis._onWillChangeModelListener = widget.onWillChangeModel(\n\t\t\t(model) => {\n\t\t\t\tif (model) {\n\t\t\t\t\tthis.onNotebookEditorWidgetRemoved(widget, model?.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis._onDidChangeModelListener?.dispose();\n\t\t// listen to view model change as we are searching on both inputs and outputs\n\t\tthis._onDidChangeModelListener = widget.onDidAttachViewModel(\n\t\t\t() => {\n\t\t\t\tif (widget.hasModel()) {\n\t\t\t\t\tthis.onNotebookEditorWidgetAdded(widget, widget.textModel.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tfolderMatches(ai: boolean = false): ISearchTreeFolderMatch[] {\n\t\tif (ai) {\n\t\t\treturn this._aiTextSearchResult.folderMatches();\n\t\t}\n\t\treturn this._plainTextSearchResult.folderMatches();\n\t}\n\n\tprivate onModelAdded(model: ITextModel): void {\n\t\tconst folderMatch = this._plainTextSearchResult.findFolderSubstr(model.uri);\n\t\tfolderMatch?.bindModel(model);\n\t}\n\n\tprivate async onNotebookEditorWidgetAdded(editor: NotebookEditorWidget, resource: URI): Promise<void> {\n\t\tconst folderMatch = this._plainTextSearchResult.findFolderSubstr(resource);\n\t\tawait folderMatch?.bindNotebookEditorWidget(editor, resource);\n\t}\n\n\tprivate onNotebookEditorWidgetRemoved(editor: NotebookEditorWidget, resource: URI): void {\n\t\tconst folderMatch = this._plainTextSearchResult.findFolderSubstr(resource);\n\t\tfolderMatch?.unbindNotebookEditorWidget(editor, resource);\n\t}\n\n\n\tadd(allRaw: IFileMatch[], searchInstanceID: string, ai: boolean, silent: boolean = false): void {\n\t\tthis._plainTextSearchResult.hidden = false;\n\t\tthis._aiTextSearchResult.hidden = false;\n\n\t\tif (ai) {\n\t\t\tthis._aiTextSearchResult.add(allRaw, searchInstanceID, silent);\n\t\t} else {\n\t\t\tthis._plainTextSearchResult.add(allRaw, searchInstanceID, silent);\n\t\t}\n\t}\n\n\tclear(): void {\n\t\tthis._aiTextSearchResult.clear();\n\t\tthis._plainTextSearchResult.clear();\n\t}\n\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatch | (ISearchTreeFileMatch | ISearchTreeFolderMatch)[], ai = false): void {\n\t\tif (ai) {\n\t\t\tthis._aiTextSearchResult.remove(matches, ai);\n\t\t}\n\t\tthis._plainTextSearchResult.remove(matches, ai);\n\n\t}\n\n\treplace(match: ISearchTreeFileMatch): Promise<any> {\n\t\treturn this._plainTextSearchResult.replace(match);\n\t}\n\n\tmatches(ai?: boolean): ISearchTreeFileMatch[] {\n\t\tif (ai === undefined) {\n\t\t\treturn this._plainTextSearchResult.matches().concat(this._aiTextSearchResult.matches());\n\t\t} else if (ai === true) {\n\t\t\treturn this._aiTextSearchResult.matches();\n\t\t}\n\t\treturn this._plainTextSearchResult.matches();\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this._plainTextSearchResult.isEmpty() && this._aiTextSearchResult.isEmpty();\n\t}\n\n\tfileCount(): number {\n\t\treturn this._plainTextSearchResult.fileCount() + this._aiTextSearchResult.fileCount();\n\t}\n\n\tcount(): number {\n\t\treturn this._plainTextSearchResult.count() + this._aiTextSearchResult.count();\n\t}\n\n\tsetCachedSearchComplete(cachedSearchComplete: ISearchComplete | undefined, ai: boolean) {\n\t\tif (ai) {\n\t\t\tthis._aiTextSearchResult.cachedSearchComplete = cachedSearchComplete;\n\t\t} else {\n\t\t\tthis._plainTextSearchResult.cachedSearchComplete = cachedSearchComplete;\n\t\t}\n\t}\n\n\tgetCachedSearchComplete(ai: boolean): ISearchComplete | undefined {\n\t\tif (ai) {\n\t\t\treturn this._aiTextSearchResult.cachedSearchComplete;\n\t\t}\n\t\treturn this._plainTextSearchResult.cachedSearchComplete;\n\t}\n\n\ttoggleHighlights(value: boolean, ai: boolean = false): void {\n\t\tif (ai) {\n\t\t\tthis._aiTextSearchResult.toggleHighlights(value);\n\t\t} else {\n\t\t\tthis._plainTextSearchResult.toggleHighlights(value);\n\t\t}\n\t}\n\n\tgetRangeHighlightDecorations(ai: boolean = false): RangeHighlightDecorations {\n\t\tif (ai) {\n\t\t\treturn this._aiTextSearchResult.rangeHighlightDecorations;\n\t\t}\n\t\treturn this._plainTextSearchResult.rangeHighlightDecorations;\n\t}\n\n\treplaceAll(progress: IProgress<IProgressStep>): Promise<any> {\n\t\treturn this._plainTextSearchResult.replaceAll(progress);\n\t}\n\n\toverride async dispose(): Promise<void> {\n\t\tthis._aiTextSearchResult?.dispose();\n\t\tthis._plainTextSearchResult?.dispose();\n\t\tthis._onWillChangeModelListener?.dispose();\n\t\tthis._onDidChangeModelListener?.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
