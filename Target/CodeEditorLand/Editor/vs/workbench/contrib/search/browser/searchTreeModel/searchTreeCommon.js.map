{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/searchTreeCommon.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../../../../../editor/common/core/range.js';\nimport { IAITextQuery, IFileMatch, ISearchComplete, ISearchProgressItem, ISearchRange, ITextQuery, ITextSearchResult } from '../../../../services/search/common/search.js';\nimport { CancellationToken } from '../../../../../base/common/cancellation.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { ITextModel } from '../../../../../editor/common/model.js';\nimport { IFileStatWithPartialMetadata, IFileService } from '../../../../../platform/files/common/files.js';\nimport { IProgress, IProgressStep } from '../../../../../platform/progress/common/progress.js';\nimport { ReplacePattern } from '../../../../services/search/common/replace.js';\nimport { NotebookEditorWidget } from '../../../notebook/browser/notebookEditorWidget.js';\nimport { RangeHighlightDecorations } from './rangeDecorations.js';\nimport { Event } from '../../../../../base/common/event.js';\n\nexport type FileMatchOrMatch = ISearchTreeFileMatch | ISearchTreeMatch;\n\nexport type RenderableMatch = ITextSearchHeading | ISearchTreeFolderMatch | ISearchTreeFileMatch | ISearchTreeMatch;\nexport function arrayContainsElementOrParent(element: RenderableMatch, testArray: RenderableMatch[]): boolean {\n\tdo {\n\t\tif (testArray.includes(element)) {\n\t\t\treturn true;\n\t\t}\n\t} while (!isSearchResult(element.parent()) && (element = <RenderableMatch>element.parent()));\n\n\treturn false;\n}\n\n\nexport interface IChangeEvent {\n\telements: ISearchTreeFileMatch[];\n\tadded?: boolean;\n\tremoved?: boolean;\n\tclearingAll?: boolean;\n}\nexport enum SearchModelLocation {\n\tPANEL,\n\tQUICK_ACCESS\n}\n\n\nexport const PLAIN_TEXT_SEARCH__RESULT_ID = 'plainTextSearch';\nexport const AI_TEXT_SEARCH_RESULT_ID = 'aiTextSearch';\n\nexport function createParentList(element: RenderableMatch): RenderableMatch[] {\n\tconst parentArray: RenderableMatch[] = [];\n\tlet currElement: RenderableMatch | ITextSearchHeading = element;\n\n\twhile (!isTextSearchHeading(currElement)) {\n\t\tparentArray.push(currElement);\n\t\tcurrElement = currElement.parent();\n\t}\n\n\treturn parentArray;\n}\n\nexport const SEARCH_MODEL_PREFIX = 'SEARCH_MODEL_';\nexport const SEARCH_RESULT_PREFIX = 'SEARCH_RESULT_';\nexport const TEXT_SEARCH_HEADING_PREFIX = 'TEXT_SEARCH_HEADING_';\nexport const FOLDER_MATCH_PREFIX = 'FOLDER_MATCH_';\nexport const FILE_MATCH_PREFIX = 'FILE_MATCH_';\nexport const MATCH_PREFIX = 'MATCH_';\n\nexport function mergeSearchResultEvents(events: IChangeEvent[]): IChangeEvent {\n\tconst retEvent: IChangeEvent = {\n\t\telements: [],\n\t\tadded: false,\n\t\tremoved: false,\n\t};\n\tevents.forEach((e) => {\n\t\tif (e.added) {\n\t\t\tretEvent.added = true;\n\t\t}\n\n\t\tif (e.removed) {\n\t\t\tretEvent.removed = true;\n\t\t}\n\n\t\tretEvent.elements = retEvent.elements.concat(e.elements);\n\t});\n\n\treturn retEvent;\n}\n\nexport interface ISearchModel {\n\treadonly onReplaceTermChanged: Event<void>;\n\treadonly onSearchResultChanged: Event<IChangeEvent>;\n\tlocation: SearchModelLocation;\n\tid(): string;\n\n\tgetAITextResultProviderName(): Promise<string>;\n\tisReplaceActive(): boolean;\n\treplaceActive: boolean;\n\treplacePattern: ReplacePattern | null;\n\treplaceString: string;\n\tpreserveCase: boolean;\n\tsearchResult: ISearchResult;\n\taddAIResults(onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete>;\n\taiSearch(query: IAITextQuery, onProgress?: (result: ISearchProgressItem) => void): Promise<ISearchComplete>;\n\thasAIResults: boolean;\n\thasPlainResults: boolean;\n\tsearch(query: ITextQuery, onProgress?: (result: ISearchProgressItem) => void, callerToken?: CancellationToken): {\n\t\tasyncResults: Promise<ISearchComplete>;\n\t\tsyncResults: IFileMatch<URI>[];\n\t};\n\tcancelSearch(cancelledForNewSearch?: boolean): boolean;\n\tcancelAISearch(cancelledForNewSearch?: boolean): boolean;\n\tdispose(): void;\n}\n\n\nexport interface ISearchResult {\n\treadonly onChange: Event<IChangeEvent>;\n\treadonly searchModel: ISearchModel;\n\treadonly plainTextSearchResult: IPlainTextSearchHeading;\n\treadonly aiTextSearchResult: ITextSearchHeading;\n\treadonly children: ITextSearchHeading[];\n\treadonly hasChildren: boolean;\n\treadonly isDirty: boolean;\n\tquery: ITextQuery | null;\n\n\tbatchReplace(elementsToReplace: RenderableMatch[]): Promise<void>;\n\tbatchRemove(elementsToRemove: RenderableMatch[]): void;\n\tfolderMatches(ai?: boolean): ISearchTreeFolderMatch[];\n\tadd(allRaw: IFileMatch[], searchInstanceID: string, ai: boolean, silent?: boolean): void;\n\tclear(): void;\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatch | (ISearchTreeFileMatch | ISearchTreeFolderMatch)[], ai?: boolean): void;\n\treplace(match: ISearchTreeFileMatch): Promise<any>;\n\tmatches(ai?: boolean): ISearchTreeFileMatch[];\n\tisEmpty(): boolean;\n\tfileCount(): number;\n\tcount(): number;\n\tid(): string;\n\tsetCachedSearchComplete(cachedSearchComplete: ISearchComplete | undefined, ai: boolean): void;\n\tgetCachedSearchComplete(ai: boolean): ISearchComplete | undefined;\n\ttoggleHighlights(value: boolean, ai?: boolean): void;\n\tgetRangeHighlightDecorations(ai?: boolean): RangeHighlightDecorations;\n\treplaceAll(progress: IProgress<IProgressStep>): Promise<any>;\n\n\tdispose(): void;\n}\n\nexport interface ITextSearchHeading {\n\treadonly onChange: Event<IChangeEvent>;\n\tresource: URI | null;\n\thidden: boolean;\n\tcachedSearchComplete: ISearchComplete | undefined;\n\thide(): void;\n\treadonly isAIContributed: boolean;\n\tid(): string;\n\tparent(): ISearchResult;\n\treadonly hasChildren: boolean;\n\tname(): string;\n\treadonly isDirty: boolean;\n\tgetFolderMatch(resource: URI): ISearchTreeFolderMatch | undefined;\n\tadd(allRaw: IFileMatch[], searchInstanceID: string, ai: boolean, silent?: boolean): void;\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatch | (ISearchTreeFileMatch | ISearchTreeFolderMatch)[], ai?: boolean): void;\n\tgroupFilesByFolder(fileMatches: ISearchTreeFileMatch[]): { byFolder: Map<URI, ISearchTreeFileMatch[]>; other: ISearchTreeFileMatch[] };\n\tisEmpty(): boolean;\n\tfindFolderSubstr(resource: URI): ISearchTreeFolderMatch | undefined;\n\tquery: ITextQuery | null;\n\tfolderMatches(): ISearchTreeFolderMatch[];\n\tmatches(): ISearchTreeFileMatch[];\n\tshowHighlights: boolean;\n\ttoggleHighlights(value: boolean): void;\n\trangeHighlightDecorations: RangeHighlightDecorations;\n\tfileCount(): number;\n\tcount(): number;\n\tclear(): void;\n\tdispose(): void;\n}\n\nexport interface IPlainTextSearchHeading extends ITextSearchHeading {\n\treplace(match: ISearchTreeFileMatch): Promise<any>;\n\treplaceAll(progress: IProgress<IProgressStep>): Promise<any>;\n}\n\nexport interface ISearchTreeFolderMatch {\n\treadonly onChange: Event<IChangeEvent>;\n\treadonly onDispose: Event<void>;\n\tid(): string;\n\tresource: URI | null;\n\tindex(): number;\n\tname(): string;\n\tcount(): number;\n\thasChildren: boolean;\n\tparent(): ISearchTreeFolderMatch | ITextSearchHeading;\n\tmatches(): (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[];\n\tallDownstreamFileMatches(): ISearchTreeFileMatch[];\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource | (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[]): void;\n\taddFileMatch(raw: IFileMatch[], silent: boolean, searchInstanceID: string): void;\n\tisEmpty(): boolean;\n\tclear(clearingAll?: boolean): void;\n\tshowHighlights: boolean;\n\tsearchModel: ISearchModel;\n\tquery: ITextQuery | null;\n\treplace(match: ISearchTreeFileMatch): Promise<any>;\n\treplacingAll: boolean;\n\tbindModel(model: ITextModel): void;\n\tgetDownstreamFileMatch(uri: URI): ISearchTreeFileMatch | null;\n\treplaceAll(): Promise<any>;\n\trecursiveFileCount(): number;\n\tdoRemoveFile(fileMatches: ISearchTreeFileMatch[], dispose?: boolean, trigger?: boolean, keepReadonly?: boolean): void;\n\tunbindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI): void;\n\tbindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI): Promise<void>;\n\tunbindNotebookEditorWidget(editor: NotebookEditorWidget, resource: URI): void;\n\thasOnlyReadOnlyMatches(): boolean;\n\tfileMatchesIterator(): IterableIterator<ISearchTreeFileMatch>;\n\tfolderMatchesIterator(): IterableIterator<ISearchTreeFolderMatchWithResource>;\n\trecursiveFileCount(): number;\n\trecursiveMatchCount(): number;\n\tdispose(): void;\n\tisAIContributed(): boolean;\n}\n\nexport interface ISearchTreeFolderMatchWithResource extends ISearchTreeFolderMatch {\n\tresource: URI;\n}\n\nexport interface ISearchTreeFolderMatchWorkspaceRoot extends ISearchTreeFolderMatchWithResource {\n\tcreateAndConfigureFileMatch(rawFileMatch: IFileMatch<URI>, searchInstanceID: string): ISearchTreeFileMatch;\n}\n\nexport interface ISearchTreeFolderMatchNoRoot extends ISearchTreeFolderMatch {\n\tcreateAndConfigureFileMatch(rawFileMatch: IFileMatch<URI>, searchInstanceID: string): ISearchTreeFileMatch;\n}\n\nexport interface ISearchTreeFileMatch {\n\tid(): string;\n\tresource: URI;\n\tonChange: Event<{\n\t\tdidRemove?: boolean;\n\t\tforceUpdateModel?: boolean;\n\t}>;\n\thasChildren: boolean;\n\treadonly onDispose: Event<void>;\n\tname(): string;\n\tcount(): number;\n\thasOnlyReadOnlyMatches(): boolean;\n\tmatches(): ISearchTreeMatch[];\n\tupdateHighlights(): void;\n\tgetSelectedMatch(): ISearchTreeMatch | null;\n\tparent(): ISearchTreeFolderMatch;\n\tbindModel(model: ITextModel): void;\n\thasReadonlyMatches(): boolean;\n\taddContext(results: ITextSearchResult[] | undefined): void;\n\tadd(match: ISearchTreeMatch, trigger?: boolean): void;\n\treplace(toReplace: ISearchTreeMatch): Promise<void>;\n\tremove(matches: ISearchTreeMatch | (ISearchTreeMatch[])): void;\n\tsetSelectedMatch(match: ISearchTreeMatch | null): void;\n\tfileStat: IFileStatWithPartialMetadata | undefined;\n\tresolveFileStat(fileService: IFileService): Promise<void>;\n\ttextMatches(): ISearchTreeMatch[];\n\treadonly context: Map<number, string>;\n\treadonly closestRoot: ISearchTreeFolderMatchWorkspaceRoot | null;\n\tisMatchSelected(match: ISearchTreeMatch): boolean;\n\tdispose(): void;\n}\n\nexport interface ISearchTreeMatch {\n\tid(): string;\n\tparent(): ISearchTreeFileMatch;\n\ttext(): string;\n\trange(): Range;\n\tpreview(): { before: string; fullBefore: string; inside: string; after: string };\n\treplaceString: string;\n\tfullMatchText(includeSurrounding?: boolean): string;\n\trangeInPreview(): ISearchRange;\n\tfullPreviewLines(): string[];\n\tgetMatchString(): string;\n\tisReadonly: boolean;\n}\n\nexport function isSearchModel(obj: any): obj is ISearchModel {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(SEARCH_MODEL_PREFIX);\n}\n\nexport function isSearchResult(obj: any): obj is ISearchResult {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(SEARCH_RESULT_PREFIX);\n}\n\nexport function isTextSearchHeading(obj: any): obj is ITextSearchHeading {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(TEXT_SEARCH_HEADING_PREFIX);\n}\n\nexport function isPlainTextSearchHeading(obj: any): obj is IPlainTextSearchHeading {\n\treturn isTextSearchHeading(obj) &&\n\t\ttypeof (<any>obj).replace === 'function' &&\n\t\ttypeof (<any>obj).replaceAll === 'function';\n}\n\nexport function isSearchTreeFolderMatch(obj: any): obj is ISearchTreeFolderMatch {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(FOLDER_MATCH_PREFIX);\n}\n\nexport function isSearchTreeFolderMatchWithResource(obj: any): obj is ISearchTreeFolderMatchWithResource {\n\treturn isSearchTreeFolderMatch(obj) && obj.resource instanceof URI;\n}\n\nexport function isSearchTreeFolderMatchWorkspaceRoot(obj: any): obj is ISearchTreeFolderMatchWorkspaceRoot {\n\treturn isSearchTreeFolderMatchWithResource(obj) &&\n\t\ttypeof (<any>obj).createAndConfigureFileMatch === 'function';\n}\n\nexport function isSearchTreeFolderMatchNoRoot(obj: any): obj is ISearchTreeFolderMatchNoRoot {\n\treturn isSearchTreeFolderMatch(obj) &&\n\t\ttypeof (<any>obj).createAndConfigureFileMatch === 'function';\n}\n\nexport function isSearchTreeFileMatch(obj: any): obj is ISearchTreeFileMatch {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(FILE_MATCH_PREFIX);\n}\n\nexport function isSearchTreeMatch(obj: any): obj is ISearchTreeMatch {\n\treturn typeof obj === 'object' &&\n\t\tobj !== null &&\n\t\ttypeof obj.id === 'function' &&\n\t\tobj.id().startsWith(MATCH_PREFIX);\n}\n\nexport function getFileMatches(matches: (ISearchTreeFileMatch | ISearchTreeFolderMatchWithResource)[]): ISearchTreeFileMatch[] {\n\n\tconst folderMatches: ISearchTreeFolderMatchWithResource[] = [];\n\tconst fileMatches: ISearchTreeFileMatch[] = [];\n\tmatches.forEach((e) => {\n\t\tif (isSearchTreeFileMatch(e)) {\n\t\t\tfileMatches.push(e);\n\t\t} else {\n\t\t\tfolderMatches.push(e);\n\t\t}\n\t});\n\n\treturn fileMatches.concat(folderMatches.map(e => e.allDownstreamFileMatches()).flat());\n}\n"],
  "mappings": "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",
  "names": ["SearchModelLocation"]
}
