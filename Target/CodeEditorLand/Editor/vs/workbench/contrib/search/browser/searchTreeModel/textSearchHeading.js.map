{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/search/browser/searchTreeModel/textSearchHeading.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { ResourceMap } from '../../../../../base/common/map.js';\nimport { TernarySearchTree } from '../../../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../../../base/common/uri.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IProgress, IProgressStep } from '../../../../../platform/progress/common/progress.js';\nimport { IUriIdentityService } from '../../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IReplaceService } from '../replace.js';\nimport { IFileMatch, ISearchComplete, ITextQuery } from '../../../../services/search/common/search.js';\nimport { RangeHighlightDecorations } from './rangeDecorations.js';\nimport { FolderMatchNoRootImpl, FolderMatchWorkspaceRootImpl } from './folderMatch.js';\nimport { IChangeEvent, ISearchTreeFileMatch, ISearchTreeFolderMatch, ISearchTreeFolderMatchWithResource, ISearchTreeFolderMatchWorkspaceRoot, IPlainTextSearchHeading, ISearchResult, isSearchTreeFileMatch, isSearchTreeFolderMatch, ITextSearchHeading, ISearchTreeMatch, TEXT_SEARCH_HEADING_PREFIX, PLAIN_TEXT_SEARCH__RESULT_ID } from './searchTreeCommon.js';\nimport { isNotebookFileMatch } from '../notebookSearch/notebookSearchModelBase.js';\n\n\nexport abstract class TextSearchHeadingImpl extends Disposable implements ITextSearchHeading {\n\tprivate _onChange = this._register(new Emitter<IChangeEvent>());\n\treadonly onChange: Event<IChangeEvent> = this._onChange.event;\n\tprivate _isDirty = false;\n\tprivate _showHighlights: boolean = false;\n\n\tprivate _query: ITextQuery | null = null;\n\tprivate _rangeHighlightDecorations: RangeHighlightDecorations;\n\tprivate disposePastResults: () => Promise<void> = () => Promise.resolve();\n\n\tprivate _folderMatches: ISearchTreeFolderMatchWorkspaceRoot[] = [];\n\tprivate _otherFilesMatch: ISearchTreeFolderMatch | null = null;\n\tprivate _folderMatchesMap: TernarySearchTree<URI, ISearchTreeFolderMatchWithResource> = TernarySearchTree.forUris<ISearchTreeFolderMatchWorkspaceRoot>(key => this.uriIdentityService.extUri.ignorePathCasing(key));\n\tpublic resource = null;\n\tpublic hidden = false;\n\n\tpublic cachedSearchComplete: ISearchComplete | undefined;\n\tconstructor(\n\t\tprivate _allowOtherResults: boolean,\n\t\tprivate _parent: ISearchResult,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\t\tthis._rangeHighlightDecorations = this.instantiationService.createInstance(RangeHighlightDecorations);\n\n\t\tthis._register(this.onChange(e => {\n\t\t\tif (e.removed) {\n\t\t\t\tthis._isDirty = !this.isEmpty();\n\t\t\t}\n\t\t}));\n\t}\n\n\thide() {\n\t\tthis.hidden = true;\n\t\tthis.clear();\n\t}\n\n\tparent() {\n\t\treturn this._parent;\n\t}\n\n\tget hasChildren(): boolean {\n\t\treturn this._folderMatches.length > 0;\n\t}\n\n\tabstract get isAIContributed(): boolean;\n\tabstract id(): string;\n\tabstract name(): string;\n\n\tget isDirty(): boolean {\n\t\treturn this._isDirty;\n\t}\n\n\tpublic getFolderMatch(resource: URI): ISearchTreeFolderMatch | undefined {\n\t\tconst folderMatch = this._folderMatchesMap.findSubstr(resource);\n\n\t\tif (!folderMatch && this._allowOtherResults && this._otherFilesMatch) {\n\t\t\treturn this._otherFilesMatch;\n\t\t}\n\t\treturn folderMatch;\n\t}\n\n\tadd(allRaw: IFileMatch[], searchInstanceID: string, silent: boolean = false): void {\n\t\t// Split up raw into a list per folder so we can do a batch add per folder.\n\n\t\tconst { byFolder, other } = this.groupFilesByFolder(allRaw);\n\t\tbyFolder.forEach(raw => {\n\t\t\tif (!raw.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ai results go into the respective folder\n\t\t\tconst folderMatch = this.getFolderMatch(raw[0].resource);\n\t\t\tfolderMatch?.addFileMatch(raw, silent, searchInstanceID);\n\t\t});\n\n\t\tif (!this.isAIContributed) {\n\t\t\tthis._otherFilesMatch?.addFileMatch(other, silent, searchInstanceID);\n\t\t}\n\t\tthis.disposePastResults();\n\t}\n\n\tremove(matches: ISearchTreeFileMatch | ISearchTreeFolderMatch | (ISearchTreeFileMatch | ISearchTreeFolderMatch)[], ai = false): void {\n\t\tif (!Array.isArray(matches)) {\n\t\t\tmatches = [matches];\n\t\t}\n\n\t\tmatches.forEach(m => {\n\t\t\tif (isSearchTreeFolderMatch(m)) {\n\t\t\t\tm.clear();\n\t\t\t}\n\t\t});\n\n\t\tconst fileMatches: ISearchTreeFileMatch[] = matches.filter(m => isSearchTreeFileMatch(m)) as ISearchTreeFileMatch[];\n\n\t\tconst { byFolder, other } = this.groupFilesByFolder(fileMatches);\n\t\tbyFolder.forEach(matches => {\n\t\t\tif (!matches.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.getFolderMatch(matches[0].resource)?.remove(matches);\n\t\t});\n\n\t\tif (other.length) {\n\t\t\tthis.getFolderMatch(other[0].resource)?.remove(<ISearchTreeFileMatch[]>other);\n\t\t}\n\t}\n\n\tgroupFilesByFolder<FileMatch extends IFileMatch>(fileMatches: FileMatch[]): { byFolder: ResourceMap<FileMatch[]>; other: FileMatch[] } {\n\t\tconst rawPerFolder = new ResourceMap<FileMatch[]>();\n\t\tconst otherFileMatches: FileMatch[] = [];\n\t\tthis._folderMatches.forEach(fm => rawPerFolder.set(fm.resource, []));\n\n\t\tfileMatches.forEach(rawFileMatch => {\n\t\t\tconst folderMatch = this.getFolderMatch(rawFileMatch.resource);\n\t\t\tif (!folderMatch) {\n\t\t\t\t// foldermatch was previously removed by user or disposed for some reason\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst resource = folderMatch.resource;\n\t\t\tif (resource) {\n\t\t\t\trawPerFolder.get(resource)!.push(rawFileMatch);\n\t\t\t} else {\n\t\t\t\totherFileMatches.push(rawFileMatch);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tbyFolder: rawPerFolder,\n\t\t\tother: otherFileMatches\n\t\t};\n\t}\n\tisEmpty(): boolean {\n\t\treturn this.folderMatches().every((folderMatch) => folderMatch.isEmpty());\n\t}\n\n\tfindFolderSubstr(resource: URI) {\n\t\treturn this._folderMatchesMap.findSubstr(resource);\n\t}\n\n\tget query(): ITextQuery | null {\n\t\treturn this._query;\n\t}\n\n\tset query(query: ITextQuery | null) {\n\t\t// When updating the query we could change the roots, so keep a reference to them to clean up when we trigger `disposePastResults`\n\t\tconst oldFolderMatches = this.folderMatches();\n\t\tthis.disposePastResults = async () => {\n\t\t\toldFolderMatches.forEach(match => match.clear());\n\t\t\toldFolderMatches.forEach(match => match.dispose());\n\t\t\tthis._isDirty = false;\n\t\t};\n\n\t\tthis.cachedSearchComplete = undefined;\n\n\t\tthis._rangeHighlightDecorations.removeHighlightRange();\n\t\tthis._folderMatchesMap = TernarySearchTree.forUris<ISearchTreeFolderMatchWithResource>(key => this.uriIdentityService.extUri.ignorePathCasing(key));\n\t\tif (!query) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._folderMatches = (query && query.folderQueries || [])\n\t\t\t.map(fq => fq.folder)\n\t\t\t.map((resource, index) => <ISearchTreeFolderMatchWorkspaceRoot>this._createBaseFolderMatch(resource, resource.toString(), index, query, this.isAIContributed));\n\n\t\tthis._folderMatches.forEach(fm => this._folderMatchesMap.set(fm.resource, fm));\n\n\t\tif (this._allowOtherResults) {\n\t\t\tthis._otherFilesMatch = this._createBaseFolderMatch(null, 'otherFiles', this._folderMatches.length + 1, query, this.isAIContributed);\n\t\t}\n\n\t\tthis._query = query;\n\t}\n\tprivate _createBaseFolderMatch(resource: URI | null, id: string, index: number, query: ITextQuery, ai: boolean): ISearchTreeFolderMatch {\n\t\tlet folderMatch: ISearchTreeFolderMatch;\n\t\tif (resource) {\n\t\t\tfolderMatch = this._register(this.createWorkspaceRootWithResourceImpl(resource, id, index, query));\n\t\t} else {\n\t\t\tfolderMatch = this._register(this.instantiationService.createInstance(FolderMatchNoRootImpl, id, index, query, this));\n\t\t}\n\t\tconst disposable = folderMatch.onChange((event) => this._onChange.fire(event));\n\t\tthis._register(folderMatch.onDispose(() => disposable.dispose()));\n\t\treturn folderMatch;\n\t}\n\n\tprotected abstract createWorkspaceRootWithResourceImpl(resource: URI, id: string, index: number, query: ITextQuery): ISearchTreeFolderMatchWorkspaceRoot;\n\n\tfolderMatches(): ISearchTreeFolderMatch[] {\n\t\treturn this._otherFilesMatch && this._allowOtherResults ?\n\t\t\t[\n\t\t\t\t...this._folderMatches,\n\t\t\t\tthis._otherFilesMatch,\n\t\t\t] :\n\t\t\tthis._folderMatches;\n\t}\n\n\tprivate disposeMatches(): void {\n\t\tthis.folderMatches().forEach(folderMatch => folderMatch.dispose());\n\n\t\tthis._folderMatches = [];\n\n\t\tthis._folderMatchesMap = TernarySearchTree.forUris<ISearchTreeFolderMatchWithResource>(key => this.uriIdentityService.extUri.ignorePathCasing(key));\n\n\t\tthis._rangeHighlightDecorations.removeHighlightRange();\n\t}\n\n\tmatches(): ISearchTreeFileMatch[] {\n\t\tconst matches: ISearchTreeFileMatch[][] = [];\n\t\tthis.folderMatches().forEach(folderMatch => {\n\t\t\tmatches.push(folderMatch.allDownstreamFileMatches());\n\t\t});\n\n\t\treturn (<ISearchTreeFileMatch[]>[]).concat(...matches);\n\t}\n\n\tget showHighlights(): boolean {\n\t\treturn this._showHighlights;\n\t}\n\n\ttoggleHighlights(value: boolean): void {\n\t\tif (this._showHighlights === value) {\n\t\t\treturn;\n\t\t}\n\t\tthis._showHighlights = value;\n\t\tlet selectedMatch: ISearchTreeMatch | null = null;\n\t\tthis.matches().forEach((fileMatch: ISearchTreeFileMatch) => {\n\t\t\tfileMatch.updateHighlights();\n\t\t\tif (isNotebookFileMatch(fileMatch)) {\n\t\t\t\tfileMatch.updateNotebookHighlights();\n\t\t\t}\n\t\t\tif (!selectedMatch) {\n\t\t\t\tselectedMatch = fileMatch.getSelectedMatch();\n\t\t\t}\n\t\t});\n\t\tif (this._showHighlights && selectedMatch) {\n\t\t\t// TS?\n\t\t\tthis._rangeHighlightDecorations.highlightRange(\n\t\t\t\t(<ISearchTreeMatch>selectedMatch).parent().resource,\n\t\t\t\t(<ISearchTreeMatch>selectedMatch).range()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._rangeHighlightDecorations.removeHighlightRange();\n\t\t}\n\t}\n\n\tget rangeHighlightDecorations(): RangeHighlightDecorations {\n\t\treturn this._rangeHighlightDecorations;\n\t}\n\n\tfileCount(): number {\n\t\treturn this.folderMatches().reduce<number>((prev, match) => prev + match.recursiveFileCount(), 0);\n\t}\n\n\tcount(): number {\n\t\treturn this.matches().reduce<number>((prev, match) => prev + match.count(), 0);\n\t}\n\n\tclear(): void {\n\t\tthis.folderMatches().forEach((folderMatch) => folderMatch.clear(true));\n\t\tthis.disposeMatches();\n\t\tthis._folderMatches = [];\n\t\tthis._otherFilesMatch = null;\n\t\tthis.cachedSearchComplete = undefined;\n\t}\n\n\toverride async dispose(): Promise<void> {\n\t\tthis._rangeHighlightDecorations.dispose();\n\t\tthis.disposeMatches();\n\t\tsuper.dispose();\n\t\tawait this.disposePastResults();\n\t}\n}\n\nexport class PlainTextSearchHeadingImpl extends TextSearchHeadingImpl implements IPlainTextSearchHeading {\n\tconstructor(\n\t\tparent: ISearchResult,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IReplaceService private readonly replaceService: IReplaceService,\n\t) {\n\t\tsuper(true, parent, instantiationService, uriIdentityService);\n\t}\n\n\tid(): string {\n\t\treturn TEXT_SEARCH_HEADING_PREFIX + PLAIN_TEXT_SEARCH__RESULT_ID;\n\t}\n\n\tget isAIContributed(): boolean {\n\t\treturn false;\n\t}\n\n\treplace(match: ISearchTreeFileMatch): Promise<any> {\n\t\treturn this.getFolderMatch(match.resource)?.replace(match) ?? Promise.resolve();\n\t}\n\n\toverride name(): string {\n\t\treturn 'Text';\n\t}\n\n\treplaceAll(progress: IProgress<IProgressStep>): Promise<any> {\n\t\tthis.replacingAll = true;\n\n\t\tconst promise = this.replaceService.replace(this.matches(), progress);\n\n\t\treturn promise.then(() => {\n\t\t\tthis.replacingAll = false;\n\t\t\tthis.clear();\n\t\t}, () => {\n\t\t\tthis.replacingAll = false;\n\t\t});\n\t}\n\n\tprivate set replacingAll(running: boolean) {\n\t\tthis.folderMatches().forEach((folderMatch) => {\n\t\t\tfolderMatch.replacingAll = running;\n\t\t});\n\t}\n\n\tprotected override createWorkspaceRootWithResourceImpl(resource: URI, id: string, index: number, query: ITextQuery,): ISearchTreeFolderMatchWorkspaceRoot {\n\t\treturn this.instantiationService.createInstance(FolderMatchWorkspaceRootImpl, resource, id, index, query, this);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["matches"]
}
