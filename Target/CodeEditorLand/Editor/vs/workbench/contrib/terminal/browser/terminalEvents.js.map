{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminal/browser/terminalEvents.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalInstance } from './terminal.js';\nimport { DynamicListEventMultiplexer, Event, EventMultiplexer, IDynamicListEventMultiplexer } from '../../../../base/common/event.js';\nimport { DisposableMap, DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ITerminalCapabilityImplMap, TerminalCapability } from '../../../../platform/terminal/common/capabilities/capabilities.js';\n\nexport function createInstanceCapabilityEventMultiplexer<T extends TerminalCapability, K>(\n\tcurrentInstances: ITerminalInstance[],\n\tonAddInstance: Event<ITerminalInstance>,\n\tonRemoveInstance: Event<ITerminalInstance>,\n\tcapabilityId: T,\n\tgetEvent: (capability: ITerminalCapabilityImplMap[T]) => Event<K>\n): IDynamicListEventMultiplexer<{ instance: ITerminalInstance; data: K }> {\n\tconst store = new DisposableStore();\n\tconst multiplexer = store.add(new EventMultiplexer<{ instance: ITerminalInstance; data: K }>());\n\tconst capabilityListeners = store.add(new DisposableMap<number, DisposableMap<ITerminalCapabilityImplMap[T], IDisposable>>());\n\n\tfunction addCapability(instance: ITerminalInstance, capability: ITerminalCapabilityImplMap[T]) {\n\t\tconst listener = multiplexer.add(Event.map(getEvent(capability), data => ({ instance, data })));\n\t\tlet instanceCapabilityListeners = capabilityListeners.get(instance.instanceId);\n\t\tif (!instanceCapabilityListeners) {\n\t\t\tinstanceCapabilityListeners = new DisposableMap<ITerminalCapabilityImplMap[T], IDisposable>();\n\t\t\tcapabilityListeners.set(instance.instanceId, instanceCapabilityListeners);\n\t\t}\n\t\tinstanceCapabilityListeners.set(capability, listener);\n\t}\n\n\t// Existing instances\n\tfor (const instance of currentInstances) {\n\t\tconst capability = instance.capabilities.get(capabilityId);\n\t\tif (capability) {\n\t\t\taddCapability(instance, capability);\n\t\t}\n\t}\n\n\t// Removed instances\n\tstore.add(onRemoveInstance(instance => {\n\t\tcapabilityListeners.deleteAndDispose(instance.instanceId);\n\t}));\n\n\t// Added capabilities\n\tconst addCapabilityMultiplexer = store.add(new DynamicListEventMultiplexer(\n\t\tcurrentInstances,\n\t\tonAddInstance,\n\t\tonRemoveInstance,\n\t\tinstance => Event.map(instance.capabilities.onDidAddCapability, changeEvent => ({ instance, changeEvent }))\n\t));\n\tstore.add(addCapabilityMultiplexer.event(e => {\n\t\tif (e.changeEvent.id === capabilityId) {\n\t\t\taddCapability(e.instance, e.changeEvent.capability);\n\t\t}\n\t}));\n\n\t// Removed capabilities\n\tconst removeCapabilityMultiplexer = store.add(new DynamicListEventMultiplexer(\n\t\tcurrentInstances,\n\t\tonAddInstance,\n\t\tonRemoveInstance,\n\t\tinstance => Event.map(instance.capabilities.onDidRemoveCapability, changeEvent => ({ instance, changeEvent }))\n\t));\n\tstore.add(removeCapabilityMultiplexer.event(e => {\n\t\tif (e.changeEvent.id === capabilityId) {\n\t\t\tcapabilityListeners.get(e.instance.instanceId)?.deleteAndDispose(e.changeEvent.id);\n\t\t}\n\t}));\n\n\treturn {\n\t\tdispose: () => store.dispose(),\n\t\tevent: multiplexer.event\n\t};\n}\n"],
  "mappings": ";;AAKA,SAAS,yBAAyB;AAClC,SAAS,6BAA6B,OAAO,kBAAkB,oCAAoC;AACnG,SAAS,eAAe,iBAAiB,mBAAmB;AAC5D,SAAS,4BAA4B,0BAA0B;AAExD,SAAS,yCACf,kBACA,eACA,kBACA,cACA,UACyE;AACzE,QAAM,QAAQ,IAAI,gBAAgB;AAClC,QAAM,cAAc,MAAM,IAAI,IAAI,iBAA2D,CAAC;AAC9F,QAAM,sBAAsB,MAAM,IAAI,IAAI,cAAiF,CAAC;AAE5H,WAAS,cAAc,UAA6B,YAA2C;AAC9F,UAAM,WAAW,YAAY,IAAI,MAAM,IAAI,SAAS,UAAU,GAAG,WAAS,EAAE,UAAU,KAAK,EAAE,CAAC;AAC9F,QAAI,8BAA8B,oBAAoB,IAAI,SAAS,UAAU;AAC7E,QAAI,CAAC,6BAA6B;AACjC,oCAA8B,IAAI,cAA0D;AAC5F,0BAAoB,IAAI,SAAS,YAAY,2BAA2B;AAAA,IACzE;AACA,gCAA4B,IAAI,YAAY,QAAQ;AAAA,EACrD;AARS;AAWT,aAAW,YAAY,kBAAkB;AACxC,UAAM,aAAa,SAAS,aAAa,IAAI,YAAY;AACzD,QAAI,YAAY;AACf,oBAAc,UAAU,UAAU;AAAA,IACnC;AAAA,EACD;AAGA,QAAM,IAAI,iBAAiB,cAAY;AACtC,wBAAoB,iBAAiB,SAAS,UAAU;AAAA,EACzD,CAAC,CAAC;AAGF,QAAM,2BAA2B,MAAM,IAAI,IAAI;AAAA,IAC9C;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAY,MAAM,IAAI,SAAS,aAAa,oBAAoB,kBAAgB,EAAE,UAAU,YAAY,EAAE;AAAA,EAC3G,CAAC;AACD,QAAM,IAAI,yBAAyB,MAAM,OAAK;AAC7C,QAAI,EAAE,YAAY,OAAO,cAAc;AACtC,oBAAc,EAAE,UAAU,EAAE,YAAY,UAAU;AAAA,IACnD;AAAA,EACD,CAAC,CAAC;AAGF,QAAM,8BAA8B,MAAM,IAAI,IAAI;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAY,MAAM,IAAI,SAAS,aAAa,uBAAuB,kBAAgB,EAAE,UAAU,YAAY,EAAE;AAAA,EAC9G,CAAC;AACD,QAAM,IAAI,4BAA4B,MAAM,OAAK;AAChD,QAAI,EAAE,YAAY,OAAO,cAAc;AACtC,0BAAoB,IAAI,EAAE,SAAS,UAAU,GAAG,iBAAiB,EAAE,YAAY,EAAE;AAAA,IAClF;AAAA,EACD,CAAC,CAAC;AAEF,SAAO;AAAA,IACN,SAAS,6BAAM,MAAM,QAAQ,GAApB;AAAA,IACT,OAAO,YAAY;AAAA,EACpB;AACD;AAhEgB;",
  "names": []
}
