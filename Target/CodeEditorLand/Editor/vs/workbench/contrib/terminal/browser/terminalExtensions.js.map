{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminal/browser/terminalExtensions.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrandedService, IConstructorSignature } from '../../../../platform/instantiation/common/instantiation.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IDetachedTerminalInstance, ITerminalContribution, ITerminalInstance } from './terminal.js';\nimport { TerminalWidgetManager } from './widgets/widgetManager.js';\nimport { ITerminalProcessInfo, ITerminalProcessManager } from '../common/terminal.js';\n\nexport interface ITerminalContributionContext {\n\tinstance: ITerminalInstance;\n\tprocessManager: ITerminalProcessManager;\n\twidgetManager: TerminalWidgetManager;\n}\nexport interface IDetachedCompatibleTerminalContributionContext {\n\tinstance: IDetachedTerminalInstance;\n\tprocessManager: ITerminalProcessInfo;\n\twidgetManager: TerminalWidgetManager;\n}\n\n/** Constructor compatible with full terminal instances, is assignable to {@link DetachedCompatibleTerminalContributionCtor} */\nexport type TerminalContributionCtor = IConstructorSignature<ITerminalContribution, [ITerminalContributionContext]>;\n/** Constructor compatible with detached terminals */\nexport type DetachedCompatibleTerminalContributionCtor = IConstructorSignature<ITerminalContribution, [IDetachedCompatibleTerminalContributionContext]>;\n\nexport type ITerminalContributionDescription = { readonly id: string } & (\n\t| { readonly canRunInDetachedTerminals: false; readonly ctor: TerminalContributionCtor }\n\t| { readonly canRunInDetachedTerminals: true; readonly ctor: DetachedCompatibleTerminalContributionCtor }\n);\n\n/**\n * A terminal contribution is a method for extending _each_ terminal created, providing the terminal\n * instance when it becomes ready and various convenient hooks for xterm.js like when it's opened in\n * the DOM.\n * @param id The unique ID of the terminal contribution.\n * @param ctor The constructor of the terminal contribution.\n * @param canRunInDetachedTerminals Whether the terminal contribution should be run in detecthed\n * terminals. Defaults to false.\n */\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(ctx: ITerminalContributionContext, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals?: false): void;\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(ctx: IDetachedCompatibleTerminalContributionContext, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals: true): void;\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(ctx: any, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals: boolean = false): void {\n\t// eslint-disable-next-line local/code-no-dangerous-type-assertions\n\tTerminalContributionRegistry.INSTANCE.registerTerminalContribution({ id, ctor, canRunInDetachedTerminals } as ITerminalContributionDescription);\n}\n\n/**\n * The registry of terminal contributions.\n *\n * **WARNING**: This is internal and should only be used by core terminal code that activates the\n * contributions.\n */\nexport namespace TerminalExtensionsRegistry {\n\texport function getTerminalContributions(): ITerminalContributionDescription[] {\n\t\treturn TerminalContributionRegistry.INSTANCE.getTerminalContributions();\n\t}\n}\n\nclass TerminalContributionRegistry {\n\n\tpublic static readonly INSTANCE = new TerminalContributionRegistry();\n\n\tprivate readonly _terminalContributions: ITerminalContributionDescription[] = [];\n\n\tconstructor() {\n\t}\n\n\tpublic registerTerminalContribution(description: ITerminalContributionDescription): void {\n\t\tthis._terminalContributions.push(description);\n\t}\n\n\tpublic getTerminalContributions(): ITerminalContributionDescription[] {\n\t\treturn this._terminalContributions.slice(0);\n\t}\n}\n\nconst enum Extensions {\n\tTerminalContributions = 'terminal.contributions'\n}\n\nRegistry.add(Extensions.TerminalContributions, TerminalContributionRegistry.INSTANCE);\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB,6BAA6B;AACtD,SAAS,gBAAgB;AACzB,SAAS,2BAA2B,uBAAuB,yBAAyB;AACpF,SAAS,6BAA6B;AACtC,SAAS,sBAAsB,+BAA+B;AAkCvD,SAAS,6BAAgE,IAAY,MAAuE,4BAAqC,OAAa;AAEpN,+BAA6B,SAAS,6BAA6B,EAAE,IAAI,MAAM,0BAA0B,CAAqC;AAC/I;AAHgB;AAWT,IAAU;AAAA,CAAV,CAAUA,gCAAV;AACC,WAAS,2BAA+D;AAC9E,WAAO,6BAA6B,SAAS,yBAAyB;AAAA,EACvE;AAFO,EAAAA,4BAAS;AAAA;AAAA,GADA;AAMjB,MAAM,6BAA6B;AAAA,EA5DnC,OA4DmC;AAAA;AAAA;AAAA,EAElC,OAAuB,WAAW,IAAI,6BAA6B;AAAA,EAElD,yBAA6D,CAAC;AAAA,EAE/E,cAAc;AAAA,EACd;AAAA,EAEO,6BAA6B,aAAqD;AACxF,SAAK,uBAAuB,KAAK,WAAW;AAAA,EAC7C;AAAA,EAEO,2BAA+D;AACrE,WAAO,KAAK,uBAAuB,MAAM,CAAC;AAAA,EAC3C;AACD;AAEA,IAAW,aAAX,kBAAWC,gBAAX;AACC,EAAAA,YAAA,2BAAwB;AADd,SAAAA;AAAA,GAAA;AAIX,SAAS,IAAI,sDAAkC,6BAA6B,QAAQ;",
  "names": ["TerminalExtensionsRegistry", "Extensions"]
}
