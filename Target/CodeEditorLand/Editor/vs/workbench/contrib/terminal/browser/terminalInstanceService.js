var p=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var d=(a,r,e,t)=>{for(var n=t>1?void 0:t?v(r,e):r,i=a.length-1,o;i>=0;i--)(o=a[i])&&(n=(t?o(r,e,n):o(n))||n);return t&&n&&p(r,e,n),n},c=(a,r)=>(e,t)=>r(e,t,a);import{ITerminalInstanceService as T}from"./terminal.js";import{InstantiationType as f,registerSingleton as h}from"../../../../platform/instantiation/common/extensions.js";import{Disposable as k}from"../../../../base/common/lifecycle.js";import{TerminalExtensions as m}from"../../../../platform/terminal/common/terminal.js";import{IInstantiationService as y}from"../../../../platform/instantiation/common/instantiation.js";import{TerminalInstance as B}from"./terminalInstance.js";import{IContextKeyService as u}from"../../../../platform/contextkey/common/contextkey.js";import"../../../../base/common/uri.js";import{Emitter as I}from"../../../../base/common/event.js";import{TerminalContextKeys as S}from"../common/terminalContextKey.js";import{Registry as l}from"../../../../platform/registry/common/platform.js";import{IWorkbenchEnvironmentService as _}from"../../../services/environment/common/environmentService.js";import{promiseWithResolvers as R}from"../../../../base/common/async.js";let s=class extends k{constructor(e,t,n){super();this._instantiationService=e;this._contextKeyService=t;this._terminalShellTypeContextKey=S.shellType.bindTo(this._contextKeyService);for(const i of[void 0,n.remoteAuthority]){const{promise:o,resolve:g}=R();this._backendRegistration.set(i,{promise:o,resolve:g})}}_terminalShellTypeContextKey;_backendRegistration=new Map;_onDidCreateInstance=this._register(new I);get onDidCreateInstance(){return this._onDidCreateInstance.event}_onDidRegisterBackend=this._register(new I);get onDidRegisterBackend(){return this._onDidRegisterBackend.event}createInstance(e,t){const n=this.convertProfileToShellLaunchConfig(e),i=this._instantiationService.createInstance(B,this._terminalShellTypeContextKey,n);return i.target=t,this._onDidCreateInstance.fire(i),i}convertProfileToShellLaunchConfig(e,t){if(e&&"profileName"in e){const n=e;return n.path?{executable:n.path,args:n.args,env:n.env,icon:n.icon,color:n.color,name:n.overrideName?n.profileName:void 0,cwd:t}:e}return e?(t&&(e.cwd=t),e):{}}async getBackend(e){let t=l.as(m.Backend).getTerminalBackend(e);return t||(await this._backendRegistration.get(e)?.promise,t=l.as(m.Backend).getTerminalBackend(e)),t}getRegisteredBackends(){return l.as(m.Backend).backends.values()}didRegisterBackend(e){this._backendRegistration.get(e.remoteAuthority)?.resolve(),this._onDidRegisterBackend.fire(e)}};s=d([c(0,y),c(1,u),c(2,_)],s),h(T,s,f.Delayed);export{s as TerminalInstanceService};
