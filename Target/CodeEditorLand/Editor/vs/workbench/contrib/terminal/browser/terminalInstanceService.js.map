{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminal/browser/terminalInstanceService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalInstance, ITerminalInstanceService } from './terminal.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalProfile, TerminalExtensions, TerminalLocation } from '../../../../platform/terminal/common/terminal.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { TerminalInstance } from './terminalInstance.js';\nimport { IContextKey, IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { TerminalContextKeys } from '../common/terminalContextKey.js';\nimport { Registry } from '../../../../platform/registry/common/platform.js';\nimport { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';\nimport { promiseWithResolvers } from '../../../../base/common/async.js';\n\nexport class TerminalInstanceService extends Disposable implements ITerminalInstanceService {\n\tdeclare _serviceBrand: undefined;\n\tprivate _terminalShellTypeContextKey: IContextKey<string>;\n\tprivate _backendRegistration = new Map<string | undefined, { promise: Promise<void>; resolve: () => void }>();\n\n\tprivate readonly _onDidCreateInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidCreateInstance(): Event<ITerminalInstance> { return this._onDidCreateInstance.event; }\n\n\tprivate readonly _onDidRegisterBackend = this._register(new Emitter<ITerminalBackend>());\n\tget onDidRegisterBackend(): Event<ITerminalBackend> { return this._onDidRegisterBackend.event; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\n\t\tfor (const remoteAuthority of [undefined, environmentService.remoteAuthority]) {\n\t\t\tconst { promise, resolve } = promiseWithResolvers<void>();\n\t\t\tthis._backendRegistration.set(remoteAuthority, { promise, resolve });\n\t\t}\n\t}\n\n\tcreateInstance(profile: ITerminalProfile, target: TerminalLocation): ITerminalInstance;\n\tcreateInstance(shellLaunchConfig: IShellLaunchConfig, target: TerminalLocation): ITerminalInstance;\n\tcreateInstance(config: IShellLaunchConfig | ITerminalProfile, target: TerminalLocation): ITerminalInstance {\n\t\tconst shellLaunchConfig = this.convertProfileToShellLaunchConfig(config);\n\t\tconst instance = this._instantiationService.createInstance(TerminalInstance, this._terminalShellTypeContextKey, shellLaunchConfig);\n\t\tinstance.target = target;\n\t\tthis._onDidCreateInstance.fire(instance);\n\t\treturn instance;\n\t}\n\n\tconvertProfileToShellLaunchConfig(shellLaunchConfigOrProfile?: IShellLaunchConfig | ITerminalProfile, cwd?: string | URI): IShellLaunchConfig {\n\t\t// Profile was provided\n\t\tif (shellLaunchConfigOrProfile && 'profileName' in shellLaunchConfigOrProfile) {\n\t\t\tconst profile = shellLaunchConfigOrProfile;\n\t\t\tif (!profile.path) {\n\t\t\t\treturn shellLaunchConfigOrProfile;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\texecutable: profile.path,\n\t\t\t\targs: profile.args,\n\t\t\t\tenv: profile.env,\n\t\t\t\ticon: profile.icon,\n\t\t\t\tcolor: profile.color,\n\t\t\t\tname: profile.overrideName ? profile.profileName : undefined,\n\t\t\t\tcwd\n\t\t\t};\n\t\t}\n\n\t\t// A shell launch config was provided\n\t\tif (shellLaunchConfigOrProfile) {\n\t\t\tif (cwd) {\n\t\t\t\tshellLaunchConfigOrProfile.cwd = cwd;\n\t\t\t}\n\t\t\treturn shellLaunchConfigOrProfile;\n\t\t}\n\n\t\t// Return empty shell launch config\n\t\treturn {};\n\t}\n\n\tasync getBackend(remoteAuthority?: string): Promise<ITerminalBackend | undefined> {\n\t\tlet backend = Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\t// Ensure backend is initialized and try again\n\t\t\tawait this._backendRegistration.get(remoteAuthority)?.promise;\n\t\t\tbackend = Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend(remoteAuthority);\n\t\t}\n\t\treturn backend;\n\t}\n\n\tgetRegisteredBackends(): IterableIterator<ITerminalBackend> {\n\t\treturn Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).backends.values();\n\t}\n\n\tdidRegisterBackend(backend: ITerminalBackend) {\n\t\tthis._backendRegistration.get(backend.remoteAuthority)?.resolve();\n\t\tthis._onDidRegisterBackend.fire(backend);\n\t}\n}\n\nregisterSingleton(ITerminalInstanceService, TerminalInstanceService, InstantiationType.Delayed);\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,mBAAmB,gCAAgC;AAC5D,SAAS,mBAAmB,yBAAyB;AACrD,SAAS,kBAAkB;AAC3B,SAAS,oBAAoB,kBAAkB,0BAA0B,kBAAkB,oBAAoB,wBAAwB;AACvI,SAAS,6BAA6B;AACtC,SAAS,wBAAwB;AACjC,SAAS,aAAa,0BAA0B;AAChD,SAAS,WAAW;AACpB,SAAS,SAAS,aAAa;AAC/B,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;AACzB,SAAS,oCAAoC;AAC7C,SAAS,4BAA4B;AAE9B,IAAM,0BAAN,cAAsC,WAA+C;AAAA,EAW3F,YACyC,uBACH,oBACP,oBAC7B;AACD,UAAM;AAJkC;AACH;AAIrC,SAAK,+BAA+B,oBAAoB,UAAU,OAAO,KAAK,kBAAkB;AAEhG,eAAW,mBAAmB,CAAC,QAAW,mBAAmB,eAAe,GAAG;AAC9E,YAAM,EAAE,SAAS,QAAQ,IAAI,qBAA2B;AACxD,WAAK,qBAAqB,IAAI,iBAAiB,EAAE,SAAS,QAAQ,CAAC;AAAA,IACpE;AAAA,EACD;AAAA,EA1CD,OAmB4F;AAAA;AAAA;AAAA,EAEnF;AAAA,EACA,uBAAuB,oBAAI,IAAyE;AAAA,EAE3F,uBAAuB,KAAK,UAAU,IAAI,QAA2B,CAAC;AAAA,EACvF,IAAI,sBAAgD;AAAE,WAAO,KAAK,qBAAqB;AAAA,EAAO;AAAA,EAE7E,wBAAwB,KAAK,UAAU,IAAI,QAA0B,CAAC;AAAA,EACvF,IAAI,uBAAgD;AAAE,WAAO,KAAK,sBAAsB;AAAA,EAAO;AAAA,EAkB/F,eAAe,QAA+C,QAA6C;AAC1G,UAAM,oBAAoB,KAAK,kCAAkC,MAAM;AACvE,UAAM,WAAW,KAAK,sBAAsB,eAAe,kBAAkB,KAAK,8BAA8B,iBAAiB;AACjI,aAAS,SAAS;AAClB,SAAK,qBAAqB,KAAK,QAAQ;AACvC,WAAO;AAAA,EACR;AAAA,EAEA,kCAAkC,4BAAoE,KAAwC;AAE7I,QAAI,8BAA8B,iBAAiB,4BAA4B;AAC9E,YAAM,UAAU;AAChB,UAAI,CAAC,QAAQ,MAAM;AAClB,eAAO;AAAA,MACR;AACA,aAAO;AAAA,QACN,YAAY,QAAQ;AAAA,QACpB,MAAM,QAAQ;AAAA,QACd,KAAK,QAAQ;AAAA,QACb,MAAM,QAAQ;AAAA,QACd,OAAO,QAAQ;AAAA,QACf,MAAM,QAAQ,eAAe,QAAQ,cAAc;AAAA,QACnD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,4BAA4B;AAC/B,UAAI,KAAK;AACR,mCAA2B,MAAM;AAAA,MAClC;AACA,aAAO;AAAA,IACR;AAGA,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,iBAAiE;AACjF,QAAI,UAAU,SAAS,GAA6B,mBAAmB,OAAO,EAAE,mBAAmB,eAAe;AAClH,QAAI,CAAC,SAAS;AAEb,YAAM,KAAK,qBAAqB,IAAI,eAAe,GAAG;AACtD,gBAAU,SAAS,GAA6B,mBAAmB,OAAO,EAAE,mBAAmB,eAAe;AAAA,IAC/G;AACA,WAAO;AAAA,EACR;AAAA,EAEA,wBAA4D;AAC3D,WAAO,SAAS,GAA6B,mBAAmB,OAAO,EAAE,SAAS,OAAO;AAAA,EAC1F;AAAA,EAEA,mBAAmB,SAA2B;AAC7C,SAAK,qBAAqB,IAAI,QAAQ,eAAe,GAAG,QAAQ;AAChE,SAAK,sBAAsB,KAAK,OAAO;AAAA,EACxC;AACD;AAnFa,0BAAN;AAAA,EAYJ;AAAA,EACA;AAAA,EACA;AAAA,GAdU;AAqFb,kBAAkB,0BAA0B,yBAAyB,kBAAkB,OAAO;",
  "names": []
}
