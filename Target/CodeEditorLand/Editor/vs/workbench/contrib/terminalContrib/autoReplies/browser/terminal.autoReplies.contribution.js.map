{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminalContrib/autoReplies/browser/terminal.autoReplies.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { type ITerminalBackend } from '../../../../../platform/terminal/common/terminal.js';\nimport { registerWorkbenchContribution2, WorkbenchPhase, type IWorkbenchContribution } from '../../../../common/contributions.js';\nimport { ITerminalInstanceService } from '../../../terminal/browser/terminal.js';\nimport { TERMINAL_CONFIG_SECTION } from '../../../terminal/common/terminal.js';\nimport { TerminalAutoRepliesSettingId, type ITerminalAutoRepliesConfiguration } from '../common/terminalAutoRepliesConfiguration.js';\n\n// #region Workbench contributions\n\nexport class TerminalAutoRepliesContribution extends Disposable implements IWorkbenchContribution {\n\tstatic ID = 'terminalAutoReplies';\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t) {\n\t\tsuper();\n\n\t\tfor (const backend of terminalInstanceService.getRegisteredBackends()) {\n\t\t\tthis._installListenersOnBackend(backend);\n\t\t}\n\t\tthis._register(terminalInstanceService.onDidRegisterBackend(async e => this._installListenersOnBackend(e)));\n\t}\n\n\tprivate _installListenersOnBackend(backend: ITerminalBackend): void {\n\t\t// Listen for config changes\n\t\tconst initialConfig = this._configurationService.getValue<ITerminalAutoRepliesConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t// Ensure the reply is valid\n\t\t\tconst reply = initialConfig.autoReplies[match] as string | null;\n\t\t\tif (reply) {\n\t\t\t\tbackend.installAutoReply(match, reply);\n\t\t\t}\n\t\t}\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalAutoRepliesSettingId.AutoReplies)) {\n\t\t\t\tbackend.uninstallAllAutoReplies();\n\t\t\t\tconst config = this._configurationService.getValue<ITerminalAutoRepliesConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t// Ensure the reply is valid\n\t\t\t\t\tconst reply = config.autoReplies[match] as string | null;\n\t\t\t\t\tif (reply) {\n\t\t\t\t\t\tbackend.installAutoReply(match, reply);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n}\n\nregisterWorkbenchContribution2(TerminalAutoRepliesContribution.ID, TerminalAutoRepliesContribution, WorkbenchPhase.AfterRestored);\n\n// #endregion Contributions\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC,eAAsC;AACtC,SAAS,gCAAgC,sBAAmD;AAC5F,SAAS,gCAAgC;AACzC,SAAS,+BAA+B;AACxC,SAAS,oCAA4E;AAI9E,IAAM,kCAAN,cAA8C,WAA6C;AAAA,EAGjG,YACyC,uBACd,yBACzB;AACD,UAAM;AAHkC;AAKxC,eAAW,WAAW,wBAAwB,sBAAsB,GAAG;AACtE,WAAK,2BAA2B,OAAO;AAAA,IACxC;AACA,SAAK,UAAU,wBAAwB,qBAAqB,OAAM,MAAK,KAAK,2BAA2B,CAAC,CAAC,CAAC;AAAA,EAC3G;AAAA,EA5BD,OAekG;AAAA;AAAA;AAAA,EACjG,OAAO,KAAK;AAAA,EAcJ,2BAA2B,SAAiC;AAEnE,UAAM,gBAAgB,KAAK,sBAAsB,SAA4C,uBAAuB;AACpH,eAAW,SAAS,OAAO,KAAK,cAAc,WAAW,GAAG;AAE3D,YAAM,QAAQ,cAAc,YAAY,KAAK;AAC7C,UAAI,OAAO;AACV,gBAAQ,iBAAiB,OAAO,KAAK;AAAA,MACtC;AAAA,IACD;AAEA,SAAK,UAAU,KAAK,sBAAsB,yBAAyB,OAAM,MAAK;AAC7E,UAAI,EAAE,qBAAqB,6BAA6B,WAAW,GAAG;AACrE,gBAAQ,wBAAwB;AAChC,cAAM,SAAS,KAAK,sBAAsB,SAA4C,uBAAuB;AAC7G,mBAAW,SAAS,OAAO,KAAK,OAAO,WAAW,GAAG;AAEpD,gBAAM,QAAQ,OAAO,YAAY,KAAK;AACtC,cAAI,OAAO;AACV,oBAAQ,iBAAiB,OAAO,KAAK;AAAA,UACtC;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC,CAAC;AAAA,EACH;AACD;AAxCa,kCAAN;AAAA,EAIJ;AAAA,EACA;AAAA,GALU;AA0Cb,+BAA+B,gCAAgC,IAAI,iCAAiC,eAAe,aAAa;",
  "names": []
}
