import{AccessibleViewProviderId as p,AccessibleViewType as r,AccessibleContentProvider as C}from"../../../../../platform/accessibility/browser/accessibleView.js";import{AccessibilityVerbositySettingId as I}from"../../../accessibility/browser/accessibilityConfiguration.js";import{ITerminalService as d}from"../../../terminal/browser/terminal.js";import{TerminalChatController as c}from"./terminalChatController.js";import"../../../../../platform/accessibility/browser/accessibleViewRegistry.js";import"../../../../../platform/instantiation/common/instantiation.js";import{IMenuService as A,MenuItemAction as u}from"../../../../../platform/actions/common/actions.js";import{MENU_TERMINAL_CHAT_WIDGET_STATUS as v,TerminalChatContextKeys as y}from"./terminalChat.js";import"../../../../../base/common/actions.js";class R{priority=105;name="terminalInlineChat";type=r.View;when=y.focused;getProvider(t){const s=t.get(d),l=t.get(A),n=[],o=c.activeChatController?.scopedContextKeyService;if(o){const a=l.getMenuActions(v,o);for(const f of a)for(const i of f[1])i instanceof u&&n.push(i)}const e=s.activeInstance?.getContribution(c.ID)??void 0;if(!e?.lastResponseContent)return;const m=e.lastResponseContent;return new C(p.TerminalChat,{type:r.View},()=>m,()=>{e.focus()},I.InlineChat,void 0,n)}}export{R as TerminalInlineChatAccessibleView};
