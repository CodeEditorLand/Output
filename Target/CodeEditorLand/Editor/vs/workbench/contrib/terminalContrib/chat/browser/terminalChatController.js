var f=Object.defineProperty;var y=Object.getOwnPropertyDescriptor;var C=(c,l,t,e)=>{for(var i=e>1?void 0:e?y(l,t):l,n=c.length-1,o;n>=0;n--)(o=c[n])&&(i=(e?o(l,t,i):o(i))||i);return e&&i&&f(l,t,i),i},a=(c,l)=>(t,e)=>l(t,e,c);import{CancellationTokenSource as I}from"../../../../../base/common/cancellation.js";import{Emitter as W,Event as v}from"../../../../../base/common/event.js";import{Lazy as x}from"../../../../../base/common/lazy.js";import{Disposable as S,DisposableStore as w,MutableDisposable as K,toDisposable as b}from"../../../../../base/common/lifecycle.js";import{IContextKeyService as P}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as R}from"../../../../../platform/instantiation/common/instantiation.js";import{IChatCodeBlockContextProviderService as k,showChatView as q}from"../../../chat/browser/chat.js";import{IChatService as A}from"../../../chat/common/chatService.js";import{isDetachedTerminalInstance as B,ITerminalService as T}from"../../../terminal/browser/terminal.js";import{TerminalChatWidget as D}from"./terminalChatWidget.js";import{createCancelablePromise as E,DeferredPromise as O}from"../../../../../base/common/async.js";import{assertType as _}from"../../../../../base/common/types.js";import{IStorageService as H,StorageScope as g,StorageTarget as V}from"../../../../../platform/storage/common/storage.js";import{IViewsService as F}from"../../../../services/views/common/viewsService.js";import{ChatAgentLocation as L}from"../../../chat/common/chatAgents.js";import"../../../chat/common/chatModel.js";import{TerminalChatContextKeys as u}from"./terminalChat.js";var M=(s=>(s[s.None=0]="None",s[s.AcceptSession=1]="AcceptSession",s[s.CancelSession=2]="CancelSession",s[s.PauseSession=4]="PauseSession",s[s.CancelRequest=8]="CancelRequest",s[s.CancelInput=16]="CancelInput",s[s.AcceptInput=32]="AcceptInput",s[s.ReturnInput=64]="ReturnInput",s))(M||{});let r=class extends S{constructor(t,e,i,n,o,h,s,p){super();this._ctx=t;this._chatService=i;this._contextKeyService=n;this._instantiationService=o;this._storageService=h;this._terminalService=s;this._viewsService=p;this._requestActiveContextKey=u.requestActive.bindTo(this._contextKeyService),this._responseContainsCodeBlockContextKey=u.responseContainsCodeBlock.bindTo(this._contextKeyService),this._responseContainsMulitpleCodeBlocksContextKey=u.responseContainsMultipleCodeBlocks.bindTo(this._contextKeyService),this._register(e.registerProvider({getCodeBlockContext:d=>{if(!(!d||!this._terminalChatWidget?.hasValue||!this.hasFocus()))return{element:d,code:d.getValue(),codeBlockIndex:0,languageId:d.getModel().getLanguageId()}}},"terminal")),r._promptHistory=JSON.parse(this._storageService.get(r._storageKey,g.PROFILE,"[]")),this._historyUpdate=d=>{const m=r._promptHistory.indexOf(d);m>=0&&r._promptHistory.splice(m,1),r._promptHistory.unshift(d),this._historyOffset=-1,this._historyCandidate="",this._storageService.store(r._storageKey,JSON.stringify(r._promptHistory),g.PROFILE,V.USER)}}static ID="terminal.chat";static get(t){return t.getContribution(r.ID)}static activeChatController;static _storageKey="terminal-inline-chat-history";static _promptHistory=[];_terminalChatWidget;get terminalChatWidget(){return this._terminalChatWidget?.value}get chatWidget(){return this._terminalChatWidget?.value.inlineChatWidget?.chatWidget}_requestActiveContextKey;_responseContainsCodeBlockContextKey;_responseContainsMulitpleCodeBlocksContextKey;_messages=this._store.add(new W);_lastResponseContent;get lastResponseContent(){return this._lastResponseContent}onDidAcceptInput=v.filter(this._messages.event,t=>t===32,this._store);get onDidHide(){return this.terminalChatWidget?.onDidHide??v.None}_terminalAgentName="terminal";_model=this._register(new K);get scopedContextKeyService(){return this._terminalChatWidget?.value.inlineChatWidget.scopedContextKeyService??this._contextKeyService}_sessionCtor;_historyOffset=-1;_historyCandidate="";_historyUpdate;_currentRequestId;_activeRequestCts;xtermReady(t){this._terminalChatWidget=new x(()=>{const e=this._register(this._instantiationService.createInstance(D,this._ctx.instance.domElement,this._ctx.instance,t));if(this._register(e.focusTracker.onDidFocus(()=>{r.activeChatController=this,B(this._ctx.instance)||this._terminalService.setActiveInstance(this._ctx.instance)})),this._register(e.focusTracker.onDidBlur(()=>{r.activeChatController=void 0,this._ctx.instance.resetScrollbarVisibility()})),!this._ctx.instance.domElement)throw new Error("FindWidget expected terminal DOM to be initialized");return e})}async _createSession(){this._sessionCtor=E(async t=>{if(!this._model.value){this._model.value=this._chatService.startSession(L.Terminal,t);const e=this._model.value;if(e&&this._terminalChatWidget?.value.inlineChatWidget.setChatModel(e),!this._model.value)throw new Error("Failed to start chat session")}}),this._register(b(()=>this._sessionCtor?.cancel()))}_forcedPlaceholder=void 0;_updatePlaceholder(){const t=this._terminalChatWidget?.value.inlineChatWidget;t&&(t.placeholder=this._getPlaceholderText())}_getPlaceholderText(){return this._forcedPlaceholder??""}setPlaceholder(t){this._forcedPlaceholder=t,this._updatePlaceholder()}resetPlaceholder(){this._forcedPlaceholder=void 0,this._updatePlaceholder()}clear(){this.cancel(),this._model.clear(),this._responseContainsCodeBlockContextKey.reset(),this._requestActiveContextKey.reset(),this._terminalChatWidget?.value.hide(),this._terminalChatWidget?.value.setValue(void 0)}async acceptInput(t){_(this._terminalChatWidget),this._model.value||await this.reveal(),_(this._model.value),this._messages.fire(32);const e=this._terminalChatWidget.value.inlineChatWidget.value;if(!e)return;this._historyUpdate(e),this._activeRequestCts?.cancel(),this._activeRequestCts=new I;const i=new w;this._requestActiveContextKey.set(!0);let n="";const o=await this._terminalChatWidget.value.inlineChatWidget.chatWidget.acceptInput(e,t);this._currentRequestId=o?.requestId;const h=new O;try{return this._requestActiveContextKey.set(!0),o&&i.add(o.onDidChange(async()=>{if(n+=o.response.value,o.isCanceled){this._requestActiveContextKey.set(!1),h.complete(void 0);return}if(o.isComplete){this._requestActiveContextKey.set(!1),this._requestActiveContextKey.set(!1);const s=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(0),p=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(1);this._responseContainsCodeBlockContextKey.set(!!s),this._responseContainsMulitpleCodeBlocksContextKey.set(!!p),this._terminalChatWidget?.value.inlineChatWidget.updateToolbar(!0),h.complete(o)}})),await h.p,this._lastResponseContent=o?.response.getMarkdown(),o}catch{this._lastResponseContent=void 0;return}finally{i.dispose()}}updateInput(t,e=!0){const i=this._terminalChatWidget?.value.inlineChatWidget;i&&(i.value=t,e&&i.selectAll())}getInput(){return this._terminalChatWidget?.value.input()??""}focus(){this._terminalChatWidget?.value.focus()}hasFocus(){return this._terminalChatWidget?.rawValue?.hasFocus()??!1}populateHistory(t){if(!this._terminalChatWidget?.value)return;const e=r._promptHistory.length;if(e===0)return;this._historyOffset===-1&&(this._historyCandidate=this._terminalChatWidget.value.inlineChatWidget.value);const i=this._historyOffset+(t?1:-1);if(i>=e)return;let n;i<0?(n=this._historyCandidate,this._historyOffset=-1):(n=r._promptHistory[i],this._historyOffset=i),this._terminalChatWidget.value.inlineChatWidget.value=n,this._terminalChatWidget.value.inlineChatWidget.selectAll()}cancel(){this._sessionCtor?.cancel(),this._sessionCtor=void 0,this._activeRequestCts?.cancel(),this._requestActiveContextKey.set(!1);const t=this._terminalChatWidget?.value.inlineChatWidget.getChatModel();t?.sessionId&&this._chatService.cancelCurrentRequestForSession(t?.sessionId)}async acceptCommand(t){const e=await this.terminalChatWidget?.inlineChatWidget.getCodeBlockInfo(0);e&&this._terminalChatWidget?.value.acceptCommand(e.textEditorModel.getValue(),t)}async reveal(){await this._createSession(),this._terminalChatWidget?.value.reveal(),this._terminalChatWidget?.value.focus()}async viewInChat(){const t=await q(this._viewsService),e=this.terminalChatWidget?.inlineChatWidget.chatWidget.viewModel?.model.getRequests().find(n=>n.id===this._currentRequestId);if(!t||!e?.response)return;const i=[];for(const n of e.response.response.value)if(n.kind==="textEditGroup")for(const o of n.edits)i.push({kind:"textEdit",edits:o,uri:n.uri});else i.push(n);this._chatService.addCompleteRequest(t.viewModel.sessionId,`@${this._terminalAgentName} ${e.message.text}`,e.variableData,e.attempt,{message:i,result:e.response.result,followups:e.response.followups}),t.focusLastMessage(),this._terminalChatWidget?.rawValue?.hide()}};r=C([a(1,k),a(2,A),a(3,P),a(4,R),a(5,H),a(6,T),a(7,F)],r);export{r as TerminalChatController};
