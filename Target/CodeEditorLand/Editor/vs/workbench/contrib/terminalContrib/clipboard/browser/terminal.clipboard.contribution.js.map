{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminalContrib/clipboard/browser/terminal.clipboard.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal as RawXtermTerminal } from '@xterm/xterm';\nimport { Disposable, toDisposable, type IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IClipboardService } from '../../../../../platform/clipboard/common/clipboardService.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { IDetachedTerminalInstance, ITerminalConfigurationService, ITerminalContribution, ITerminalInstance, type IXtermTerminal } from '../../../terminal/browser/terminal.js';\nimport { registerTerminalContribution, type IDetachedCompatibleTerminalContributionContext, type ITerminalContributionContext } from '../../../terminal/browser/terminalExtensions.js';\nimport { shouldPasteTerminalText } from './terminalClipboard.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { BrowserFeatures } from '../../../../../base/browser/canIUse.js';\nimport { TerminalCapability, type ITerminalCommand } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { TerminalSettingId } from '../../../../../platform/terminal/common/terminal.js';\nimport { isLinux, isMacintosh } from '../../../../../base/common/platform.js';\nimport { INotificationService } from '../../../../../platform/notification/common/notification.js';\nimport { registerActiveInstanceAction, registerActiveXtermAction } from '../../../terminal/browser/terminalActions.js';\nimport { TerminalCommandId } from '../../../terminal/common/terminal.js';\nimport { localize2 } from '../../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { terminalStrings } from '../../../terminal/common/terminalStrings.js';\nimport { isString } from '../../../../../base/common/types.js';\n\n// #region Terminal Contributions\n\nexport class TerminalClipboardContribution extends Disposable implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.clipboard';\n\n\tstatic get(instance: ITerminalInstance | IDetachedTerminalInstance): TerminalClipboardContribution | null {\n\t\treturn instance.getContribution<TerminalClipboardContribution>(TerminalClipboardContribution.ID);\n\t}\n\n\tprivate _xterm: IXtermTerminal & { raw: RawXtermTerminal } | undefined;\n\n\tprivate _overrideCopySelection: boolean | undefined = undefined;\n\n\tprivate readonly _onWillPaste = this._register(new Emitter<string>());\n\treadonly onWillPaste = this._onWillPaste.event;\n\tprivate readonly _onDidPaste = this._register(new Emitter<string>());\n\treadonly onDidPaste = this._onDidPaste.event;\n\n\tconstructor(\n\t\tprivate readonly _ctx: ITerminalContributionContext | IDetachedCompatibleTerminalContributionContext,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ITerminalConfigurationService private readonly _terminalConfigurationService: ITerminalConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tthis._xterm = xterm;\n\t\t// TODO: This should be a different event on xterm, copying html should not share the requesting run command event\n\t\tthis._register(xterm.onDidRequestCopyAsHtml(e => this.copySelection(true, e.command)));\n\t\tthis._register(xterm.raw.onSelectionChange(async () => {\n\t\t\tif (this._configurationService.getValue(TerminalSettingId.CopyOnSelection)) {\n\t\t\t\tif (this._overrideCopySelection === false) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._ctx.instance.hasSelection()) {\n\t\t\t\t\tawait this.copySelection();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync copySelection(asHtml?: boolean, command?: ITerminalCommand): Promise<void> {\n\t\t// TODO: Confirm this is fine that it's no longer awaiting xterm promise\n\t\tthis._xterm?.copySelection(asHtml, command);\n\t}\n\n\t/**\n\t * Focuses and pastes the contents of the clipboard into the terminal instance.\n\t */\n\tasync paste(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText());\n\t}\n\n\t/**\n\t * Focuses and pastes the contents of the selection clipboard into the terminal instance.\n\t */\n\tasync pasteSelection(): Promise<void> {\n\t\tawait this._paste(await this._clipboardService.readText('selection'));\n\t}\n\n\tprivate async _paste(value: string): Promise<void> {\n\t\tif (!this._xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet currentText = value;\n\t\tconst shouldPasteText = await this._instantiationService.invokeFunction(shouldPasteTerminalText, currentText, this._xterm?.raw.modes.bracketedPasteMode);\n\t\tif (!shouldPasteText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof shouldPasteText === 'object') {\n\t\t\tcurrentText = shouldPasteText.modifiedText;\n\t\t}\n\n\t\tthis._ctx.instance.focus();\n\n\t\tthis._onWillPaste.fire(currentText);\n\t\tthis._xterm.raw.paste(currentText);\n\t\tthis._onDidPaste.fire(currentText);\n\t}\n\n\tasync handleMouseEvent(event: MouseEvent): Promise<{ handled: boolean } | void> {\n\t\tswitch (event.button) {\n\t\t\tcase 1: { // Middle click\n\t\t\t\tif (this._terminalConfigurationService.config.middleClickBehavior === 'paste') {\n\t\t\t\t\tthis.paste();\n\t\t\t\t\treturn { handled: true };\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: { // Right click\n\t\t\t\t// Ignore shift click as it forces the context menu\n\t\t\t\tif (event.shiftKey) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst rightClickBehavior = this._terminalConfigurationService.config.rightClickBehavior;\n\t\t\t\tif (rightClickBehavior !== 'copyPaste' && rightClickBehavior !== 'paste') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (rightClickBehavior === 'copyPaste' && this._ctx.instance.hasSelection()) {\n\t\t\t\t\tawait this.copySelection();\n\t\t\t\t\tthis._ctx.instance.clearSelection();\n\t\t\t\t} else {\n\t\t\t\t\tif (BrowserFeatures.clipboard.readText) {\n\t\t\t\t\t\tthis.paste();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._notificationService.info(`This browser doesn't support the clipboard.readText API needed to trigger a paste, try ${isMacintosh ? '\u2318' : 'Ctrl'}+V instead.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Clear selection after all click event bubbling is finished on Mac to prevent\n\t\t\t\t// right-click selecting a word which is seemed cannot be disabled. There is a\n\t\t\t\t// flicker when pasting but this appears to give the best experience if the\n\t\t\t\t// setting is enabled.\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tsetTimeout(() => this._ctx.instance.clearSelection(), 0);\n\t\t\t\t}\n\t\t\t\treturn { handled: true };\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Override the copy on selection feature with a custom value.\n\t * @param value Whether to enable copySelection.\n\t */\n\toverrideCopyOnSelection(value: boolean): IDisposable {\n\t\tif (this._overrideCopySelection !== undefined) {\n\t\t\tthrow new Error('Cannot set a copy on selection override multiple times');\n\t\t}\n\t\tthis._overrideCopySelection = value;\n\t\treturn toDisposable(() => this._overrideCopySelection = undefined);\n\t}\n}\n\nregisterTerminalContribution(TerminalClipboardContribution.ID, TerminalClipboardContribution, false);\n\n// #endregion\n\n// #region Actions\n\nconst terminalAvailableWhenClause = ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated);\n\n// TODO: Move these commands into this terminalContrib/\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.CopyLastCommand,\n\ttitle: localize2('workbench.action.terminal.copyLastCommand', \"Copy Last Command\"),\n\tprecondition: terminalAvailableWhenClause,\n\trun: async (instance, c, accessor) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\tif (!commands || commands.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = commands[commands.length - 1];\n\t\tif (!command.command) {\n\t\t\treturn;\n\t\t}\n\t\tawait clipboardService.writeText(command.command);\n\t}\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.CopyLastCommandOutput,\n\ttitle: localize2('workbench.action.terminal.copyLastCommandOutput', \"Copy Last Command Output\"),\n\tprecondition: terminalAvailableWhenClause,\n\trun: async (instance, c, accessor) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\tif (!commands || commands.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = commands[commands.length - 1];\n\t\tif (!command?.hasOutput()) {\n\t\t\treturn;\n\t\t}\n\t\tconst output = command.getOutput();\n\t\tif (isString(output)) {\n\t\t\tawait clipboardService.writeText(output);\n\t\t}\n\t}\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.CopyLastCommandAndLastCommandOutput,\n\ttitle: localize2('workbench.action.terminal.copyLastCommandAndOutput', \"Copy Last Command and Output\"),\n\tprecondition: terminalAvailableWhenClause,\n\trun: async (instance, c, accessor) => {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst commands = instance.capabilities.get(TerminalCapability.CommandDetection)?.commands;\n\t\tif (!commands || commands.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = commands[commands.length - 1];\n\t\tif (!command?.hasOutput()) {\n\t\t\treturn;\n\t\t}\n\t\tconst output = command.getOutput();\n\t\tif (isString(output)) {\n\t\t\tawait clipboardService.writeText(`${command.command !== '' ? command.command + '\\n' : ''}${output}`);\n\t\t}\n\t}\n});\n\n// Some commands depend on platform features\nif (BrowserFeatures.clipboard.writeText) {\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.CopySelection,\n\t\ttitle: localize2('workbench.action.terminal.copySelection', 'Copy Selection'),\n\t\t// TODO: Why is copy still showing up when text isn't selected?\n\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(terminalAvailableWhenClause, TerminalContextKeys.textSelected)),\n\t\tkeybinding: [{\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\tContextKeyExpr.and(TerminalContextKeys.textSelected, TerminalContextKeys.focus),\n\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t)\n\t\t}],\n\t\trun: (activeInstance) => activeInstance.copySelection()\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.CopyAndClearSelection,\n\t\ttitle: localize2('workbench.action.terminal.copyAndClearSelection', 'Copy and Clear Selection'),\n\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(terminalAvailableWhenClause, TerminalContextKeys.textSelected)),\n\t\tkeybinding: [{\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyC },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\tContextKeyExpr.and(TerminalContextKeys.textSelected, TerminalContextKeys.focus),\n\t\t\t\tTerminalContextKeys.textSelectedInFocused,\n\t\t\t)\n\t\t}],\n\t\trun: async (xterm) => {\n\t\t\tawait xterm.copySelection();\n\t\t\txterm.clearSelection();\n\t\t}\n\t});\n\n\tregisterActiveXtermAction({\n\t\tid: TerminalCommandId.CopySelectionAsHtml,\n\t\ttitle: localize2('workbench.action.terminal.copySelectionAsHtml', 'Copy Selection as HTML'),\n\t\tf1: true,\n\t\tcategory: terminalStrings.actionCategory,\n\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.textSelectedInFocused, ContextKeyExpr.and(terminalAvailableWhenClause, TerminalContextKeys.textSelected)),\n\t\trun: (xterm) => xterm.copySelection(true)\n\t});\n}\n\nif (BrowserFeatures.clipboard.readText) {\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.Paste,\n\t\ttitle: localize2('workbench.action.terminal.paste', 'Paste into Active Terminal'),\n\t\tprecondition: terminalAvailableWhenClause,\n\t\tkeybinding: [{\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KeyV, secondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV] },\n\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyV },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.focus\n\t\t}],\n\t\trun: (activeInstance) => TerminalClipboardContribution.get(activeInstance)?.paste()\n\t});\n}\n\nif (BrowserFeatures.clipboard.readText && isLinux) {\n\tregisterActiveInstanceAction({\n\t\tid: TerminalCommandId.PasteSelection,\n\t\ttitle: localize2('workbench.action.terminal.pasteSelection', 'Paste Selection into Active Terminal'),\n\t\tprecondition: terminalAvailableWhenClause,\n\t\tkeybinding: [{\n\t\t\tlinux: { primary: KeyMod.Shift | KeyCode.Insert },\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: TerminalContextKeys.focus\n\t\t}],\n\t\trun: (activeInstance) => TerminalClipboardContribution.get(activeInstance)?.pasteSelection()\n\t});\n}\n\n// #endregion\n"],
  "mappings": "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",
  "names": []
}
