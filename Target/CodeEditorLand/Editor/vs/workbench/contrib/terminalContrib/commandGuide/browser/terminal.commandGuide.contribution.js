var p=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var l=(m,a,e,t)=>{for(var i=t>1?void 0:t?C(a,e):a,r=m.length-1,o;r>=0;r--)(o=m[r])&&(i=(t?o(a,e,i):o(i))||i);return t&&i&&p(a,e,i),i},u=(m,a)=>(e,t)=>a(e,t,m);import{addDisposableListener as d}from"../../../../../base/browser/dom.js";import{combinedDisposable as g,Disposable as v,MutableDisposable as w,toDisposable as I}from"../../../../../base/common/lifecycle.js";import{localize as T}from"../../../../../nls.js";import{IConfigurationService as _}from"../../../../../platform/configuration/common/configuration.js";import{TerminalCapability as D}from"../../../../../platform/terminal/common/capabilities/capabilities.js";import{listInactiveSelectionBackground as c}from"../../../../../platform/theme/common/colorRegistry.js";import{registerColor as b,transparent as h}from"../../../../../platform/theme/common/colorUtils.js";import{PANEL_BORDER as f}from"../../../../common/theme.js";import"../../../terminal/browser/terminal.js";import{registerTerminalContribution as G}from"../../../terminal/browser/terminalExtensions.js";import{terminalCommandGuideConfigSection as S,TerminalCommandGuideSettingId as x}from"../common/terminalCommandGuideConfiguration.js";let n=class extends v{constructor(e,t){super();this._ctx=e;this._configurationService=t}static ID="terminal.commandGuide";static get(e){return e.getContribution(n.ID)}_xterm;_activeCommandGuide=this._register(new w);xtermOpen(e){this._xterm=e,this._refreshActivatedState(),this._register(this._configurationService.onDidChangeConfiguration(t=>{t.affectsConfiguration(x.ShowCommandGuide)&&this._refreshActivatedState()}))}_refreshActivatedState(){const e=this._xterm;if(!e)return;const t=this._configurationService.getValue(S).showCommandGuide;if(!!this._activeCommandGuide.value!==t)if(!t)this._activeCommandGuide.clear();else{const i=e.raw.element.querySelector(".xterm-screen"),r=e.raw.element.querySelector(".xterm-viewport");this._activeCommandGuide.value=g(d(i,"mousemove",o=>this._tryShowHighlight(i,e,o)),d(r,"mousemove",o=>this._tryShowHighlight(i,e,o)),d(e.raw.element,"mouseout",()=>e.markTracker.showCommandGuide(void 0)),e.raw.onData(()=>e.markTracker.showCommandGuide(void 0)),I(()=>e.markTracker.showCommandGuide(void 0)))}}_tryShowHighlight(e,t,i){const r=e.getBoundingClientRect();if(!r)return;const o=Math.floor((i.clientY-r.top)/(r.height/t.raw.rows)),s=this._ctx.instance.capabilities.get(D.CommandDetection)?.getCommandForLine(t.raw.buffer.active.viewportY+o);s&&"getOutput"in s?t.markTracker.showCommandGuide(s):t.markTracker.showCommandGuide(void 0)}};n=l([u(1,_)],n),G(n.ID,n,!1);const P=b("terminalCommandGuide.foreground",{dark:h(c,1),light:h(c,1),hcDark:f,hcLight:f},T("terminalCommandGuide.foreground","The foreground color of the terminal command guide that appears to the left of a command and its output on hover."));export{P as TERMINAL_COMMAND_GUIDE_COLOR};
