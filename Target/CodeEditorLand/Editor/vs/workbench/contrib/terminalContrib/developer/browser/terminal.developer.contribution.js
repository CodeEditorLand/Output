var B=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var S=(d,o,a,i)=>{for(var n=i>1?void 0:i?P(o,a):o,e=d.length-1,r;e>=0;e--)(r=d[e])&&(n=(i?r(o,a,n):r(n))||n);return i&&n&&B(o,a,n),n},I=(d,o)=>(a,i)=>o(a,i,d);import{Delayer as L}from"../../../../../base/common/async.js";import{VSBuffer as F}from"../../../../../base/common/buffer.js";import{Event as _}from"../../../../../base/common/event.js";import{Disposable as W,DisposableMap as X,DisposableStore as T,MutableDisposable as k,combinedDisposable as E,dispose as $}from"../../../../../base/common/lifecycle.js";import{URI as H}from"../../../../../base/common/uri.js";import{localize as D,localize2 as g}from"../../../../../nls.js";import{Categories as b}from"../../../../../platform/action/common/actionCommonCategories.js";import{IClipboardService as q}from"../../../../../platform/clipboard/common/clipboardService.js";import{ICommandService as z}from"../../../../../platform/commands/common/commands.js";import{IConfigurationService as O}from"../../../../../platform/configuration/common/configuration.js";import{ContextKeyExpr as U}from"../../../../../platform/contextkey/common/contextkey.js";import{IFileService as V}from"../../../../../platform/files/common/files.js";import{IOpenerService as K}from"../../../../../platform/opener/common/opener.js";import{IQuickInputService as j}from"../../../../../platform/quickinput/common/quickInput.js";import{TerminalCapability as w}from"../../../../../platform/terminal/common/capabilities/capabilities.js";import{ITerminalLogService as J,TerminalSettingId as M}from"../../../../../platform/terminal/common/terminal.js";import{IWorkspaceContextService as N}from"../../../../../platform/workspace/common/workspace.js";import{IStatusbarService as A,StatusbarAlignment as R}from"../../../../services/statusbar/browser/statusbar.js";import"../../../terminal/browser/terminal.js";import{registerTerminalAction as f}from"../../../terminal/browser/terminalActions.js";import{registerTerminalContribution as Q}from"../../../terminal/browser/terminalExtensions.js";import{TerminalContextKeys as G}from"../../../terminal/common/terminalContextKey.js";import{TerminalDeveloperCommandId as x}from"../common/terminal.developer.js";import"./media/developer.css";f({id:x.ShowTextureAtlas,title:g("workbench.action.terminal.showTextureAtlas","Show Terminal Texture Atlas"),category:b.Developer,precondition:U.or(G.isOpen),run:async(d,o)=>{const a=o.get(V),i=o.get(K),n=o.get(N),e=await d.service.activeInstance?.xterm?.textureAtlas;if(!e)return;const r=n.getWorkspace().folders[0].uri,s=H.joinPath(r,"textureAtlas.png"),l=document.createElement("canvas");l.width=e.width,l.height=e.height;const t=l.getContext("bitmaprenderer");if(!t)return;t.transferFromImageBitmap(e);const c=await new Promise(p=>l.toBlob(p));c&&(await a.writeFile(s,F.wrap(new Uint8Array(await c.arrayBuffer()))),i.open(s))}}),f({id:x.WriteDataToTerminal,title:g("workbench.action.terminal.writeDataToTerminal","Write Data to Terminal"),category:b.Developer,run:async(d,o)=>{const a=o.get(j),i=await d.service.getActiveOrCreateInstance();if(await d.service.revealActiveTerminal(),await i.processReady,!i.xterm)throw new Error("Cannot write data to terminal if xterm isn't initialized");const n=await a.input({value:"",placeHolder:"Enter data, use \\x to escape",prompt:D("workbench.action.terminal.writeDataToTerminal.prompt","Enter data to write directly to the terminal, bypassing the pty")});if(!n)return;let e=n.replace(/\\n/g,`
`).replace(/\\r/g,"\r");for(;;){const s=e.match(/\\x([0-9a-fA-F]{2})/);if(s===null||s.index===void 0||s.length<2)break;e=e.slice(0,s.index)+String.fromCharCode(parseInt(s[1],16))+e.slice(s.index+4)}i.xterm._writeText(e)}}),f({id:x.RecordSession,title:g("workbench.action.terminal.recordSession","Record Terminal Session"),category:b.Developer,run:async(d,o)=>{const a=o.get(q),i=o.get(z),n=o.get(A),e=new T,r=D("workbench.action.terminal.recordSession.recording","Recording terminal session..."),s={text:r,name:r,ariaLabel:r,showProgress:!0},l=n.addEntry(s,"recordSession",R.LEFT);e.add(l);const t=await d.service.createTerminal();return d.service.setActiveInstance(t),await d.service.revealActiveTerminal(),await Promise.all([t.processReady,t.focusWhenReady(!0)]),new Promise(c=>{const p=[],h=()=>{const m=JSON.stringify(p,null,2);a.writeText(m),e.dispose(),c()},v=e.add(new L(5e3));e.add(_.runAndSubscribe(t.onDimensionsChanged,()=>{p.push({type:"resize",cols:t.cols,rows:t.rows}),v.trigger(h)})),e.add(i.onWillExecuteCommand(m=>{p.push({type:"command",id:m.commandId}),v.trigger(h)})),e.add(t.onWillData(m=>{p.push({type:"output",data:m}),v.trigger(h)})),e.add(t.onDidSendText(m=>{p.push({type:"sendText",data:m}),v.trigger(h)})),e.add(t.xterm.raw.onData(m=>{p.push({type:"input",data:m}),v.trigger(h)}));let C=!1;e.add(_.runAndSubscribe(t.capabilities.onDidAddCapability,m=>{if(C)return;const y=t.capabilities.get(w.CommandDetection);y&&(e.add(y.promptInputModel.onDidChangeInput(Y=>{p.push({type:"promptInputChange",data:y.promptInputModel.getCombinedString()}),v.trigger(h)})),C=!0)}))})}}),f({id:x.RestartPtyHost,title:g("workbench.action.terminal.restartPtyHost","Restart Pty Host"),category:b.Developer,run:async(d,o)=>{const a=o.get(J),i=Array.from(d.instanceService.getRegisteredBackends()),n=i.filter(r=>!r.isResponsive),e=n.length>0?n:i;for(const r of e)a.warn(`Restarting pty host for authority "${r.remoteAuthority}"`),r.restartPtyHost()}});let u=class extends W{constructor(a,i,n){super();this._ctx=a;this._configurationService=i;this._statusbarService=n;this._register(this._configurationService.onDidChangeConfiguration(e=>{e.affectsConfiguration(M.DevMode)&&this._updateDevMode()}))}static ID="terminal.devMode";static get(a){return a.getContribution(u.ID)}_xterm;_activeDevModeDisposables=new k;_currentColor=0;_statusbarEntry;_statusbarEntryAccessor=this._register(new k);xtermReady(a){this._xterm=a,this._updateDevMode()}_updateDevMode(){const a=this._isEnabled();this._xterm?.raw.element?.classList.toggle("dev-mode",a);const i=this._ctx.instance.capabilities.get(w.CommandDetection);if(a)if(i){const n=new X,e=new T;this._activeDevModeDisposables.value=E(n,e,this._ctx.instance.onDidBlur(()=>this._updateDevMode()),this._ctx.instance.onDidFocus(()=>this._updateDevMode()),i.promptInputModel.onDidChangeInput(()=>this._updateDevMode()),i.onCommandFinished(r=>{const s=`color-${this._currentColor}`,l=[];if(n.set(r,E(...l)),r.promptStartMarker){const t=this._ctx.instance.xterm.raw?.registerDecoration({marker:r.promptStartMarker});t&&(l.push(t),e.add(t.onRender(c=>{c.textContent="A",c.classList.add("xterm-sequence-decoration","top","left",s)})))}if(r.marker){const t=this._ctx.instance.xterm.raw?.registerDecoration({marker:r.marker,x:r.startX});t&&(l.push(t),e.add(t.onRender(c=>{c.textContent="B",c.classList.add("xterm-sequence-decoration","top","right",s)})))}if(r.executedMarker){const t=this._ctx.instance.xterm.raw?.registerDecoration({marker:r.executedMarker,x:r.executedX});t&&(l.push(t),e.add(t.onRender(c=>{c.textContent="C",c.classList.add("xterm-sequence-decoration","bottom","left",s)})))}if(r.endMarker){const t=this._ctx.instance.xterm.raw?.registerDecoration({marker:r.endMarker});t&&(l.push(t),e.add(t.onRender(c=>{c.textContent="D",c.classList.add("xterm-sequence-decoration","bottom","right",s)})))}this._currentColor=(this._currentColor+1)%2}),i.onCommandInvalidated(r=>{for(const s of r){const l=n.get(s);l&&$(l),n.deleteAndDispose(s)}})),this._updatePromptInputStatusBar(i)}else this._activeDevModeDisposables.value=this._ctx.instance.capabilities.onDidAddCapabilityType(n=>{n===w.CommandDetection&&this._updateDevMode()});else this._activeDevModeDisposables.clear()}_isEnabled(){return this._configurationService.getValue(M.DevMode)||!1}_updatePromptInputStatusBar(a){const i=a.promptInputModel;if(i){const n=D("terminalDevMode","Terminal Dev Mode"),e=i.cursorIndex===-1;this._statusbarEntry={name:n,text:`$(${e?"loading~spin":"terminal"}) ${i.getCombinedString()}`,ariaLabel:n,tooltip:"The detected terminal prompt input",kind:"prominent"},this._statusbarEntryAccessor.value?this._statusbarEntryAccessor.value.update(this._statusbarEntry):this._statusbarEntryAccessor.value=this._statusbarService.addEntry(this._statusbarEntry,`terminal.promptInput.${this._ctx.instance.instanceId}`,R.LEFT),this._statusbarService.updateEntryVisibility(`terminal.promptInput.${this._ctx.instance.instanceId}`,this._ctx.instance.hasFocus)}}};u=S([I(1,O),I(2,A)],u),Q(u.ID,u);
