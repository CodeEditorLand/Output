{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminalContrib/history/browser/terminal.history.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from '../../../../../base/common/keyCodes.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { localize2 } from '../../../../../nls.js';\nimport { AccessibleViewProviderId } from '../../../../../platform/accessibility/browser/accessibleView.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr, IContextKeyService, type IContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { KeybindingWeight } from '../../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { TerminalCapability } from '../../../../../platform/terminal/common/capabilities/capabilities.js';\nimport { TerminalLocation } from '../../../../../platform/terminal/common/terminal.js';\nimport { accessibleViewCurrentProviderId, accessibleViewIsShown } from '../../../accessibility/browser/accessibilityConfiguration.js';\nimport type { ITerminalContribution, ITerminalInstance } from '../../../terminal/browser/terminal.js';\nimport { registerActiveInstanceAction, registerTerminalAction } from '../../../terminal/browser/terminalActions.js';\nimport { registerTerminalContribution, type ITerminalContributionContext } from '../../../terminal/browser/terminalExtensions.js';\nimport { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';\nimport { clearShellFileHistory, getCommandHistory, getDirectoryHistory } from '../common/history.js';\nimport { TerminalHistoryCommandId } from '../common/terminal.history.js';\nimport { showRunRecentQuickPick } from './terminalRunRecentQuickPick.js';\n\n// #region Terminal Contributions\n\nclass TerminalHistoryContribution extends Disposable implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.history';\n\n\tstatic get(instance: ITerminalInstance): TerminalHistoryContribution | null {\n\t\treturn instance.getContribution<TerminalHistoryContribution>(TerminalHistoryContribution.ID);\n\t}\n\n\tprivate _terminalInRunCommandPicker: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate readonly _ctx: ITerminalContributionContext,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._terminalInRunCommandPicker = TerminalContextKeys.inTerminalRunCommandPicker.bindTo(contextKeyService);\n\n\t\tthis._register(_ctx.instance.capabilities.onDidAddCapabilityType(e => {\n\t\t\tswitch (e) {\n\t\t\t\tcase TerminalCapability.CwdDetection: {\n\t\t\t\t\t_ctx.instance.capabilities.get(TerminalCapability.CwdDetection)?.onDidChangeCwd(e => {\n\t\t\t\t\t\tthis._instantiationService.invokeFunction(getDirectoryHistory)?.add(e, { remoteAuthority: _ctx.instance.remoteAuthority });\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase TerminalCapability.CommandDetection: {\n\t\t\t\t\t_ctx.instance.capabilities.get(TerminalCapability.CommandDetection)?.onCommandFinished(e => {\n\t\t\t\t\t\tif (e.command.trim().length > 0) {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(getCommandHistory)?.add(e.command, { shellType: _ctx.instance.shellType });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Triggers a quick pick that displays recent commands or cwds. Selecting one will\n\t * rerun it in the active terminal.\n\t */\n\tasync runRecent(type: 'command' | 'cwd', filterMode?: 'fuzzy' | 'contiguous', value?: string): Promise<void> {\n\t\treturn this._instantiationService.invokeFunction(showRunRecentQuickPick,\n\t\t\tthis._ctx.instance,\n\t\t\tthis._terminalInRunCommandPicker,\n\t\t\ttype,\n\t\t\tfilterMode,\n\t\t\tvalue,\n\t\t);\n\t}\n}\n\nregisterTerminalContribution(TerminalHistoryContribution.ID, TerminalHistoryContribution);\n\n// #endregion\n\n// #region Actions\n\nconst precondition = ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated);\n\nregisterTerminalAction({\n\tid: TerminalHistoryCommandId.ClearPreviousSessionHistory,\n\ttitle: localize2('workbench.action.terminal.clearPreviousSessionHistory', 'Clear Previous Session History'),\n\tprecondition,\n\trun: async (c, accessor) => {\n\t\tgetCommandHistory(accessor).clear();\n\t\tclearShellFileHistory();\n\t}\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalHistoryCommandId.GoToRecentDirectory,\n\ttitle: localize2('workbench.action.terminal.goToRecentDirectory', 'Go to Recent Directory...'),\n\tmetadata: {\n\t\tdescription: localize2('goToRecentDirectory.metadata', 'Goes to a recent folder'),\n\t},\n\tprecondition,\n\tkeybinding: {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\twhen: TerminalContextKeys.focus,\n\t\tweight: KeybindingWeight.WorkbenchContrib\n\t},\n\trun: async (activeInstance, c) => {\n\t\tconst history = TerminalHistoryContribution.get(activeInstance);\n\t\tif (!history) {\n\t\t\treturn;\n\t\t}\n\t\tawait history.runRecent('cwd');\n\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\tawait c.editorService.revealActiveEditor();\n\t\t} else {\n\t\t\tawait c.groupService.showPanel(false);\n\t\t}\n\t}\n});\n\nregisterActiveInstanceAction({\n\tid: TerminalHistoryCommandId.RunRecentCommand,\n\ttitle: localize2('workbench.action.terminal.runRecentCommand', 'Run Recent Command...'),\n\tprecondition,\n\tkeybinding: [\n\t\t{\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyR,\n\t\t\twhen: ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, ContextKeyExpr.or(TerminalContextKeys.focus, ContextKeyExpr.and(accessibleViewIsShown, accessibleViewCurrentProviderId.isEqualTo(AccessibleViewProviderId.Terminal)))),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t},\n\t\t{\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyR },\n\t\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t}\n\t],\n\trun: async (activeInstance, c) => {\n\t\tconst history = TerminalHistoryContribution.get(activeInstance);\n\t\tif (!history) {\n\t\t\treturn;\n\t\t}\n\t\tawait history.runRecent('command');\n\t\tif (activeInstance?.target === TerminalLocation.Editor) {\n\t\t\tawait c.editorService.revealActiveEditor();\n\t\t} else {\n\t\t\tawait c.groupService.showPanel(false);\n\t\t}\n\t}\n});\n\n// #endregion\n"],
  "mappings": "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",
  "names": ["e"]
}
