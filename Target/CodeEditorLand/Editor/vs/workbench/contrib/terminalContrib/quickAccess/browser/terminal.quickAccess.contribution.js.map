{
  "version": 3,
  "sources": ["../../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/terminalContrib/quickAccess/browser/terminal.quickAccess.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../../nls.js';\nimport { CommandsRegistry } from '../../../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { IQuickAccessRegistry, Extensions as QuickAccessExtensions } from '../../../../../platform/quickinput/common/quickAccess.js';\nimport { IQuickInputService } from '../../../../../platform/quickinput/common/quickInput.js';\nimport { Registry } from '../../../../../platform/registry/common/platform.js';\nimport { getQuickNavigateHandler } from '../../../../browser/quickaccess.js';\nimport { registerTerminalAction } from '../../../terminal/browser/terminalActions.js';\nimport { TerminalContextKeys } from '../../../terminal/common/terminalContextKey.js';\nimport { TerminalQuickAccessProvider } from '../../../terminalContrib/quickAccess/browser/terminalQuickAccess.js';\n\nconst enum TerminalQuickAccessCommandId {\n\tQuickOpenTerm = 'workbench.action.quickOpenTerm',\n}\n\nconst quickAccessRegistry = (Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess));\nconst inTerminalsPicker = 'inTerminalPicker';\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TerminalQuickAccessProvider,\n\tprefix: TerminalQuickAccessProvider.PREFIX,\n\tcontextKey: inTerminalsPicker,\n\tplaceholder: nls.localize('tasksQuickAccessPlaceholder', \"Type the name of a terminal to open.\"),\n\thelpEntries: [{ description: nls.localize('tasksQuickAccessHelp', \"Show All Opened Terminals\"), commandId: TerminalQuickAccessCommandId.QuickOpenTerm }]\n});\nconst quickAccessNavigateNextInTerminalPickerId = 'workbench.action.quickOpenNavigateNextInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigateNextInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigateNextInTerminalPickerId, true) });\nconst quickAccessNavigatePreviousInTerminalPickerId = 'workbench.action.quickOpenNavigatePreviousInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigatePreviousInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigatePreviousInTerminalPickerId, false) });\n\nregisterTerminalAction({\n\tid: TerminalQuickAccessCommandId.QuickOpenTerm,\n\ttitle: nls.localize2('quickAccessTerminal', 'Switch Active Terminal'),\n\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated),\n\trun: (c, accessor) => accessor.get(IQuickInputService).quickAccess.show(TerminalQuickAccessProvider.PREFIX)\n});\n"],
  "mappings": ";;AAKA,YAAY,SAAS;AACrB,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB,cAAc,6BAA6B;AAC1E,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB,SAAS,+BAA+B;AACxC,SAAS,8BAA8B;AACvC,SAAS,2BAA2B;AACpC,SAAS,mCAAmC;AAE5C,IAAW,+BAAX,kBAAWA,kCAAX;AACC,EAAAA,8BAAA,mBAAgB;AADN,SAAAA;AAAA,GAAA;AAIX,MAAM,sBAAuB,SAAS,GAAyB,sBAAsB,WAAW;AAChG,MAAM,oBAAoB;AAC1B,oBAAoB,4BAA4B;AAAA,EAC/C,MAAM;AAAA,EACN,QAAQ,4BAA4B;AAAA,EACpC,YAAY;AAAA,EACZ,aAAa,IAAI,SAAS,+BAA+B,sCAAsC;AAAA,EAC/F,aAAa,CAAC,EAAE,aAAa,IAAI,SAAS,wBAAwB,2BAA2B,GAAG,WAAW,qDAA2C,CAAC;AACxJ,CAAC;AACD,MAAM,4CAA4C;AAClD,iBAAiB,gBAAgB,EAAE,IAAI,2CAA2C,SAAS,wBAAwB,2CAA2C,IAAI,EAAE,CAAC;AACrK,MAAM,gDAAgD;AACtD,iBAAiB,gBAAgB,EAAE,IAAI,+CAA+C,SAAS,wBAAwB,+CAA+C,KAAK,EAAE,CAAC;AAE9K,uBAAuB;AAAA,EACtB,IAAI;AAAA,EACJ,OAAO,IAAI,UAAU,uBAAuB,wBAAwB;AAAA,EACpE,cAAc,eAAe,GAAG,oBAAoB,kBAAkB,oBAAoB,sBAAsB;AAAA,EAChH,KAAK,wBAAC,GAAG,aAAa,SAAS,IAAI,kBAAkB,EAAE,YAAY,KAAK,4BAA4B,MAAM,GAArG;AACN,CAAC;",
  "names": ["TerminalQuickAccessCommandId"]
}
