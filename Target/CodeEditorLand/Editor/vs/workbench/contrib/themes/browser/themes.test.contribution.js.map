{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/contrib/themes/browser/themes.test.contribution.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from '../../../../base/common/uri.js';\nimport type { Parser } from '@vscode/tree-sitter-wasm';\nimport { ILanguageService } from '../../../../editor/common/languages/language.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { IInstantiationService, ServicesAccessor } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IWorkbenchThemeService, IWorkbenchColorTheme } from '../../../services/themes/common/workbenchThemeService.js';\nimport { IEditorService } from '../../../services/editor/common/editorService.js';\nimport { EditorResourceAccessor } from '../../../common/editor.js';\nimport { ITextMateTokenizationService } from '../../../services/textMate/browser/textMateTokenizationFeature.js';\nimport type { IGrammar, StateStack } from 'vscode-textmate';\nimport { TokenizationRegistry, TreeSitterTokenizationRegistry } from '../../../../editor/common/languages.js';\nimport { TokenMetadata } from '../../../../editor/common/encodedTokenAttributes.js';\nimport { ThemeRule, findMatchingThemeRule } from '../../../services/textMate/common/TMHelper.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { basename } from '../../../../base/common/resources.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { splitLines } from '../../../../base/common/strings.js';\nimport { ITreeSitterParserService } from '../../../../editor/common/services/treeSitterParserService.js';\nimport { ColorThemeData, findMetadata } from '../../../services/themes/common/colorThemeData.js';\n\ninterface IToken {\n\tc: string; // token\n\tt: string; // space separated scopes, most general to most specific\n\tr: { [themeName: string]: string | undefined }; // token type: color\n}\n\ninterface IThemedToken {\n\ttext: string;\n\tcolor: Color | null;\n}\n\ninterface IThemesResult {\n\t[themeName: string]: {\n\t\tdocument: ThemeDocument;\n\t\ttokens: IThemedToken[];\n\t};\n}\n\nclass ThemeDocument {\n\tprivate readonly _theme: IWorkbenchColorTheme;\n\tprivate readonly _cache: { [scopes: string]: ThemeRule };\n\tprivate readonly _defaultColor: string;\n\n\tconstructor(theme: IWorkbenchColorTheme) {\n\t\tthis._theme = theme;\n\t\tthis._cache = Object.create(null);\n\t\tthis._defaultColor = '#000000';\n\t\tfor (let i = 0, len = this._theme.tokenColors.length; i < len; i++) {\n\t\t\tconst rule = this._theme.tokenColors[i];\n\t\t\tif (!rule.scope) {\n\t\t\t\tthis._defaultColor = rule.settings.foreground!;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _generateExplanation(selector: string, color: Color): string {\n\t\treturn `${selector}: ${Color.Format.CSS.formatHexA(color, true).toUpperCase()}`;\n\t}\n\n\tpublic explainTokenColor(scopes: string, color: Color): string {\n\n\t\tconst matchingRule = this._findMatchingThemeRule(scopes);\n\t\tif (!matchingRule) {\n\t\t\tconst expected = Color.fromHex(this._defaultColor);\n\t\t\t// No matching rule\n\t\t\tif (!color.equals(expected)) {\n\t\t\t\tthrow new Error(`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected default ${Color.Format.CSS.formatHexA(expected)}`);\n\t\t\t}\n\t\t\treturn this._generateExplanation('default', color);\n\t\t}\n\n\t\tconst expected = Color.fromHex(matchingRule.settings.foreground!);\n\t\tif (!color.equals(expected)) {\n\t\t\tthrow new Error(`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected ${Color.Format.CSS.formatHexA(expected)} coming in from ${matchingRule.rawSelector}`);\n\t\t}\n\t\treturn this._generateExplanation(matchingRule.rawSelector, color);\n\t}\n\n\tprivate _findMatchingThemeRule(scopes: string): ThemeRule {\n\t\tif (!this._cache[scopes]) {\n\t\t\tthis._cache[scopes] = findMatchingThemeRule(this._theme, scopes.split(' '))!;\n\t\t}\n\t\treturn this._cache[scopes];\n\t}\n}\n\nclass Snapper {\n\n\tconstructor(\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@ITextMateTokenizationService private readonly textMateService: ITextMateTokenizationService,\n\t\t@ITreeSitterParserService private readonly treeSitterParserService: ITreeSitterParserService,\n\t) {\n\t}\n\n\tprivate _themedTokenize(grammar: IGrammar, lines: string[]): IThemedToken[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tlet state: StateStack | null = null;\n\t\tconst result: IThemedToken[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst line = lines[i];\n\n\t\t\tconst tokenizationResult = grammar.tokenizeLine2(line, state);\n\n\t\t\tfor (let j = 0, lenJ = tokenizationResult.tokens.length >>> 1; j < lenJ; j++) {\n\t\t\t\tconst startOffset = tokenizationResult.tokens[(j << 1)];\n\t\t\t\tconst metadata = tokenizationResult.tokens[(j << 1) + 1];\n\t\t\t\tconst endOffset = j + 1 < lenJ ? tokenizationResult.tokens[((j + 1) << 1)] : line.length;\n\t\t\t\tconst tokenText = line.substring(startOffset, endOffset);\n\n\t\t\t\tconst color = TokenMetadata.getForeground(metadata);\n\n\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\ttext: tokenText,\n\t\t\t\t\tcolor: colorMap![color]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _themedTokenizeTreeSitter(tokens: IToken[], languageId: string): IThemedToken[] {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tconst result: IThemedToken[] = Array(tokens.length);\n\t\tconst colorThemeData = this.themeService.getColorTheme() as ColorThemeData;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tconst scopes = token.t.split(' ');\n\t\t\tconst metadata = findMetadata(colorThemeData, scopes, this.languageService.languageIdCodec.encodeLanguageId(languageId));\n\t\t\tconst color = TokenMetadata.getForeground(metadata);\n\n\t\t\tresult[i] = {\n\t\t\t\ttext: token.c,\n\t\t\t\tcolor: colorMap![color]\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _tokenize(grammar: IGrammar, lines: string[]): IToken[] {\n\t\tlet state: StateStack | null = null;\n\t\tconst result: IToken[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tconst line = lines[i];\n\n\t\t\tconst tokenizationResult = grammar.tokenizeLine(line, state);\n\t\t\tlet lastScopes: string | null = null;\n\n\t\t\tfor (let j = 0, lenJ = tokenizationResult.tokens.length; j < lenJ; j++) {\n\t\t\t\tconst token = tokenizationResult.tokens[j];\n\t\t\t\tconst tokenText = line.substring(token.startIndex, token.endIndex);\n\t\t\t\tconst tokenScopes = token.scopes.join(' ');\n\n\t\t\t\tif (lastScopes === tokenScopes) {\n\t\t\t\t\tresult[resultLen - 1].c += tokenText;\n\t\t\t\t} else {\n\t\t\t\t\tlastScopes = tokenScopes;\n\t\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\t\tc: tokenText,\n\t\t\t\t\t\tt: tokenScopes,\n\t\t\t\t\t\tr: {\n\t\t\t\t\t\t\tdark_plus: undefined,\n\t\t\t\t\t\t\tlight_plus: undefined,\n\t\t\t\t\t\t\tdark_vs: undefined,\n\t\t\t\t\t\t\tlight_vs: undefined,\n\t\t\t\t\t\t\thc_black: undefined,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _getThemesResult(grammar: IGrammar, lines: string[]): Promise<IThemesResult> {\n\t\tconst currentTheme = this.themeService.getColorTheme();\n\n\t\tconst getThemeName = (id: string) => {\n\t\t\tconst part = 'vscode-theme-defaults-themes-';\n\t\t\tconst startIdx = id.indexOf(part);\n\t\t\tif (startIdx !== -1) {\n\t\t\t\treturn id.substring(startIdx + part.length, id.length - 5);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst result: IThemesResult = {};\n\n\t\tconst themeDatas = await this.themeService.getColorThemes();\n\t\tconst defaultThemes = themeDatas.filter(themeData => !!getThemeName(themeData.id));\n\t\tfor (const defaultTheme of defaultThemes) {\n\t\t\tconst themeId = defaultTheme.id;\n\t\t\tconst success = await this.themeService.setColorTheme(themeId, undefined);\n\t\t\tif (success) {\n\t\t\t\tconst themeName = getThemeName(themeId);\n\t\t\t\tresult[themeName!] = {\n\t\t\t\t\tdocument: new ThemeDocument(this.themeService.getColorTheme()),\n\t\t\t\t\ttokens: this._themedTokenize(grammar, lines)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tawait this.themeService.setColorTheme(currentTheme.id, undefined);\n\t\treturn result;\n\t}\n\n\tprivate async _getTreeSitterThemesResult(tokens: IToken[], languageId: string): Promise<IThemesResult> {\n\t\tconst currentTheme = this.themeService.getColorTheme();\n\n\t\tconst getThemeName = (id: string) => {\n\t\t\tconst part = 'vscode-theme-defaults-themes-';\n\t\t\tconst startIdx = id.indexOf(part);\n\t\t\tif (startIdx !== -1) {\n\t\t\t\treturn id.substring(startIdx + part.length, id.length - 5);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tconst result: IThemesResult = {};\n\n\t\tconst themeDatas = await this.themeService.getColorThemes();\n\t\tconst defaultThemes = themeDatas.filter(themeData => !!getThemeName(themeData.id));\n\t\tfor (const defaultTheme of defaultThemes) {\n\t\t\tconst themeId = defaultTheme.id;\n\t\t\tconst success = await this.themeService.setColorTheme(themeId, undefined);\n\t\t\tif (success) {\n\t\t\t\tconst themeName = getThemeName(themeId);\n\t\t\t\tresult[themeName!] = {\n\t\t\t\t\tdocument: new ThemeDocument(this.themeService.getColorTheme()),\n\t\t\t\t\ttokens: this._themedTokenizeTreeSitter(tokens, languageId)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tawait this.themeService.setColorTheme(currentTheme.id, undefined);\n\t\treturn result;\n\t}\n\n\n\tprivate _enrichResult(result: IToken[], themesResult: IThemesResult): void {\n\t\tconst index: { [themeName: string]: number } = {};\n\t\tconst themeNames = Object.keys(themesResult);\n\t\tfor (const themeName of themeNames) {\n\t\t\tindex[themeName] = 0;\n\t\t}\n\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tconst token = result[i];\n\n\t\t\tfor (const themeName of themeNames) {\n\t\t\t\tconst themedToken = themesResult[themeName].tokens[index[themeName]];\n\n\t\t\t\tthemedToken.text = themedToken.text.substr(token.c.length);\n\t\t\t\tif (themedToken.color) {\n\t\t\t\t\ttoken.r[themeName] = themesResult[themeName].document.explainTokenColor(token.t, themedToken.color);\n\t\t\t\t}\n\t\t\t\tif (themedToken.text.length === 0) {\n\t\t\t\t\tindex[themeName]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _treeSitterTokenize(tree: Parser.Tree, languageId: string): IToken[] {\n\t\tconst cursor = tree.walk();\n\t\tcursor.gotoFirstChild();\n\t\tlet cursorResult: boolean = true;\n\t\tconst tokens: IToken[] = [];\n\t\tconst tokenizationSupport = TreeSitterTokenizationRegistry.get(languageId);\n\n\t\tdo {\n\t\t\tif (cursor.currentNode.childCount === 0) {\n\t\t\t\tconst capture = tokenizationSupport?.captureAtPositionTree(cursor.currentNode.startPosition.row + 1, cursor.currentNode.startPosition.column + 1, tree);\n\n\t\t\t\ttokens.push({\n\t\t\t\t\tc: cursor.currentNode.text.replace(/\\r\\n/g, '\\n'),\n\t\t\t\t\tt: capture?.map(cap => cap.name).join(' ') ?? '',\n\t\t\t\t\tr: {\n\t\t\t\t\t\tdark_plus: undefined,\n\t\t\t\t\t\tlight_plus: undefined,\n\t\t\t\t\t\tdark_vs: undefined,\n\t\t\t\t\t\tlight_vs: undefined,\n\t\t\t\t\t\thc_black: undefined,\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\twhile (!(cursorResult = cursor.gotoNextSibling())) {\n\t\t\t\t\tif (!(cursorResult = cursor.gotoParent())) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcursorResult = cursor.gotoFirstChild();\n\t\t\t}\n\t\t} while (cursorResult);\n\t\treturn tokens;\n\t}\n\n\tpublic captureSyntaxTokens(fileName: string, content: string): Promise<IToken[]> {\n\t\tconst languageId = this.languageService.guessLanguageIdByFilepathOrFirstLine(URI.file(fileName));\n\t\treturn this.textMateService.createTokenizer(languageId!).then((grammar) => {\n\t\t\tif (!grammar) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst lines = splitLines(content);\n\n\t\t\tconst result = this._tokenize(grammar, lines);\n\t\t\treturn this._getThemesResult(grammar, lines).then((themesResult) => {\n\t\t\t\tthis._enrichResult(result, themesResult);\n\t\t\t\treturn result.filter(t => t.c.length > 0);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async captureTreeSitterSyntaxTokens(fileName: string, content: string): Promise<IToken[]> {\n\t\tconst languageId = this.languageService.guessLanguageIdByFilepathOrFirstLine(URI.file(fileName));\n\t\tif (languageId) {\n\t\t\tconst tree = await this.treeSitterParserService.getTree(content, languageId!);\n\t\t\tif (!tree) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst result = (await this._treeSitterTokenize(tree, languageId)).filter(t => t.c.length > 0);\n\t\t\tconst themeTokens = await this._getTreeSitterThemesResult(result, languageId);\n\t\t\tthis._enrichResult(result, themeTokens);\n\t\t\treturn result;\n\t\t}\n\t\treturn [];\n\t}\n}\n\nasync function captureTokens(accessor: ServicesAccessor, resource: URI | undefined, treeSitter: boolean = false) {\n\tconst process = (resource: URI) => {\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst fileName = basename(resource);\n\t\tconst snapper = accessor.get(IInstantiationService).createInstance(Snapper);\n\n\t\treturn fileService.readFile(resource).then(content => {\n\t\t\tif (treeSitter) {\n\t\t\t\treturn snapper.captureTreeSitterSyntaxTokens(fileName, content.value.toString());\n\t\t\t} else {\n\t\t\t\treturn snapper.captureSyntaxTokens(fileName, content.value.toString());\n\t\t\t}\n\t\t});\n\t};\n\n\tif (!resource) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst file = editorService.activeEditor ? EditorResourceAccessor.getCanonicalUri(editorService.activeEditor, { filterByScheme: Schemas.file }) : null;\n\t\tif (file) {\n\t\t\tprocess(file).then(result => {\n\t\t\t\tconsole.log(result);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('No file editor active');\n\t\t}\n\t} else {\n\t\tconst processResult = await process(resource);\n\t\treturn processResult;\n\t}\n\treturn undefined;\n\n}\n\nCommandsRegistry.registerCommand('_workbench.captureSyntaxTokens', function (accessor: ServicesAccessor, resource: URI) {\n\treturn captureTokens(accessor, resource);\n});\n\nCommandsRegistry.registerCommand('_workbench.captureTreeSitterSyntaxTokens', function (accessor: ServicesAccessor, resource: URI) {\n\treturn captureTokens(accessor, resource, true);\n});\n"],
  "mappings": "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",
  "names": ["expected", "resource"]
}
