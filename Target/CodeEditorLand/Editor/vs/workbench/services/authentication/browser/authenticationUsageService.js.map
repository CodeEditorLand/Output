{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/services/authentication/browser/authenticationUsageService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Queue } from '../../../../base/common/async.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\nimport { IAuthenticationService } from '../common/authentication.js';\n\nexport interface IAccountUsage {\n\textensionId: string;\n\textensionName: string;\n\tlastUsed: number;\n\tscopes?: string[];\n}\n\nexport const IAuthenticationUsageService = createDecorator<IAuthenticationUsageService>('IAuthenticationUsageService');\nexport interface IAuthenticationUsageService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Initializes the cache of extensions that use authentication. Ideally used in a contribution that can be run eventually after the workspace is loaded.\n\t */\n\tinitializeExtensionUsageCache(): Promise<void>;\n\t/**\n\t * Checks if an extension uses authentication\n\t * @param extensionId The id of the extension to check\n\t */\n\textensionUsesAuth(extensionId: string): Promise<boolean>;\n\t/**\n\t * Reads the usages for an account\n\t * @param providerId The id of the authentication provider to get usages for\n\t * @param accountName The name of the account to get usages for\n\t */\n\treadAccountUsages(providerId: string, accountName: string,): IAccountUsage[];\n\t/**\n\t *\n\t * @param providerId The id of the authentication provider to get usages for\n\t * @param accountName The name of the account to get usages for\n\t */\n\tremoveAccountUsage(providerId: string, accountName: string): void;\n\t/**\n\t * Adds a usage for an account\n\t * @param providerId The id of the authentication provider to get usages for\n\t * @param accountName The name of the account to get usages for\n\t * @param extensionId The id of the extension to add a usage for\n\t * @param extensionName The name of the extension to add a usage for\n\t */\n\taddAccountUsage(providerId: string, accountName: string, scopes: ReadonlyArray<string>, extensionId: string, extensionName: string): void;\n}\n\nexport class AuthenticationUsageService extends Disposable implements IAuthenticationUsageService {\n\t_serviceBrand: undefined;\n\n\tprivate _queue = new Queue();\n\tprivate _extensionsUsingAuth = new Set<string>();\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IAuthenticationService private readonly _authenticationService: IAuthenticationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\t// If an extension is listed in `trustedExtensionAuthAccess` we should consider it as using auth\n\t\tconst trustedExtensionAuthAccess = productService.trustedExtensionAuthAccess;\n\t\tif (Array.isArray(trustedExtensionAuthAccess)) {\n\t\t\tfor (const extensionId of trustedExtensionAuthAccess) {\n\t\t\t\tthis._extensionsUsingAuth.add(extensionId);\n\t\t\t}\n\t\t} else if (trustedExtensionAuthAccess) {\n\t\t\tfor (const extensions of Object.values(trustedExtensionAuthAccess)) {\n\t\t\t\tfor (const extensionId of extensions) {\n\t\t\t\t\tthis._extensionsUsingAuth.add(extensionId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._authenticationService.onDidRegisterAuthenticationProvider(\n\t\t\tprovider => this._queue.queue(\n\t\t\t\t() => this._addExtensionsToCache(provider.id)\n\t\t\t)\n\t\t);\n\t}\n\n\tasync initializeExtensionUsageCache(): Promise<void> {\n\t\tawait this._queue.queue(() => Promise.all(this._authenticationService.getProviderIds().map(providerId => this._addExtensionsToCache(providerId))));\n\t}\n\n\tasync extensionUsesAuth(extensionId: string): Promise<boolean> {\n\t\tawait this._queue.whenIdle();\n\t\treturn this._extensionsUsingAuth.has(extensionId);\n\t}\n\n\treadAccountUsages(providerId: string, accountName: string): IAccountUsage[] {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst storedUsages = this._storageService.get(accountKey, StorageScope.APPLICATION);\n\t\tlet usages: IAccountUsage[] = [];\n\t\tif (storedUsages) {\n\t\t\ttry {\n\t\t\t\tusages = JSON.parse(storedUsages);\n\t\t\t} catch (e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn usages;\n\t}\n\n\tremoveAccountUsage(providerId: string, accountName: string): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tthis._storageService.remove(accountKey, StorageScope.APPLICATION);\n\t}\n\n\taddAccountUsage(providerId: string, accountName: string, scopes: string[], extensionId: string, extensionName: string): void {\n\t\tconst accountKey = `${providerId}-${accountName}-usages`;\n\t\tconst usages = this.readAccountUsages(providerId, accountName);\n\n\t\tconst existingUsageIndex = usages.findIndex(usage => usage.extensionId === extensionId);\n\t\tif (existingUsageIndex > -1) {\n\t\t\tusages.splice(existingUsageIndex, 1, {\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tscopes,\n\t\t\t\tlastUsed: Date.now()\n\t\t\t});\n\t\t} else {\n\t\t\tusages.push({\n\t\t\t\textensionId,\n\t\t\t\textensionName,\n\t\t\t\tscopes,\n\t\t\t\tlastUsed: Date.now()\n\t\t\t});\n\t\t}\n\n\t\tthis._storageService.store(accountKey, JSON.stringify(usages), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis._extensionsUsingAuth.add(extensionId);\n\t}\n\n\tprivate async _addExtensionsToCache(providerId: string) {\n\t\ttry {\n\t\t\tconst accounts = await this._authenticationService.getAccounts(providerId);\n\t\t\tfor (const account of accounts) {\n\t\t\t\tconst usage = this.readAccountUsages(providerId, account.label);\n\t\t\t\tfor (const u of usage) {\n\t\t\t\t\tthis._extensionsUsingAuth.add(u.extensionId);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logService.error(e);\n\t\t}\n\t}\n}\n\nregisterSingleton(IAuthenticationUsageService, AuthenticationUsageService, InstantiationType.Delayed);\n"],
  "mappings": "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",
  "names": []
}
