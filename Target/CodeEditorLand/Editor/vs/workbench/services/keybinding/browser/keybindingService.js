var V=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var z=(l,c,i,e)=>{for(var t=e>1?void 0:e?Q(c,i):c,r=l.length-1,n;r>=0;r--)(n=l[r])&&(t=(e?n(c,i,t):n(t))||t);return e&&t&&V(c,i,t),t},g=(l,c)=>(i,e)=>c(i,e,l);import*as a from"../../../../nls.js";import*as E from"../../../../base/browser/browser.js";import{BrowserFeatures as x,KeyboardSupport as M}from"../../../../base/browser/canIUse.js";import*as S from"../../../../base/browser/dom.js";import{printKeyboardEvent as X,printStandardKeyboardEvent as Z,StandardKeyboardEvent as $}from"../../../../base/browser/keyboardEvent.js";import{DeferredPromise as ee,RunOnceScheduler as ie}from"../../../../base/common/async.js";import{Emitter as ne,Event as J}from"../../../../base/common/event.js";import{parse as te}from"../../../../base/common/json.js";import"../../../../base/common/jsonSchema.js";import{UserSettingsLabelProvider as re}from"../../../../base/common/keybindingLabels.js";import{KeybindingParser as H}from"../../../../base/common/keybindingParser.js";import{KeyCodeChord as N,ScanCodeChord as T}from"../../../../base/common/keybindings.js";import{IMMUTABLE_CODE_TO_KEY_CODE as q,KeyCode as u,KeyCodeUtils as se,KeyMod as h,ScanCode as o,ScanCodeUtils as F}from"../../../../base/common/keyCodes.js";import{Disposable as oe,DisposableStore as j}from"../../../../base/common/lifecycle.js";import*as ae from"../../../../base/common/objects.js";import{isMacintosh as de,OperatingSystem as L,OS as w}from"../../../../base/common/platform.js";import{dirname as le}from"../../../../base/common/resources.js";import{mainWindow as D}from"../../../../base/browser/window.js";import{MenuRegistry as P}from"../../../../platform/actions/common/actions.js";import{CommandsRegistry as ce,ICommandService as me}from"../../../../platform/commands/common/commands.js";import{ContextKeyExpr as O,IContextKeyService as ue}from"../../../../platform/contextkey/common/contextkey.js";import"../../../../platform/extensions/common/extensions.js";import{FileOperation as ge,IFileService as ye}from"../../../../platform/files/common/files.js";import{InstantiationType as pe,registerSingleton as he}from"../../../../platform/instantiation/common/extensions.js";import{Extensions as be}from"../../../../platform/jsonschemas/common/jsonContributionRegistry.js";import{AbstractKeybindingService as fe}from"../../../../platform/keybinding/common/abstractKeybindingService.js";import{IKeybindingService as ve}from"../../../../platform/keybinding/common/keybinding.js";import{KeybindingResolver as Ke}from"../../../../platform/keybinding/common/keybindingResolver.js";import{KeybindingsRegistry as A,KeybindingWeight as B}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{ResolvedKeybindingItem as R}from"../../../../platform/keybinding/common/resolvedKeybindingItem.js";import{IKeyboardLayoutService as Ce}from"../../../../platform/keyboardLayout/common/keyboardLayout.js";import"../../../../platform/keyboardLayout/common/keyboardMapper.js";import{ILogService as Se}from"../../../../platform/log/common/log.js";import{INotificationService as ke}from"../../../../platform/notification/common/notification.js";import{Registry as Ie}from"../../../../platform/registry/common/platform.js";import{ITelemetryService as _e}from"../../../../platform/telemetry/common/telemetry.js";import{IUriIdentityService as we}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{isLocalizedString as De}from"../../../../platform/action/common/action.js";import{commandsExtensionPoint as Re}from"../../actions/common/menusExtensionPoint.js";import{IExtensionService as Ee}from"../../extensions/common/extensions.js";import{ExtensionsRegistry as xe}from"../../extensions/common/extensionsRegistry.js";import{IHostService as Me}from"../../host/browser/host.js";import"./navigatorKeyboard.js";import{getAllUnboundCommands as Ne}from"./unboundCommands.js";import{KeybindingIO as G,OutputBuilder as Le}from"../common/keybindingIO.js";import{IUserDataProfileService as Pe}from"../../userDataProfile/common/userDataProfile.js";function Oe(l,c){return l?typeof l.command!="string"?(c.push(a.localize("requirestring","property `{0}` is mandatory and must be of type `string`","command")),!1):l.key&&typeof l.key!="string"?(c.push(a.localize("optstring","property `{0}` can be omitted or must be of type `string`","key")),!1):l.when&&typeof l.when!="string"?(c.push(a.localize("optstring","property `{0}` can be omitted or must be of type `string`","when")),!1):l.mac&&typeof l.mac!="string"?(c.push(a.localize("optstring","property `{0}` can be omitted or must be of type `string`","mac")),!1):l.linux&&typeof l.linux!="string"?(c.push(a.localize("optstring","property `{0}` can be omitted or must be of type `string`","linux")),!1):l.win&&typeof l.win!="string"?(c.push(a.localize("optstring","property `{0}` can be omitted or must be of type `string`","win")),!1):!0:(c.push(a.localize("nonempty","expected non-empty value.")),!1)}const W={type:"object",default:{command:"",key:""},properties:{command:{description:a.localize("vscode.extension.contributes.keybindings.command","Identifier of the command to run when keybinding is triggered."),type:"string"},args:{description:a.localize("vscode.extension.contributes.keybindings.args","Arguments to pass to the command to execute.")},key:{description:a.localize("vscode.extension.contributes.keybindings.key","Key or key sequence (separate keys with plus-sign and sequences with space, e.g. Ctrl+O and Ctrl+L L for a chord)."),type:"string"},mac:{description:a.localize("vscode.extension.contributes.keybindings.mac","Mac specific key or key sequence."),type:"string"},linux:{description:a.localize("vscode.extension.contributes.keybindings.linux","Linux specific key or key sequence."),type:"string"},win:{description:a.localize("vscode.extension.contributes.keybindings.win","Windows specific key or key sequence."),type:"string"},when:{description:a.localize("vscode.extension.contributes.keybindings.when","Condition when the key is active."),type:"string"}}},Y=xe.registerExtensionPoint({extensionPoint:"keybindings",deps:[Re],jsonSchema:{description:a.localize("vscode.extension.contributes.keybindings","Contributes keybindings."),oneOf:[W,{type:"array",items:W}]}}),Ae=[o.NumpadDivide,o.NumpadMultiply,o.NumpadSubtract,o.NumpadAdd,o.Numpad1,o.Numpad2,o.Numpad3,o.Numpad4,o.Numpad5,o.Numpad6,o.Numpad7,o.Numpad8,o.Numpad9,o.Numpad0,o.NumpadDecimal],p=new Map;p.set(o.Numpad1,u.Digit1),p.set(o.Numpad2,u.Digit2),p.set(o.Numpad3,u.Digit3),p.set(o.Numpad4,u.Digit4),p.set(o.Numpad5,u.Digit5),p.set(o.Numpad6,u.Digit6),p.set(o.Numpad7,u.Digit7),p.set(o.Numpad8,u.Digit8),p.set(o.Numpad9,u.Digit9),p.set(o.Numpad0,u.Digit0);let v=class extends fe{constructor(i,e,t,r,n,d,s,m,b,f,U){super(i,e,t,r,f);this.hostService=d;this.keyboardLayoutService=U;this.isComposingGlobalContextKey=i.createKey("isComposing",!1),this.kbsJsonSchema=new k,this.updateKeybindingsJsonSchema(),this._keyboardMapper=this.keyboardLayoutService.getKeyboardMapper(),this._register(this.keyboardLayoutService.onDidChangeKeyboardLayout(()=>{this._keyboardMapper=this.keyboardLayoutService.getKeyboardMapper(),this.updateResolver()})),this._keybindingHoldMode=null,this._cachedResolver=null,this.userKeybindings=this._register(new Ue(n,b,m,f)),this.userKeybindings.initialize().then(()=>{this.userKeybindings.keybindings.length&&this.updateResolver()}),this._register(this.userKeybindings.onDidChange(()=>{f.debug("User keybindings changed"),this.updateResolver()})),Y.setHandler(K=>{const y=[];for(const C of K)this._handleKeybindingsExtensionPointUser(C.description.identifier,C.description.isBuiltin,C.value,C.collector,y);A.setExtensionKeybindings(y),this.updateResolver()}),this.updateKeybindingsJsonSchema(),this._register(s.onDidRegisterExtensions(()=>this.updateKeybindingsJsonSchema())),this._register(J.runAndSubscribe(S.onDidRegisterWindow,({window:K,disposables:y})=>y.add(this._registerKeyListeners(K)),{window:D,disposables:this._store})),this._register(E.onDidChangeFullscreen(K=>{if(K!==D.vscodeWindowId)return;const y=navigator.keyboard;x.keyboard!==M.None&&(E.isFullscreen(D)?y?.lock(["Escape"]):y?.unlock(),this._cachedResolver=null,this._onDidUpdateKeybindings.fire())}))}_keyboardMapper;_cachedResolver;userKeybindings;isComposingGlobalContextKey;_keybindingHoldMode;_contributions=[];kbsJsonSchema;_registerKeyListeners(i){const e=new j;return e.add(S.addDisposableListener(i,S.EventType.KEY_DOWN,t=>{if(this._keybindingHoldMode)return;this.isComposingGlobalContextKey.set(t.isComposing);const r=new $(t);this._log(`/ Received  keydown event - ${X(t)}`),this._log(`| Converted keydown event - ${Z(r)}`),this._dispatch(r,r.target)&&r.preventDefault(),this.isComposingGlobalContextKey.set(!1)})),e.add(S.addDisposableListener(i,S.EventType.KEY_UP,t=>{this._resetKeybindingHoldMode(),this.isComposingGlobalContextKey.set(t.isComposing);const r=new $(t);this._singleModifierDispatch(r,r.target)&&r.preventDefault(),this.isComposingGlobalContextKey.set(!1)})),e}registerSchemaContribution(i){this._contributions.push(i),i.onDidChange&&this._register(i.onDidChange(()=>this.updateKeybindingsJsonSchema())),this.updateKeybindingsJsonSchema()}updateKeybindingsJsonSchema(){this.kbsJsonSchema.updateSchema(this._contributions.flatMap(i=>i.getSchemaAdditions()))}_printKeybinding(i){return re.toLabel(w,i.chords,e=>e instanceof N?se.toString(e.keyCode):F.toString(e.scanCode))||"[null]"}_printResolvedKeybinding(i){return i.getDispatchChords().map(e=>e||"[null]").join(" ")}_printResolvedKeybindings(i,e,t){const n=`${e.padStart(35," ")} => `;if(t.length===0){i.push(`${n}${"[NO BINDING]".padStart(35," ")}`);return}const d=n.length,s=!0;for(const m of t)s?i.push(`${n}${this._printResolvedKeybinding(m).padStart(35," ")}`):i.push(`${" ".repeat(d)}${this._printResolvedKeybinding(m).padStart(35," ")}`)}_dumpResolveKeybindingDebugInfo(){const i=new Set,e=[];e.push("Default Resolved Keybindings (unique only):");for(const t of A.getDefaultKeybindings()){if(!t.keybinding)continue;const r=this._printKeybinding(t.keybinding);if(i.has(r))continue;i.add(r);const n=this._keyboardMapper.resolveKeybinding(t.keybinding);this._printResolvedKeybindings(e,r,n)}e.push("User Resolved Keybindings (unique only):");for(const t of this.userKeybindings.keybindings){if(!t.keybinding)continue;const r=t._sourceKey??"Impossible: missing source key, but has keybinding";if(i.has(r))continue;i.add(r);const n=this._keyboardMapper.resolveKeybinding(t.keybinding);this._printResolvedKeybindings(e,r,n)}return e.join(`
`)}_dumpDebugInfo(){const i=JSON.stringify(this.keyboardLayoutService.getCurrentKeyboardLayout(),null,"	"),e=this._keyboardMapper.dumpDebugInfo(),t=this._dumpResolveKeybindingDebugInfo(),r=JSON.stringify(this.keyboardLayoutService.getRawKeyboardMapping(),null,"	");return`Layout info:
${i}

${t}

${e}

Raw mapping:
${r}`}_dumpDebugInfoJSON(){const i={layout:this.keyboardLayoutService.getCurrentKeyboardLayout(),rawMapping:this.keyboardLayoutService.getRawKeyboardMapping()};return JSON.stringify(i,null,"	")}enableKeybindingHoldMode(i){if(this._currentlyDispatchingCommandId!==i)return;this._keybindingHoldMode=new ee;const e=S.trackFocus(S.getWindow(void 0)),t=e.onDidBlur(()=>this._resetKeybindingHoldMode());return this._keybindingHoldMode.p.finally(()=>{t.dispose(),e.dispose()}),this._log(`+ Enabled hold-mode for ${i}.`),this._keybindingHoldMode.p}_resetKeybindingHoldMode(){this._keybindingHoldMode&&(this._keybindingHoldMode?.complete(),this._keybindingHoldMode=null)}customKeybindingsCount(){return this.userKeybindings.keybindings.length}updateResolver(){this._cachedResolver=null,this._onDidUpdateKeybindings.fire()}_getResolver(){if(!this._cachedResolver){const i=this._resolveKeybindingItems(A.getDefaultKeybindings(),!0),e=this._resolveUserKeybindingItems(this.userKeybindings.keybindings,!1);this._cachedResolver=new Ke(i,e,t=>this._log(t))}return this._cachedResolver}_documentHasFocus(){return this.hostService.hasFocus}_resolveKeybindingItems(i,e){const t=[];let r=0;for(const n of i){const d=n.when||void 0,s=n.keybinding;if(!s)t[r++]=new R(void 0,n.command,n.commandArgs,d,e,n.extensionId,n.isBuiltinExtension);else{if(this._assertBrowserConflicts(s))continue;const m=this._keyboardMapper.resolveKeybinding(s);for(let b=m.length-1;b>=0;b--){const f=m[b];t[r++]=new R(f,n.command,n.commandArgs,d,e,n.extensionId,n.isBuiltinExtension)}}}return t}_resolveUserKeybindingItems(i,e){const t=[];let r=0;for(const n of i){const d=n.when||void 0;if(!n.keybinding)t[r++]=new R(void 0,n.command,n.commandArgs,d,e,null,!1);else{const s=this._keyboardMapper.resolveKeybinding(n.keybinding);for(const m of s)t[r++]=new R(m,n.command,n.commandArgs,d,e,null,!1)}}return t}_assertBrowserConflicts(i){if(x.keyboard===M.Always||x.keyboard===M.FullScreen&&E.isFullscreen(D))return!1;for(const e of i.chords){if(!e.metaKey&&!e.altKey&&!e.ctrlKey&&!e.shiftKey)continue;const t=h.CtrlCmd|h.Alt|h.Shift;let r=0;if(e.metaKey&&(r|=h.CtrlCmd),e.shiftKey&&(r|=h.Shift),e.altKey&&(r|=h.Alt),e.ctrlKey&&w===L.Macintosh&&(r|=h.WinCtrl),(r&t)===(h.CtrlCmd|h.Alt)&&(e instanceof T&&(e.scanCode===o.ArrowLeft||e.scanCode===o.ArrowRight)||e instanceof N&&(e.keyCode===u.LeftArrow||e.keyCode===u.RightArrow))||(r&t)===h.CtrlCmd&&(e instanceof T&&e.scanCode>=o.Digit1&&e.scanCode<=o.Digit0||e instanceof N&&e.keyCode>=u.Digit0&&e.keyCode<=u.Digit9))return!0}return!1}resolveKeybinding(i){return this._keyboardMapper.resolveKeybinding(i)}resolveKeyboardEvent(i){return this.keyboardLayoutService.validateCurrentKeyboardMapping(i),this._keyboardMapper.resolveKeyboardEvent(i)}resolveUserBinding(i){const e=H.parseKeybinding(i);return e?this._keyboardMapper.resolveKeybinding(e):[]}_handleKeybindingsExtensionPointUser(i,e,t,r,n){if(Array.isArray(t))for(let d=0,s=t.length;d<s;d++)this._handleKeybinding(i,e,d+1,t[d],r,n);else this._handleKeybinding(i,e,1,t,r,n)}_handleKeybinding(i,e,t,r,n,d){const s=[];if(Oe(r,s)){const m=this._asCommandRule(i,e,t++,r);m&&d.push(m)}s.length>0&&n.error(a.localize("invalid.keybindings","Invalid `contributes.{0}`: {1}",Y.name,s.join(`
`)))}static bindToCurrentPlatform(i,e,t,r){if(w===L.Windows&&r){if(r)return r}else if(w===L.Macintosh){if(e)return e}else if(t)return t;return i}_asCommandRule(i,e,t,r){const{command:n,args:d,when:s,key:m,mac:b,linux:f,win:U}=r,K=v.bindToCurrentPlatform(m,b,f,U);if(!K)return;let y;e?y=B.BuiltinExtension+t:y=B.ExternalExtension+t;const C=P.getCommand(n),I=C&&C.precondition;let _;return s&&I?_=O.and(I,O.deserialize(s)):s?_=O.deserialize(s):I&&(_=I),{id:n,args:d,when:_,weight:y,keybinding:H.parseKeybinding(K),extensionId:i.value,isBuiltinExtension:e}}getDefaultKeybindingsContent(){const i=this._getResolver(),e=i.getDefaultKeybindings(),t=i.getDefaultBoundCommands();return v._getDefaultKeybindings(e)+`

`+v._getAllCommandsAsComment(t)}static _getDefaultKeybindings(i){const e=new Le;e.writeLine("[");const t=i.length-1;return i.forEach((r,n)=>{G.writeKeybindingItem(e,r),n!==t?e.writeLine(","):e.writeLine()}),e.writeLine("]"),e.toString()}static _getAllCommandsAsComment(i){const t=Ne(i).sort().join(`
// - `);return"// "+a.localize("unboundCommands","Here are other available commands: ")+`
// - `+t}mightProducePrintableCharacter(i){if(i.ctrlKey||i.metaKey||i.altKey)return!1;const e=F.toEnum(i.code);if(Ae.indexOf(e)!==-1)return!!(i.keyCode===q[e]||de&&i.keyCode===p.get(e));if(q[e]!==-1)return!1;const r=this.keyboardLayoutService.getRawKeyboardMapping();if(!r)return!1;const n=r[i.code];return!(!n||!n.value||/\s/.test(n.value))}};v=z([g(0,ue),g(1,me),g(2,_e),g(3,ke),g(4,Pe),g(5,Me),g(6,Ee),g(7,ye),g(8,we),g(9,Se),g(10,Ce)],v);class Ue extends oe{constructor(i,e,t,r){super();this.userDataProfileService=i;this.uriIdentityService=e;this.fileService=t;this.watch(),this.reloadConfigurationScheduler=this._register(new ie(()=>this.reload().then(n=>{n&&this._onDidChange.fire()}),50)),this._register(J.filter(this.fileService.onDidFilesChange,n=>n.contains(this.userDataProfileService.currentProfile.keybindingsResource))(()=>{r.debug("Keybindings file changed"),this.reloadConfigurationScheduler.schedule()})),this._register(this.fileService.onDidRunOperation(n=>{n.operation===ge.WRITE&&n.resource.toString()===this.userDataProfileService.currentProfile.keybindingsResource.toString()&&(r.debug("Keybindings file written"),this.reloadConfigurationScheduler.schedule())})),this._register(i.onDidChangeCurrentProfile(n=>{this.uriIdentityService.extUri.isEqual(n.previous.keybindingsResource,n.profile.keybindingsResource)||n.join(this.whenCurrentProfileChanged())}))}_rawKeybindings=[];_keybindings=[];get keybindings(){return this._keybindings}reloadConfigurationScheduler;watchDisposables=this._register(new j);_onDidChange=this._register(new ne);onDidChange=this._onDidChange.event;async whenCurrentProfileChanged(){this.watch(),this.reloadConfigurationScheduler.schedule()}watch(){this.watchDisposables.clear(),this.watchDisposables.add(this.fileService.watch(le(this.userDataProfileService.currentProfile.keybindingsResource))),this.watchDisposables.add(this.fileService.watch(this.userDataProfileService.currentProfile.keybindingsResource))}async initialize(){await this.reload()}async reload(){const i=await this.readUserKeybindings();return ae.equals(this._rawKeybindings,i)?!1:(this._rawKeybindings=i,this._keybindings=this._rawKeybindings.map(e=>G.readUserKeybindingItem(e)),!0)}async readUserKeybindings(){try{const i=await this.fileService.readFile(this.userDataProfileService.currentProfile.keybindingsResource),e=te(i.value.toString());return Array.isArray(e)?e.filter(t=>t&&typeof t=="object"):[]}catch{return[]}}}class k{static schemaId="vscode://schemas/keybindings";commandsSchemas=[];commandsEnum=[];removalCommandsEnum=[];commandsEnumDescriptions=[];schema={id:k.schemaId,type:"array",title:a.localize("keybindings.json.title","Keybindings configuration"),allowTrailingCommas:!0,allowComments:!0,definitions:{editorGroupsSchema:{type:"array",items:{type:"object",properties:{groups:{$ref:"#/definitions/editorGroupsSchema",default:[{},{}]},size:{type:"number",default:.5}}}},commandNames:{type:"string",enum:this.commandsEnum,enumDescriptions:this.commandsEnumDescriptions,description:a.localize("keybindings.json.command","Name of the command to execute")},commandType:{anyOf:[{$ref:"#/definitions/commandNames"},{type:"string",enum:this.removalCommandsEnum,enumDescriptions:this.commandsEnumDescriptions,description:a.localize("keybindings.json.removalCommand","Name of the command to remove keyboard shortcut for")},{type:"string"}]},commandsSchemas:{allOf:this.commandsSchemas}},items:{required:["key"],type:"object",defaultSnippets:[{body:{key:"$1",command:"$2",when:"$3"}}],properties:{key:{type:"string",description:a.localize("keybindings.json.key","Key or key sequence (separated by space)")},command:{anyOf:[{if:{type:"array"},then:{not:{type:"array"},errorMessage:a.localize("keybindings.commandsIsArray",`Incorrect type. Expected "{0}". The field 'command' does not support running multiple commands. Use command 'runCommands' to pass it multiple commands to run.`,"string")},else:{$ref:"#/definitions/commandType"}},{$ref:"#/definitions/commandType"}]},when:{type:"string",description:a.localize("keybindings.json.when","Condition when the key is active.")},args:{description:a.localize("keybindings.json.args","Arguments to pass to the command to execute.")}},$ref:"#/definitions/commandsSchemas"}};schemaRegistry=Ie.as(be.JSONContribution);constructor(){this.schemaRegistry.registerSchema(k.schemaId,this.schema)}updateSchema(c){this.commandsSchemas.length=0,this.commandsEnum.length=0,this.removalCommandsEnum.length=0,this.commandsEnumDescriptions.length=0;const i=new Set,e=(n,d)=>{/^_/.test(n)||i.has(n)||(i.add(n),this.commandsEnum.push(n),this.commandsEnumDescriptions.push(De(d)?d.value:d),this.removalCommandsEnum.push(`-${n}`))},t=ce.getCommands();for(const[n,d]of t){const s=d.metadata;if(e(n,s?.description??P.getCommand(n)?.title),!s||!s.args||s.args.length!==1||!s.args[0].schema)continue;const m=s.args[0].schema,b=typeof s.args[0].isOptional<"u"?!s.args[0].isOptional:Array.isArray(m.required)&&m.required.length>0,f={if:{required:["command"],properties:{command:{const:n}}},then:{required:[].concat(b?["args"]:[]),properties:{args:m}}};this.commandsSchemas.push(f)}const r=P.getCommands();for(const n of r.keys())e(n);this.commandsSchemas.push(...c),this.schemaRegistry.notifySchemaChanged(k.schemaId)}}he(ve,v,pe.Eager);export{v as WorkbenchKeybindingService};
