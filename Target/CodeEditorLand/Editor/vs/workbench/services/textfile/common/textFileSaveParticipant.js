var P=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var d=(a,o,e,t)=>{for(var i=t>1?void 0:t?I(o,e):o,s=a.length-1,r;s>=0;s--)(r=a[s])&&(i=(t?r(o,e,i):r(i))||i);return t&&i&&P(o,e,i),i},l=(a,o)=>(e,t)=>o(e,t,a);import{raceCancellation as S}from"../../../../base/common/async.js";import{CancellationTokenSource as g}from"../../../../base/common/cancellation.js";import{ILogService as k}from"../../../../platform/log/common/log.js";import{IProgressService as u,ProgressLocation as C}from"../../../../platform/progress/common/progress.js";import"./textfiles.js";import{Disposable as h,toDisposable as x}from"../../../../base/common/lifecycle.js";import{LinkedList as y}from"../../../../base/common/linkedList.js";import{localize as v}from"../../../../nls.js";import{NotificationPriority as E}from"../../../../platform/notification/common/notification.js";import{CancellationError as b,isCancellationError as T}from"../../../../base/common/errors.js";let c=class extends h{constructor(e,t){super();this.logService=e;this.progressService=t}saveParticipants=new y;addSaveParticipant(e){const t=this.saveParticipants.push(e);return x(()=>t())}async participate(e,t,i,s){const r=new g(s);e.textEditorModel?.pushStackElement(),i.report({message:v("saveParticipants1","Running Code Actions and Formatters...")});let p=!1;if(await this.progressService.withProgress({priority:E.URGENT,location:C.Notification,cancellable:v("skip","Skip"),delay:e.isDirty()?5e3:3e3},async m=>{for(const f of this.saveParticipants){if(r.token.isCancellationRequested||!e.textEditorModel)break;try{const n=f.participate(e,t,m,r.token);await S(n,r.token)}catch(n){T(n)?r.token.isCancellationRequested||(r.cancel(),p=!0):this.logService.error(n)}}},()=>{r.cancel()}),e.textEditorModel?.pushStackElement(),r.dispose(),p)throw new b}dispose(){this.saveParticipants.clear(),super.dispose()}};c=d([l(0,k),l(1,u)],c);export{c as TextFileSaveParticipant};
