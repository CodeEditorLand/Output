{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { CancellationError } from '../../../../base/common/errors.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { equals } from '../../../../base/common/objects.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { InstantiationType, registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProductService } from '../../../../platform/product/common/productService.js';\nimport { IRequestService, asJson } from '../../../../platform/request/common/request.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { IUriIdentityService } from '../../../../platform/uriIdentity/common/uriIdentity.js';\nimport { IUserDataProfile, IUserDataProfileOptions, IUserDataProfilesService, IUserDataProfileUpdateOptions } from '../../../../platform/userDataProfile/common/userDataProfile.js';\nimport { isEmptyWorkspaceIdentifier, IWorkspaceContextService, toWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';\nimport { CONFIG_NEW_WINDOW_PROFILE } from '../../../common/configuration.js';\nimport { IWorkbenchEnvironmentService } from '../../environment/common/environmentService.js';\nimport { IExtensionService } from '../../extensions/common/extensions.js';\nimport { IHostService } from '../../host/browser/host.js';\nimport { DidChangeUserDataProfileEvent, IProfileTemplateInfo, IUserDataProfileManagementService, IUserDataProfileService } from '../common/userDataProfile.js';\n\nexport type ProfileManagementActionExecutedClassification = {\n\towner: 'sandy081';\n\tcomment: 'Logged when profile management action is excuted';\n\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the action that was run.' };\n};\n\nexport type ProfileManagementActionExecutedEvent = {\n\tid: string;\n};\n\nexport class UserDataProfileManagementService extends Disposable implements IUserDataProfileManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => this.onDidChangeCurrentProfile(e)));\n\t\tthis._register(userDataProfilesService.onDidChangeProfiles(e => {\n\t\t\tif (e.removed.some(profile => profile.id === this.userDataProfileService.currentProfile.id)) {\n\t\t\t\tconst profileToUse = this.getProfileToUseForCurrentWorkspace();\n\t\t\t\tthis.switchProfile(profileToUse);\n\t\t\t\tthis.changeCurrentProfile(profileToUse, localize('reload message when removed', \"The current profile has been removed. Please reload to switch back to default profile\"));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst updatedCurrentProfile = e.updated.find(p => this.userDataProfileService.currentProfile.id === p.id);\n\t\t\tif (updatedCurrentProfile) {\n\t\t\t\tconst profileToUse = this.getProfileToUseForCurrentWorkspace();\n\t\t\t\tif (profileToUse?.id !== updatedCurrentProfile.id) {\n\t\t\t\t\tthis.switchProfile(profileToUse);\n\t\t\t\t\tthis.changeCurrentProfile(profileToUse, localize('reload message when switched', \"The current workspace has been removed from the current profile. Please reload to switch back to the updated profile\"));\n\t\t\t\t} else {\n\t\t\t\t\tthis.changeCurrentProfile(updatedCurrentProfile, localize('reload message when updated', \"The current profile has been updated. Please reload to switch back to the updated profile\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async onDidChangeCurrentProfile(e: DidChangeUserDataProfileEvent): Promise<void> {\n\t\tif (e.previous.isTransient) {\n\t\t\tawait this.userDataProfilesService.cleanUpTransientProfiles();\n\t\t}\n\t}\n\n\tprivate getWorkspaceUri(): URI | undefined {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\treturn workspace.configuration ?? workspace.folders[0]?.uri;\n\t}\n\n\tprivate getProfileToUseForCurrentWorkspace(): IUserDataProfile {\n\t\tconst workspaceUri = this.getWorkspaceUri();\n\t\tif (workspaceUri) {\n\t\t\tconst profileForWorkspace = this.userDataProfilesService.profiles.find(profile => profile.workspaces?.some(ws => this.uriIdentityService.extUri.isEqual(ws, workspaceUri)));\n\t\t\tif (profileForWorkspace) {\n\t\t\t\treturn profileForWorkspace;\n\t\t\t}\n\t\t} else {\n\t\t\t// If no workspace is open, use the current profile\n\t\t\tconst currentProfile = this.userDataProfilesService.profiles.find(profile => profile.id === this.userDataProfileService.currentProfile.id);\n\t\t\tif (currentProfile) {\n\t\t\t\treturn currentProfile;\n\t\t\t}\n\t\t}\n\t\treturn this.getDefaultProfileToUse();\n\t}\n\n\tpublic getDefaultProfileToUse(): IUserDataProfile {\n\t\tconst newWindowProfileConfigValue = this.configurationService.getValue(CONFIG_NEW_WINDOW_PROFILE);\n\t\tif (newWindowProfileConfigValue) {\n\t\t\tconst newWindowProfile = this.userDataProfilesService.profiles.find(profile => profile.name === newWindowProfileConfigValue);\n\t\t\tif (newWindowProfile) {\n\t\t\t\treturn newWindowProfile;\n\t\t\t}\n\t\t}\n\t\treturn this.userDataProfilesService.defaultProfile;\n\t}\n\n\tasync createProfile(name: string, options?: IUserDataProfileOptions): Promise<IUserDataProfile> {\n\t\treturn this.userDataProfilesService.createNamedProfile(name, options);\n\t}\n\n\tasync createAndEnterProfile(name: string, options?: IUserDataProfileOptions): Promise<IUserDataProfile> {\n\t\tconst profile = await this.userDataProfilesService.createNamedProfile(name, options, toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'createAndEnterProfile' });\n\t\treturn profile;\n\t}\n\n\tasync createAndEnterTransientProfile(): Promise<IUserDataProfile> {\n\t\tconst profile = await this.userDataProfilesService.createTransientProfile(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'createAndEnterTransientProfile' });\n\t\treturn profile;\n\t}\n\n\tasync updateProfile(profile: IUserDataProfile, updateOptions: IUserDataProfileUpdateOptions): Promise<IUserDataProfile> {\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(localize('cannotRenameDefaultProfile', \"Cannot rename the default profile\"));\n\t\t}\n\t\tconst updatedProfile = await this.userDataProfilesService.updateProfile(profile, updateOptions);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'updateProfile' });\n\t\treturn updatedProfile;\n\t}\n\n\tasync removeProfile(profile: IUserDataProfile): Promise<void> {\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(localize('cannotDeleteDefaultProfile', \"Cannot delete the default profile\"));\n\t\t}\n\t\tawait this.userDataProfilesService.removeProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'removeProfile' });\n\t}\n\n\tasync switchProfile(profile: IUserDataProfile): Promise<void> {\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (this.userDataProfileService.currentProfile.id === profile.id) {\n\t\t\treturn;\n\t\t}\n\t\tconst workspaceUri = this.getWorkspaceUri();\n\t\tif (workspaceUri && profile.workspaces?.some(ws => this.uriIdentityService.extUri.isEqual(ws, workspaceUri))) {\n\t\t\treturn;\n\t\t}\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceContextService.getWorkspace());\n\t\tawait this.userDataProfilesService.setProfileForWorkspace(workspaceIdentifier, profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'switchProfile' });\n\t\tif (isEmptyWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\tawait this.changeCurrentProfile(profile);\n\t\t}\n\t}\n\n\tasync getBuiltinProfileTemplates(): Promise<IProfileTemplateInfo[]> {\n\t\tif (this.productService.profileTemplatesUrl) {\n\t\t\ttry {\n\t\t\t\tconst context = await this.requestService.request({ type: 'GET', url: this.productService.profileTemplatesUrl }, CancellationToken.None);\n\t\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\t\treturn (await asJson<IProfileTemplateInfo[]>(context)) || [];\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.error('Could not get profile templates.', context.res.statusCode);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async changeCurrentProfile(profile: IUserDataProfile, reloadMessage?: string): Promise<void> {\n\t\tconst isRemoteWindow = !!this.environmentService.remoteAuthority;\n\n\t\tconst shouldRestartExtensionHosts = this.userDataProfileService.currentProfile.id !== profile.id || !equals(this.userDataProfileService.currentProfile.useDefaultFlags, profile.useDefaultFlags);\n\n\t\tif (shouldRestartExtensionHosts) {\n\t\t\tif (!isRemoteWindow) {\n\t\t\t\tif (!(await this.extensionService.stopExtensionHosts(localize('switch profile', \"Switching to a profile.\")))) {\n\t\t\t\t\t// If extension host did not stop, do not switch profile\n\t\t\t\t\tif (this.userDataProfilesService.profiles.some(p => p.id === this.userDataProfileService.currentProfile.id)) {\n\t\t\t\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()), this.userDataProfileService.currentProfile);\n\t\t\t\t\t}\n\t\t\t\t\tthrow new CancellationError();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// In a remote window update current profile before reloading so that data is preserved from current profile if asked to preserve\n\t\tawait this.userDataProfileService.updateCurrentProfile(profile);\n\n\t\tif (shouldRestartExtensionHosts) {\n\t\t\tif (isRemoteWindow) {\n\t\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\t\tmessage: reloadMessage ?? localize('reload message', \"Switching a profile requires reloading VS Code.\"),\n\t\t\t\t\tprimaryButton: localize('reload button', \"&&Reload\"),\n\t\t\t\t});\n\t\t\t\tif (confirmed) {\n\t\t\t\t\tawait this.hostService.reload();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tawait this.extensionService.startExtensionHosts();\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(IUserDataProfileManagementService, UserDataProfileManagementService, InstantiationType.Eager /* Eager because it updates the current window profile by listening to profiles changes */);\n"],
  "mappings": "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",
  "names": []
}
