var S=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var l=(s,t,e,r)=>{for(var i=r>1?void 0:r?g(t,e):t,a=s.length-1,o;a>=0;a--)(o=s[a])&&(i=(r?o(t,e,i):o(i))||i);return r&&i&&S(t,e,i),i},p=(s,t)=>(e,r)=>t(e,r,s);import{raceCancellation as P}from"../../../../base/common/async.js";import{CancellationTokenSource as I}from"../../../../base/common/cancellation.js";import{ILogService as f}from"../../../../platform/log/common/log.js";import{IProgressService as k,ProgressLocation as h}from"../../../../platform/progress/common/progress.js";import{Disposable as u,toDisposable as y}from"../../../../base/common/lifecycle.js";import"./workingCopyFileService.js";import"./storedFileWorkingCopy.js";import{LinkedList as C}from"../../../../base/common/linkedList.js";import{isCancellationError as b}from"../../../../base/common/errors.js";import{NotificationPriority as F}from"../../../../platform/notification/common/notification.js";import{localize as m}from"../../../../nls.js";let c=class extends u{constructor(e,r){super();this.logService=e;this.progressService=r}saveParticipants=new C;get length(){return this.saveParticipants.size}addSaveParticipant(e){const r=this.saveParticipants.push(e);return y(()=>r())}async participate(e,r,i,a){const o=new I(a);e.model?.pushStackElement(),i.report({message:m("saveParticipants1","Running Code Actions and Formatters...")}),await this.progressService.withProgress({priority:F.URGENT,location:h.Notification,cancellable:m("skip","Skip"),delay:e.isDirty()?5e3:3e3},async d=>{for(const v of this.saveParticipants){if(o.token.isCancellationRequested||e.isDisposed())break;try{const n=v.participate(e,r,d,o.token);await P(n,o.token)}catch(n){b(n)||this.logService.error(n)}}},()=>{o.cancel()}),e.model?.pushStackElement(),o.dispose()}dispose(){this.saveParticipants.clear(),super.dispose()}};c=l([p(0,f),p(1,k)],c);export{c as StoredFileWorkingCopySaveParticipant};
