{
  "version": 3,
  "sources": ["../../../../../../../../../../Dependency/Land/Dependency/Editor/Source/vs/workbench/services/workingCopy/common/storedFileWorkingCopySaveParticipant.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { raceCancellation } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from '../../../../platform/progress/common/progress.js';\nimport { IDisposable, Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IStoredFileWorkingCopySaveParticipant, IStoredFileWorkingCopySaveParticipantContext } from './workingCopyFileService.js';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from './storedFileWorkingCopy.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { CancellationError, isCancellationError } from '../../../../base/common/errors.js';\nimport { NotificationPriority } from '../../../../platform/notification/common/notification.js';\nimport { localize } from '../../../../nls.js';\n\nexport class StoredFileWorkingCopySaveParticipant extends Disposable {\n\n\tprivate readonly saveParticipants = new LinkedList<IStoredFileWorkingCopySaveParticipant>();\n\n\tget length(): number { return this.saveParticipants.size; }\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t) {\n\t\tsuper();\n\t}\n\n\taddSaveParticipant(participant: IStoredFileWorkingCopySaveParticipant): IDisposable {\n\t\tconst remove = this.saveParticipants.push(participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, context: IStoredFileWorkingCopySaveParticipantContext, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tconst cts = new CancellationTokenSource(token);\n\n\t\t// undoStop before participation\n\t\tworkingCopy.model?.pushStackElement();\n\n\t\t// report to the \"outer\" progress\n\t\tprogress.report({\n\t\t\tmessage: localize('saveParticipants1', \"Running Code Actions and Formatters...\")\n\t\t});\n\n\t\tlet bubbleCancel = false;\n\n\t\t// create an \"inner\" progress to allow to skip over long running save participants\n\t\tawait this.progressService.withProgress({\n\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\tlocation: ProgressLocation.Notification,\n\t\t\tcancellable: localize('skip', \"Skip\"),\n\t\t\tdelay: workingCopy.isDirty() ? 5000 : 3000\n\t\t}, async progress => {\n\t\t\tfor (const saveParticipant of this.saveParticipants) {\n\t\t\t\tif (cts.token.isCancellationRequested || workingCopy.isDisposed()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst promise = saveParticipant.participate(workingCopy, context, progress, cts.token);\n\t\t\t\t\tawait raceCancellation(promise, cts.token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!isCancellationError(err)) {\n\t\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t\t} else if (!cts.token.isCancellationRequested) {\n\t\t\t\t\t\t// we see a cancellation error BUT the token didn't signal it\n\t\t\t\t\t\t// this means the participant wants the save operation to be cancelled\n\t\t\t\t\t\tcts.cancel();\n\t\t\t\t\t\tbubbleCancel = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, () => {\n\t\t\tcts.cancel();\n\t\t});\n\n\t\t// undoStop after participation\n\t\tworkingCopy.model?.pushStackElement();\n\n\t\tcts.dispose();\n\n\t\tif (bubbleCancel) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.saveParticipants.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;AAKA,SAAS,wBAAwB;AACjC,SAAS,mBAAmB,+BAA+B;AAC3D,SAAS,mBAAmB;AAC5B,SAAS,WAAW,kBAAkB,eAAe,wBAAwB;AAC7E,SAAS,aAAa,YAAY,oBAAoB;AACtD,SAAS,uCAAuC,oDAAoD;AACpG,SAAS,wBAAwB,mCAAmC;AACpE,SAAS,kBAAkB;AAC3B,SAAS,mBAAmB,2BAA2B;AACvD,SAAS,4BAA4B;AACrC,SAAS,gBAAgB;AAElB,IAAM,uCAAN,cAAmD,WAAW;AAAA,EAMpE,YAC+B,YACK,iBAClC;AACD,UAAM;AAHwB;AACK;AAAA,EAGpC;AAAA,EA5BD,OAiBqE;AAAA;AAAA;AAAA,EAEnD,mBAAmB,IAAI,WAAkD;AAAA,EAE1F,IAAI,SAAiB;AAAE,WAAO,KAAK,iBAAiB;AAAA,EAAM;AAAA,EAS1D,mBAAmB,aAAiE;AACnF,UAAM,SAAS,KAAK,iBAAiB,KAAK,WAAW;AAErD,WAAO,aAAa,MAAM,OAAO,CAAC;AAAA,EACnC;AAAA,EAEA,MAAM,YAAY,aAAkE,SAAuD,UAAoC,OAAyC;AACvN,UAAM,MAAM,IAAI,wBAAwB,KAAK;AAG7C,gBAAY,OAAO,iBAAiB;AAGpC,aAAS,OAAO;AAAA,MACf,SAAS,SAAS,qBAAqB,wCAAwC;AAAA,IAChF,CAAC;AAED,QAAI,eAAe;AAGnB,UAAM,KAAK,gBAAgB,aAAa;AAAA,MACvC,UAAU,qBAAqB;AAAA,MAC/B,UAAU,iBAAiB;AAAA,MAC3B,aAAa,SAAS,QAAQ,MAAM;AAAA,MACpC,OAAO,YAAY,QAAQ,IAAI,MAAO;AAAA,IACvC,GAAG,OAAMA,cAAY;AACpB,iBAAW,mBAAmB,KAAK,kBAAkB;AACpD,YAAI,IAAI,MAAM,2BAA2B,YAAY,WAAW,GAAG;AAClE;AAAA,QACD;AAEA,YAAI;AACH,gBAAM,UAAU,gBAAgB,YAAY,aAAa,SAASA,WAAU,IAAI,KAAK;AACrF,gBAAM,iBAAiB,SAAS,IAAI,KAAK;AAAA,QAC1C,SAAS,KAAK;AACb,cAAI,CAAC,oBAAoB,GAAG,GAAG;AAC9B,iBAAK,WAAW,MAAM,GAAG;AAAA,UAC1B,WAAW,CAAC,IAAI,MAAM,yBAAyB;AAG9C,gBAAI,OAAO;AACX,2BAAe;AAAA,UAChB;AAAA,QACD;AAAA,MACD;AAAA,IACD,GAAG,MAAM;AACR,UAAI,OAAO;AAAA,IACZ,CAAC;AAGD,gBAAY,OAAO,iBAAiB;AAEpC,QAAI,QAAQ;AAEZ,QAAI,cAAc;AACjB,YAAM,IAAI,kBAAkB;AAAA,IAC7B;AAAA,EACD;AAAA,EAES,UAAgB;AACxB,SAAK,iBAAiB,MAAM;AAE5B,UAAM,QAAQ;AAAA,EACf;AACD;AA7Ea,uCAAN;AAAA,EAOJ;AAAA,EACA;AAAA,GARU;",
  "names": ["progress"]
}
