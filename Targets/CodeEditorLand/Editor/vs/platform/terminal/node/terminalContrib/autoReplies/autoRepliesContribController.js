var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var l=(n,e,s,o)=>{for(var r=o>1?void 0:o?u(e,s):e,t=n.length-1,a;t>=0;t--)(a=n[t])&&(r=(o?a(e,s,r):a(r))||r);return o&&r&&c(e,s,r),r},p=(n,e)=>(s,o)=>e(s,o,n);import{ILogService as d}from"../../../../log/common/log.js";import{TerminalAutoResponder as m}from"./terminalAutoResponder.js";let i=class{constructor(e){this._logService=e}_autoReplies=new Map;_terminalProcesses=new Map;_autoResponders=new Map;async installAutoReply(e,s){this._autoReplies.set(e,s);for(const o of this._autoResponders.keys()){const r=this._terminalProcesses.get(o);if(!r){this._logService.error("Could not find terminal process to install auto reply");continue}this._processInstallAutoReply(o,r,e,s)}}async uninstallAllAutoReplies(){for(const e of this._autoReplies.keys())for(const s of this._autoResponders.values())s.get(e)?.dispose(),s.delete(e)}handleProcessReady(e,s){this._terminalProcesses.set(e,s),this._autoResponders.set(e,new Map);for(const[o,r]of this._autoReplies.entries())this._processInstallAutoReply(e,s,o,r)}handleProcessDispose(e){const s=this._autoResponders.get(e);if(s){for(const o of s.values())o.dispose();s.clear()}}handleProcessInput(e,s){const o=this._autoResponders.get(e);if(o)for(const r of o.values())r.handleInput()}handleProcessResize(e,s,o){const r=this._autoResponders.get(e);if(r)for(const t of r.values())t.handleResize()}_processInstallAutoReply(e,s,o,r){const t=this._autoResponders.get(e);t&&(t.get(o)?.dispose(),t.set(o,new m(s,o,r,this._logService)))}};i=l([p(0,d)],i);export{i as AutoRepliesPtyServiceContribution};
