var U=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var y=(n,o,i,e)=>{for(var t=e>1?void 0:e?w(o,i):o,r=n.length-1,s;r>=0;r--)(s=n[r])&&(t=(e?s(o,i,t):s(t))||t);return e&&t&&U(o,i,t),t},u=(n,o)=>(i,e)=>o(i,e,n);import{hash as D}from"../../../base/common/hash.js";import{Emitter as m}from"../../../base/common/event.js";import{Disposable as k}from"../../../base/common/lifecycle.js";import{basename as S,joinPath as p}from"../../../base/common/resources.js";import{URI as c}from"../../../base/common/uri.js";import{localize as b}from"../../../nls.js";import{IEnvironmentService as W}from"../../environment/common/environment.js";import{FileOperationResult as R,IFileService as x,toFileOperationResult as O}from"../../files/common/files.js";import{createDecorator as j}from"../../instantiation/common/instantiation.js";import{ILogService as E}from"../../log/common/log.js";import{isSingleFolderWorkspaceIdentifier as A,isWorkspaceIdentifier as F}from"../../workspace/common/workspace.js";import"../../../base/common/collections.js";import{IUriIdentityService as _}from"../../uriIdentity/common/uriIdentity.js";import{Promises as C}from"../../../base/common/async.js";import{generateUuid as I}from"../../../base/common/uuid.js";import{escapeRegExpCharacters as H}from"../../../base/common/strings.js";import{isString as v}from"../../../base/common/types.js";var T=(s=>(s.Settings="settings",s.Keybindings="keybindings",s.Snippets="snippets",s.Tasks="tasks",s.Extensions="extensions",s.GlobalState="globalState",s))(T||{});function le(n){const o=n;return!!(o&&typeof o=="object"&&typeof o.id=="string"&&typeof o.isDefault=="boolean"&&typeof o.name=="string"&&c.isUri(o.location)&&c.isUri(o.globalStorageHome)&&c.isUri(o.settingsResource)&&c.isUri(o.keybindingsResource)&&c.isUri(o.tasksResource)&&c.isUri(o.snippetsHome)&&c.isUri(o.extensionsResource))}const fe=j("IUserDataProfilesService");function ce(n,o){return{id:n.id,isDefault:n.isDefault,name:n.name,icon:n.icon,location:c.revive(n.location).with({scheme:o}),globalStorageHome:c.revive(n.globalStorageHome).with({scheme:o}),settingsResource:c.revive(n.settingsResource).with({scheme:o}),keybindingsResource:c.revive(n.keybindingsResource).with({scheme:o}),tasksResource:c.revive(n.tasksResource).with({scheme:o}),snippetsHome:c.revive(n.snippetsHome).with({scheme:o}),extensionsResource:c.revive(n.extensionsResource).with({scheme:o}),cacheHome:c.revive(n.cacheHome).with({scheme:o}),useDefaultFlags:n.useDefaultFlags,isTransient:n.isTransient,workspaces:n.workspaces?.map(i=>c.revive(i))}}function g(n,o,i,e,t,r){return{id:n,name:o,location:i,isDefault:!1,icon:t?.icon,globalStorageHome:r&&t?.useDefaultFlags?.globalState?r.globalStorageHome:p(i,"globalStorage"),settingsResource:r&&t?.useDefaultFlags?.settings?r.settingsResource:p(i,"settings.json"),keybindingsResource:r&&t?.useDefaultFlags?.keybindings?r.keybindingsResource:p(i,"keybindings.json"),tasksResource:r&&t?.useDefaultFlags?.tasks?r.tasksResource:p(i,"tasks.json"),snippetsHome:r&&t?.useDefaultFlags?.snippets?r.snippetsHome:p(i,"snippets"),extensionsResource:r&&t?.useDefaultFlags?.extensions?r.extensionsResource:p(i,"extensions.json"),cacheHome:p(e,n),useDefaultFlags:t?.useDefaultFlags,isTransient:t?.transient,workspaces:t?.workspaces}}let h=class extends k{constructor(i,e,t,r){super();this.environmentService=i;this.fileService=e;this.uriIdentityService=t;this.logService=r;this.profilesHome=p(this.environmentService.userRoamingDataHome,"profiles"),this.profilesCacheHome=p(this.environmentService.cacheHome,"CachedProfilesData")}static PROFILES_KEY="userDataProfiles";static PROFILE_ASSOCIATIONS_KEY="profileAssociations";_serviceBrand;profilesHome;profilesCacheHome;get defaultProfile(){return this.profiles[0]}get profiles(){return[...this.profilesObject.profiles,...this.transientProfilesObject.profiles]}_onDidChangeProfiles=this._register(new m);onDidChangeProfiles=this._onDidChangeProfiles.event;_onWillCreateProfile=this._register(new m);onWillCreateProfile=this._onWillCreateProfile.event;_onWillRemoveProfile=this._register(new m);onWillRemoveProfile=this._onWillRemoveProfile.event;_onDidResetWorkspaces=this._register(new m);onDidResetWorkspaces=this._onDidResetWorkspaces.event;profileCreationPromises=new Map;transientProfilesObject={profiles:[],emptyWindows:new Map};init(){this._profilesObject=void 0}_profilesObject;get profilesObject(){if(!this._profilesObject){const i=this.createDefaultProfile(),e=[i];try{for(const r of this.getStoredProfiles()){if(!r.name||!v(r.name)||!r.location){this.logService.warn("Skipping the invalid stored profile",r.location||r.name);continue}e.push(g(S(r.location),r.name,r.location,this.profilesCacheHome,{icon:r.icon,useDefaultFlags:r.useDefaultFlags},i))}}catch(r){this.logService.error(r)}const t=new Map;if(e.length)try{const r=this.getStoredProfileAssociations();if(r.workspaces)for(const[s,f]of Object.entries(r.workspaces)){const a=c.parse(s),l=e.find(d=>d.id===f);if(l){const d=l.workspaces?l.workspaces.slice(0):[];d.push(a),l.workspaces=d}}if(r.emptyWindows)for(const[s,f]of Object.entries(r.emptyWindows)){const a=e.find(l=>l.id===f);a&&t.set(s,a)}}catch(r){this.logService.error(r)}this._profilesObject={profiles:e,emptyWindows:t}}return this._profilesObject}createDefaultProfile(){const i=g("__default__profile__",b("defaultProfile","Default"),this.environmentService.userRoamingDataHome,this.profilesCacheHome);return{...i,extensionsResource:this.getDefaultProfileExtensionsLocation()??i.extensionsResource,isDefault:!0}}async createTransientProfile(i){const e="Temp",t=new RegExp(`${H(e)}\\s(\\d+)`);let r=0;for(const f of this.profiles){const a=t.exec(f.name),l=a?parseInt(a[1]):0;r=l>r?l:r}const s=`${e} ${r+1}`;return this.createProfile(D(I()).toString(16),s,{transient:!0},i)}async createNamedProfile(i,e,t){return this.createProfile(D(I()).toString(16),i,e,t)}async createProfile(i,e,t,r){return await this.doCreateProfile(i,e,t,r)}async doCreateProfile(i,e,t,r){if(!v(e)||!e)throw new Error("Name of the profile is mandatory and must be of type `string`");let s=this.profileCreationPromises.get(e);return s||(s=(async()=>{try{if(this.profiles.find(P=>P.id===i||!P.isTransient&&!t?.transient&&P.name===e))throw new Error(`Profile with ${e} name already exists`);const a=r?this.getWorkspace(r):void 0;c.isUri(a)&&(t={...t,workspaces:[a]});const l=g(i,e,p(this.profilesHome,i),this.profilesCacheHome,t,this.defaultProfile);await this.fileService.createFolder(l.location);const d=[];return this._onWillCreateProfile.fire({profile:l,join(P){d.push(P)}}),await C.settled(d),a&&!c.isUri(a)&&this.updateEmptyWindowAssociation(a,l,!!l.isTransient),this.updateProfiles([l],[],[]),l}finally{this.profileCreationPromises.delete(e)}})(),this.profileCreationPromises.set(e,s)),s}async updateProfile(i,e){const t=[];for(const s of this.profiles){let f;if(i.id===s.id)s.isDefault?e.workspaces&&(f=s,f.workspaces=e.workspaces):f=g(s.id,e.name??s.name,s.location,this.profilesCacheHome,{icon:e.icon===null?void 0:e.icon??s.icon,transient:e.transient??s.isTransient,useDefaultFlags:e.useDefaultFlags??s.useDefaultFlags,workspaces:e.workspaces??s.workspaces},this.defaultProfile);else if(e.workspaces){const a=s.workspaces?.filter(l=>!e.workspaces?.some(d=>this.uriIdentityService.extUri.isEqual(l,d)));s.workspaces?.length!==a?.length&&(f=s,f.workspaces=a)}f&&t.push(f)}if(!t.length)throw i.isDefault?new Error("Cannot update default profile"):new Error(`Profile '${i.name}' does not exist`);this.updateProfiles([],[],t);const r=this.profiles.find(s=>s.id===i.id);if(!r)throw new Error(`Profile '${i.name}' was not updated`);return r}async removeProfile(i){if(i.isDefault)throw new Error("Cannot remove default profile");const e=this.profiles.find(r=>r.id===i.id);if(!e)throw new Error(`Profile '${i.name}' does not exist`);const t=[];this._onWillRemoveProfile.fire({profile:e,join(r){t.push(r)}});try{await Promise.allSettled(t)}catch(r){this.logService.error(r)}this.updateProfiles([],[e],[]);try{await this.fileService.del(e.cacheHome,{recursive:!0})}catch(r){O(r)!==R.FILE_NOT_FOUND&&this.logService.error(r)}}async setProfileForWorkspace(i,e){const t=this.profiles.find(s=>s.id===e.id);if(!t)throw new Error(`Profile '${e.name}' does not exist`);const r=this.getWorkspace(i);if(c.isUri(r)){const s=t.workspaces?[...t.workspaces]:[];s.some(f=>this.uriIdentityService.extUri.isEqual(f,r))||(s.push(r),await this.updateProfile(t,{workspaces:s}))}else this.updateEmptyWindowAssociation(r,t,!1),this.updateStoredProfiles(this.profiles)}unsetWorkspace(i,e=!1){const t=this.getWorkspace(i);if(c.isUri(t)){const r=this.getProfileForWorkspace(i);r&&this.updateProfile(r,{workspaces:r.workspaces?.filter(s=>!this.uriIdentityService.extUri.isEqual(s,t))})}else this.updateEmptyWindowAssociation(t,void 0,e),this.updateStoredProfiles(this.profiles)}async resetWorkspaces(){this.transientProfilesObject.emptyWindows.clear(),this.profilesObject.emptyWindows.clear();for(const i of this.profiles)i.workspaces=void 0;this.updateProfiles([],[],this.profiles),this._onDidResetWorkspaces.fire()}async cleanUp(){if(await this.fileService.exists(this.profilesHome)){const i=await this.fileService.resolve(this.profilesHome);await Promise.all((i.children||[]).filter(e=>e.isDirectory&&this.profiles.every(t=>!this.uriIdentityService.extUri.isEqual(t.location,e.resource))).map(e=>this.fileService.del(e.resource,{recursive:!0})))}}async cleanUpTransientProfiles(){const i=this.transientProfilesObject.profiles.filter(e=>!this.isProfileAssociatedToWorkspace(e));await Promise.allSettled(i.map(e=>this.removeProfile(e)))}getProfileForWorkspace(i){const e=this.getWorkspace(i);return c.isUri(e)?this.profiles.find(t=>t.workspaces?.some(r=>this.uriIdentityService.extUri.isEqual(r,e))):this.profilesObject.emptyWindows.get(e)??this.transientProfilesObject.emptyWindows.get(e)}getWorkspace(i){return A(i)?i.uri:F(i)?i.configPath:i.id}isProfileAssociatedToWorkspace(i){return!!(i.workspaces?.length||[...this.profilesObject.emptyWindows.values()].some(e=>this.uriIdentityService.extUri.isEqual(e.location,i.location))||[...this.transientProfilesObject.emptyWindows.values()].some(e=>this.uriIdentityService.extUri.isEqual(e.location,i.location)))}updateProfiles(i,e,t){const r=[...this.profiles,...i],s=this.transientProfilesObject.profiles;this.transientProfilesObject.profiles=[];const f=[];for(let a of r){if(e.some(l=>a.id===l.id)){for(const l of[...this.profilesObject.emptyWindows.keys()])a.id===this.profilesObject.emptyWindows.get(l)?.id&&this.profilesObject.emptyWindows.delete(l);continue}if(!a.isDefault){a=t.find(d=>a.id===d.id)??a;const l=s.find(d=>a.id===d.id);if(a.isTransient)this.transientProfilesObject.profiles.push(a);else if(l){for(const[d,P]of this.transientProfilesObject.emptyWindows.entries())if(a.id===P.id){this.transientProfilesObject.emptyWindows.delete(d),this.profilesObject.emptyWindows.set(d,a);break}}}a.workspaces?.length===0&&(a.workspaces=void 0),f.push(a)}this.updateStoredProfiles(f),this.triggerProfilesChanges(i,e,t)}triggerProfilesChanges(i,e,t){this._onDidChangeProfiles.fire({added:i,removed:e,updated:t,all:this.profiles})}updateEmptyWindowAssociation(i,e,t){t=e?.isTransient?!0:t,t?e?this.transientProfilesObject.emptyWindows.set(i,e):this.transientProfilesObject.emptyWindows.delete(i):(this.transientProfilesObject.emptyWindows.delete(i),e?this.profilesObject.emptyWindows.set(i,e):this.profilesObject.emptyWindows.delete(i))}updateStoredProfiles(i){const e=[],t={},r={};for(const s of i)if(!s.isTransient&&(s.isDefault||e.push({location:s.location,name:s.name,icon:s.icon,useDefaultFlags:s.useDefaultFlags}),s.workspaces))for(const f of s.workspaces)t[f.toString()]=s.id;for(const[s,f]of this.profilesObject.emptyWindows.entries())r[s.toString()]=f.id;this.saveStoredProfileAssociations({workspaces:t,emptyWindows:r}),this.saveStoredProfiles(e),this._profilesObject=void 0}getStoredProfiles(){return[]}saveStoredProfiles(i){throw new Error("not implemented")}getStoredProfileAssociations(){return{}}saveStoredProfileAssociations(i){throw new Error("not implemented")}getDefaultProfileExtensionsLocation(){}};h=y([u(0,W),u(1,x),u(2,_),u(3,E)],h);class de extends h{storedProfiles=[];getStoredProfiles(){return this.storedProfiles}saveStoredProfiles(o){this.storedProfiles=o}storedProfileAssociations={};getStoredProfileAssociations(){return this.storedProfileAssociations}saveStoredProfileAssociations(o){this.storedProfileAssociations=o}}export{fe as IUserDataProfilesService,de as InMemoryUserDataProfilesService,T as ProfileResourceType,h as UserDataProfilesService,le as isUserDataProfile,ce as reviveProfile,g as toUserDataProfile};
