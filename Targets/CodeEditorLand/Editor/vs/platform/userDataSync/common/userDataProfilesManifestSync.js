var L=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var D=(m,h,e,t)=>{for(var o=t>1?void 0:t?C(h,e):h,i=m.length-1,n;i>=0;i--)(n=m[i])&&(o=(t?n(h,e,o):n(o))||o);return t&&o&&L(h,e,o),o},u=(m,h)=>(e,t)=>h(e,t,m);import"../../../base/common/cancellation.js";import{toFormattedString as U}from"../../../base/common/jsonFormatter.js";import"../../../base/common/uri.js";import{IConfigurationService as w}from"../../configuration/common/configuration.js";import{IEnvironmentService as M}from"../../environment/common/environment.js";import{IFileService as b}from"../../files/common/files.js";import{IStorageService as $}from"../../storage/common/storage.js";import{ITelemetryService as N}from"../../telemetry/common/telemetry.js";import{IUriIdentityService as E}from"../../uriIdentity/common/uriIdentity.js";import{IUserDataProfilesService as x}from"../../userDataProfile/common/userDataProfile.js";import{AbstractSynchroniser as F}from"./abstractSynchronizer.js";import{merge as R}from"./userDataProfilesManifestMerge.js";import{Change as l,IUserDataSyncLocalStoreService as T,IUserDataSyncLogService as A,IUserDataSyncEnablementService as O,IUserDataSyncStoreService as J,SyncResource as q,USER_DATA_SYNC_SCHEME as S,UserDataSyncError as k,UserDataSyncErrorCode as H}from"./userDataSync.js";let P=class extends F{constructor(e,t,o,i,n,r,f,g,c,a,y,s,d){super({syncResource:q.Profiles,profile:e},t,i,n,r,f,g,y,s,c,a,d);this.userDataProfilesService=o;this._register(o.onDidChangeProfiles(()=>this.triggerLocalChange()))}version=2;previewResource=this.extUri.joinPath(this.syncPreviewFolder,"profiles.json");baseResource=this.previewResource.with({scheme:S,authority:"base"});localResource=this.previewResource.with({scheme:S,authority:"local"});remoteResource=this.previewResource.with({scheme:S,authority:"remote"});acceptedResource=this.previewResource.with({scheme:S,authority:"accepted"});async getLastSyncedProfiles(){const e=await this.getLastSyncUserData();return e?.syncData?p(e.syncData):null}async getRemoteSyncedProfiles(e){const t=await this.getLastSyncUserData(),o=await this.getLatestRemoteUserData(e,t);return o?.syncData?p(o.syncData):null}async generateSyncPreview(e,t,o){const i=e.syncData?p(e.syncData):null,n=t?.syncData?p(t.syncData):null,r=this.getLocalUserDataProfiles(),{local:f,remote:g}=R(r,i,n,[]),c={local:f,remote:g,content:n?this.stringifyRemoteProfiles(n):null,localChange:f.added.length>0||f.removed.length>0||f.updated.length>0?l.Modified:l.None,remoteChange:g!==null?l.Modified:l.None},a=v(r,!1);return[{baseResource:this.baseResource,baseContent:n?this.stringifyRemoteProfiles(n):null,localResource:this.localResource,localContent:a,remoteResource:this.remoteResource,remoteContent:i?this.stringifyRemoteProfiles(i):null,remoteProfiles:i,previewResource:this.previewResource,previewResult:c,localChange:c.localChange,remoteChange:c.remoteChange,acceptedResource:this.acceptedResource}]}async hasRemoteChanged(e){const t=e?.syncData?p(e.syncData):null,o=this.getLocalUserDataProfiles(),{remote:i}=R(o,t,t,[]);return!!i?.added.length||!!i?.removed.length||!!i?.updated.length}async getMergeResult(e,t){return{...e.previewResult,hasConflicts:!1}}async getAcceptResult(e,t,o,i){if(this.extUri.isEqual(t,this.localResource))return this.acceptLocal(e);if(this.extUri.isEqual(t,this.remoteResource))return this.acceptRemote(e);if(this.extUri.isEqual(t,this.previewResource))return e.previewResult;throw new Error(`Invalid Resource: ${t.toString()}`)}async acceptLocal(e){const t=this.getLocalUserDataProfiles(),o=R(t,null,null,[]),{local:i,remote:n}=o;return{content:e.localContent,local:i,remote:n,localChange:i.added.length>0||i.removed.length>0||i.updated.length>0?l.Modified:l.None,remoteChange:n!==null?l.Modified:l.None}}async acceptRemote(e){const t=e.remoteContent?JSON.parse(e.remoteContent):null,o=[],i=[];for(const n of this.getLocalUserDataProfiles()){const r=t?.find(f=>f.id===n.id);r&&(o.push({id:n.id,name:n.name,collection:r.collection}),i.push(n))}if(t!==null){const n=R(i,t,o,[]),{local:r,remote:f}=n;return{content:e.remoteContent,local:r,remote:f,localChange:r.added.length>0||r.removed.length>0||r.updated.length>0?l.Modified:l.None,remoteChange:f!==null?l.Modified:l.None}}else return{content:e.remoteContent,local:{added:[],removed:[],updated:[]},remote:null,localChange:l.None,remoteChange:l.None}}async applyResult(e,t,o,i){const{local:n,remote:r,localChange:f,remoteChange:g}=o[0][1];f===l.None&&g===l.None&&this.logService.info(`${this.syncResourceLogLabel}: No changes found during synchronizing profiles.`);const c=o[0][0].remoteProfiles||[];if(c.length+(r?.added.length??0)-(r?.removed.length??0)>20)throw new k("Too many profiles to sync. Please remove some profiles and try again.",H.LocalTooManyProfiles);if(f!==l.None&&(await this.backupLocal(v(this.getLocalUserDataProfiles(),!1)),await Promise.all(n.removed.map(async a=>{this.logService.trace(`${this.syncResourceLogLabel}: Removing '${a.name}' profile...`),await this.userDataProfilesService.removeProfile(a),this.logService.info(`${this.syncResourceLogLabel}: Removed profile '${a.name}'.`)})),await Promise.all(n.added.map(async a=>{this.logService.trace(`${this.syncResourceLogLabel}: Creating '${a.name}' profile...`),await this.userDataProfilesService.createProfile(a.id,a.name,{icon:a.icon,useDefaultFlags:a.useDefaultFlags}),this.logService.info(`${this.syncResourceLogLabel}: Created profile '${a.name}'.`)})),await Promise.all(n.updated.map(async a=>{const y=this.userDataProfilesService.profiles.find(s=>s.id===a.id);y?(this.logService.trace(`${this.syncResourceLogLabel}: Updating '${a.name}' profile...`),await this.userDataProfilesService.updateProfile(y,{name:a.name,icon:a.icon,useDefaultFlags:a.useDefaultFlags}),this.logService.info(`${this.syncResourceLogLabel}: Updated profile '${a.name}'.`)):this.logService.info(`${this.syncResourceLogLabel}: Could not find profile with id '${a.id}' to update.`)}))),g!==l.None){this.logService.trace(`${this.syncResourceLogLabel}: Updating remote profiles...`);const a=[],y=c.length+(r?.added.length??0)<=20;if(y)for(const s of r?.added||[]){const d=await this.userDataSyncStoreService.createCollection(this.syncHeaders);a.push(d),c.push({id:s.id,name:s.name,collection:d,icon:s.icon,useDefaultFlags:s.useDefaultFlags})}else this.logService.info(`${this.syncResourceLogLabel}: Could not create remote profiles as there are too many profiles.`);for(const s of r?.removed||[])c.splice(c.findIndex(({id:d})=>s.id===d),1);for(const s of r?.updated||[]){const d=c.find(({id:I})=>s.id===I);d&&c.splice(c.indexOf(d),1,{...d,id:s.id,name:s.name,icon:s.icon,useDefaultFlags:s.useDefaultFlags})}try{e=await this.updateRemoteProfiles(c,i?null:e.ref),this.logService.info(`${this.syncResourceLogLabel}: Updated remote profiles.${y&&r?.added.length?` Added: ${JSON.stringify(r.added.map(s=>s.name))}.`:""}${r?.updated.length?` Updated: ${JSON.stringify(r.updated.map(s=>s.name))}.`:""}${r?.removed.length?` Removed: ${JSON.stringify(r.removed.map(s=>s.name))}.`:""}`)}catch(s){if(a.length){this.logService.info(`${this.syncResourceLogLabel}: Failed to update remote profiles. Cleaning up added collections...`);for(const d of a)await this.userDataSyncStoreService.deleteCollection(d,this.syncHeaders)}throw s}for(const s of r?.removed||[])await this.userDataSyncStoreService.deleteCollection(s.collection,this.syncHeaders)}t?.ref!==e.ref&&(this.logService.trace(`${this.syncResourceLogLabel}: Updating last synchronized profiles...`),await this.updateLastSyncUserData(e),this.logService.info(`${this.syncResourceLogLabel}: Updated last synchronized profiles.`))}async updateRemoteProfiles(e,t){return this.updateRemoteUserData(this.stringifyRemoteProfiles(e),t)}async hasLocalData(){return this.getLocalUserDataProfiles().length>0}async resolveContent(e){if(this.extUri.isEqual(this.remoteResource,e)||this.extUri.isEqual(this.baseResource,e)||this.extUri.isEqual(this.localResource,e)||this.extUri.isEqual(this.acceptedResource,e)){const t=await this.resolvePreviewContent(e);return t&&U(JSON.parse(t),{})}return null}getLocalUserDataProfiles(){return this.userDataProfilesService.profiles.filter(e=>!e.isDefault&&!e.isTransient)}stringifyRemoteProfiles(e){return JSON.stringify([...e].sort((t,o)=>t.name.localeCompare(o.name)))}};P=D([u(2,x),u(3,b),u(4,M),u(5,$),u(6,J),u(7,T),u(8,A),u(9,w),u(10,O),u(11,N),u(12,E)],P);function v(m,h){const e=[...m].sort((t,o)=>t.name.localeCompare(o.name)).map(t=>({id:t.id,name:t.name}));return h?U(e,{}):JSON.stringify(e)}function p(m){return JSON.parse(m.content)}export{P as UserDataProfilesManifestSynchroniser,p as parseUserDataProfilesManifest,v as stringifyLocalProfiles};
