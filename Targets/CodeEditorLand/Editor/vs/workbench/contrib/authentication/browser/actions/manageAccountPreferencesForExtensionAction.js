var S=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var g=(l,t,i,c)=>{for(var e=c>1?void 0:c?P(t,i):t,r=l.length-1,n;r>=0;r--)(n=l[r])&&(e=(c?n(t,i,e):n(e))||e);return c&&e&&S(t,i,e),e},a=(l,t)=>(i,c)=>t(i,c,l);import{Event as _}from"../../../../../base/common/event.js";import{DisposableStore as y}from"../../../../../base/common/lifecycle.js";import{localize as u,localize2 as I}from"../../../../../nls.js";import{Action2 as Q}from"../../../../../platform/actions/common/actions.js";import{IInstantiationService as w}from"../../../../../platform/instantiation/common/instantiation.js";import{ILogService as b}from"../../../../../platform/log/common/log.js";import{IQuickInputService as x}from"../../../../../platform/quickinput/common/quickInput.js";import{IAuthenticationUsageService as E}from"../../../../services/authentication/browser/authenticationUsageService.js";import{IAuthenticationExtensionsService as U,IAuthenticationService as N}from"../../../../services/authentication/common/authentication.js";import{IExtensionService as D}from"../../../../services/extensions/common/extensions.js";class Z extends Q{constructor(){super({id:"_manageAccountPreferencesForExtension",title:I("manageAccountPreferenceForExtension","Manage Extension Account Preferences"),category:I("accounts","Accounts"),f1:!1})}run(t,i,c){return t.get(w).createInstance(d).run(i,c)}}let d=class{constructor(t,i,c,e,r,n){this._authenticationService=t;this._quickInputService=i;this._authenticationUsageService=c;this._authenticationExtensionsService=e;this._extensionService=r;this._logService=n}async run(t,i){if(!t)return;const c=await this._extensionService.getExtension(t);if(!c)throw new Error(`No extension with id ${t}`);const e=new Array,r=new Map;if(i)e.push(i),r.set(i,await this._authenticationService.getAccounts(i));else for(const s of this._authenticationService.getProviderIds()){const o=await this._authenticationService.getAccounts(s);for(const p of o)if(this._authenticationUsageService.readAccountUsages(s,p.label).find(m=>m.extensionId===t.toLowerCase())){e.push(s),r.set(s,o);break}}let n=e[0];if(e.length>1&&(n=(await this._quickInputService.pick(e.map(o=>({label:this._authenticationService.getProvider(o).label,id:o})),{placeHolder:u("selectProvider","Select an authentication provider to manage account preferences for"),title:u("pickAProviderTitle","Manage Extension Account Preferences")}))?.id),!n)return;const h=this._authenticationExtensionsService.getAccountPreference(t,n),f=r.get(n),v=this._getItems(f,n,h);if(this._authenticationService.getProvider(n).supportsMultipleAccounts){const s=f.flatMap(o=>this._authenticationUsageService.readAccountUsages(n,o.label).find(p=>p.extensionId===t.toLowerCase())).filter(o=>!!o).sort((o,p)=>p.lastUsed-o.lastUsed)?.[0]?.scopes;s&&(v.push({type:"separator"}),v.push({providerId:n,scopes:s,label:u("use new account","Use a new account...")}))}const A=new y,k=this._createQuickPick(A,t,c.displayName??c.name);if(v.length===0){A.add(this._handleNoAccounts(k));return}k.items=v,k.show()}_createQuickPick(t,i,c){const e=t.add(this._quickInputService.createQuickPick({useSeparators:!0}));return t.add(e.onDidHide(()=>{t.dispose()})),e.placeholder=u("placeholder","Manage '{0}' account preferences...",c),e.title=u("title","'{0}' Account Preferences For This Workspace",c),e.sortByLabel=!1,t.add(e.onDidAccept(async()=>{e.hide(),await this._accept(i,e.selectedItems)})),e}_getItems(t,i,c){return t.map(e=>c===e.label?{label:e.label,account:e,providerId:i,description:u("currentAccount","Current account"),picked:!0}:{label:e.label,account:e,providerId:i})}_handleNoAccounts(t){return t.validationMessage=u("noAccounts","No accounts are currently used by this extension."),t.buttons=[this._quickInputService.backButton],t.show(),_.filter(t.onDidTriggerButton,i=>i===this._quickInputService.backButton)(()=>this.run())}async _accept(t,i){for(const c of i){let e;if(c.account)e=c.account;else try{e=(await this._authenticationService.createSession(c.providerId,c.scopes)).account}catch(h){this._logService.error(h);continue}const r=c.providerId;this._authenticationExtensionsService.getAccountPreference(t,r)!==e.label&&this._authenticationExtensionsService.updateAccountPreference(t,r,e)}}};d=g([a(0,N),a(1,x),a(2,E),a(3,U),a(4,D),a(5,b)],d);export{Z as ManageAccountPreferencesForExtensionAction};
