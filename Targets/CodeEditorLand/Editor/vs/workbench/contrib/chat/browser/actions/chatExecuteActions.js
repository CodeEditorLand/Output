import{Codicon as _}from"../../../../../base/common/codicons.js";import{KeyCode as s,KeyMod as g}from"../../../../../base/common/keyCodes.js";import"../../../../../editor/browser/editorExtensions.js";import{localize2 as u}from"../../../../../nls.js";import{Action2 as l,MenuId as a,MenuRegistry as v,registerAction2 as h}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as t}from"../../../../../platform/contextkey/common/contextkey.js";import{KeybindingWeight as E}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{ChatAgentLocation as p,IChatAgentService as N}from"../../common/chatAgents.js";import{CONTEXT_CHAT_INPUT_HAS_AGENT as k,CONTEXT_CHAT_INPUT_HAS_TEXT as A,CONTEXT_CHAT_LOCATION as d,CONTEXT_CHAT_REQUEST_IN_PROGRESS as C,CONTEXT_IN_CHAT_INPUT as x,CONTEXT_LANGUAGE_MODELS_ARE_USER_SELECTABLE as O,CONTEXT_PARTICIPANT_SUPPORTS_MODEL_PICKER as M}from"../../common/chatContextKeys.js";import{applyingChatEditsContextKey as T,IChatEditingService as P}from"../../common/chatEditingService.js";import{chatAgentLeader as R,extractAgentAndCommand as W}from"../../common/chatParserTypes.js";import{IChatService as D}from"../../common/chatService.js";import{IChatWidgetService as m}from"../chat.js";import{CHAT_CATEGORY as y}from"./chatActions.js";class I extends l{static ID="workbench.action.chat.submit";constructor(){super({id:I.ID,title:u("interactive.submit.label","Send"),f1:!1,category:y,icon:_.send,precondition:t.and(A,C.negate(),t.or(d.notEqualsTo(p.EditingSession),t.and(d.isEqualTo(p.EditingSession),T.toNegated()))),keybinding:{when:x,primary:s.Enter,weight:E.EditorContrib},menu:[{id:a.ChatExecuteSecondary,group:"group_1"},{id:a.ChatExecute,order:4,when:t.and(C.negate(),t.or(d.notEqualsTo(p.EditingSession),t.and(d.isEqualTo(p.EditingSession),T.toNegated()))),group:"navigation"}]})}run(n,...c){const i=c[0],r=n.get(m);(i?.widget??r.lastFocusedWidget)?.acceptInput(i?.inputValue)}}const H="workbench.action.chat.pickModel";v.appendMenuItem(a.ChatExecute,{command:{id:H,title:u("chat.pickModel.label","Pick Model")},order:3,group:"navigation",when:t.and(O,M,t.equals(d.key,"panel"))});class f extends l{static ID="workbench.action.chat.submitSecondaryAgent";constructor(){super({id:f.ID,title:u({key:"actions.chat.submitSecondaryAgent",comment:["Send input from the chat input box to the secondary agent"]},"Submit to Secondary Agent"),precondition:t.and(A,k.negate(),C.negate()),keybinding:{when:x,primary:g.CtrlCmd|s.Enter,weight:E.EditorContrib},menu:{id:a.ChatExecuteSecondary,group:"group_1"}})}run(n,...c){const i=c[0],e=n.get(N).getSecondaryAgent();if(!e)return;const S=n.get(m),o=i?.widget??S.lastFocusedWidget;o&&(W(o.parsedInput).agentPart?o.acceptInput():(o.lastSelectedAgent=e,o.acceptInputWithPrefix(`${R}${e.name}`)))}}class L extends l{constructor(){super({id:"workbench.action.chat.sendToNewChat",title:u("chat.newChat.label","Send to New Chat"),precondition:t.and(C.negate(),A),category:y,f1:!1,menu:{id:a.ChatExecuteSecondary,group:"group_2"},keybinding:{weight:E.WorkbenchContrib,primary:g.CtrlCmd|g.Shift|s.Enter,when:x}})}async run(n,...c){const i=c[0],r=n.get(m),e=i?.widget??r.lastFocusedWidget;e&&(e.clear(),e.acceptInput(i?.inputValue))}}class w extends l{static ID="workbench.action.chat.cancel";constructor(){super({id:w.ID,title:u("interactive.cancel.label","Cancel"),f1:!1,category:y,icon:_.stopCircle,menu:{id:a.ChatExecute,when:t.or(C,t.and(d.isEqualTo(p.EditingSession),T)),order:4,group:"navigation"},keybinding:{weight:E.WorkbenchContrib,primary:g.CtrlCmd|s.Escape,win:{primary:g.Alt|s.Backspace}}})}run(n,...c){const i=c[0],r=n.get(m),e=i?.widget??r.lastFocusedWidget;if(!e)return;const S=n.get(D);e.viewModel&&S.cancelCurrentRequestForSession(e.viewModel.sessionId);const o=n.get(P),b=o.currentEditingSession;b&&b?.chatSessionId===e.viewModel?.sessionId&&o.currentAutoApplyOperation?.cancel()}}function ne(){h(I),h(w),h(L),h(f)}export{w as CancelAction,H as ChatModelPickerActionId,f as ChatSubmitSecondaryAgentAction,I as SubmitAction,ne as registerChatExecuteActions};
