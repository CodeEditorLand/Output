import{localize2 as a}from"../../../../../nls.js";import{Action2 as w,MenuId as p,registerAction2 as u}from"../../../../../platform/actions/common/actions.js";import{ContextKeyExpr as m}from"../../../../../platform/contextkey/common/contextkey.js";import"../../../../../platform/instantiation/common/instantiation.js";import{ActiveEditorContext as T}from"../../../../common/contextkeys.js";import{CHAT_CATEGORY as v}from"./chatActions.js";import{CHAT_VIEW_ID as s,IChatWidgetService as W}from"../chat.js";import{ChatEditor as V}from"../chatEditor.js";import{ChatEditorInput as d}from"../chatEditorInput.js";import"../chatViewPane.js";import{CONTEXT_CHAT_ENABLED as l}from"../../common/chatContextKeys.js";import{IEditorGroupsService as b}from"../../../../services/editor/common/editorGroupsService.js";import{ACTIVE_GROUP as E,AUX_WINDOW_GROUP as f,IEditorService as I}from"../../../../services/editor/common/editorService.js";import{IViewsService as y}from"../../../../services/views/common/viewsService.js";import{isChatViewTitleActionContext as S}from"../../common/chatActions.js";var x=(e=>(e.Editor="Editor",e.Window="Window",e))(x||{});function Z(){u(class extends w{constructor(){super({id:"workbench.action.chat.openInEditor",title:a("chat.openInEditor.label","Open Chat in Editor"),category:v,precondition:l,f1:!0,menu:{id:p.ViewTitle,when:m.equals("view",s),order:0}})}async run(o,...e){const t=e[0];h(o,"Editor",S(t)?t.sessionId:void 0)}}),u(class extends w{constructor(){super({id:"workbench.action.chat.openInNewWindow",title:a("chat.openInNewWindow.label","Open Chat in New Window"),category:v,precondition:l,f1:!0,menu:{id:p.ViewTitle,when:m.equals("view",s),order:0}})}async run(o,...e){const t=e[0];h(o,"Window",S(t)?t.sessionId:void 0)}}),u(class extends w{constructor(){super({id:"workbench.action.chat.openInSidebar",title:a("interactiveSession.openInSidebar.label","Open Chat in Side Bar"),category:v,precondition:l,f1:!0,menu:[{id:p.EditorTitle,order:0,when:T.isEqualTo(d.EditorID)}]})}async run(o,...e){return N(o)}})}async function h(i,o,e){const t=i.get(W),r=i.get(I),n=(e?t.getWidgetBySessionId(e):void 0)??t.lastFocusedWidget;if(!n||!("viewId"in n.viewContext)){await r.openEditor({resource:d.getNewEditorUri(),options:{pinned:!0}},o==="Window"?f:E);return}const c=n.viewModel;if(!c)return;const g=c.sessionId,C=n.getViewState();n.clear();const A={target:{sessionId:g},pinned:!0,viewState:C};await r.openEditor({resource:d.getNewEditorUri(),options:A},o==="Window"?f:E)}async function N(i){const o=i.get(y),e=i.get(I),t=i.get(b),r=e.activeEditorPane,n=r?.input;let c;r instanceof V&&n instanceof d&&n.sessionId?(await e.closeEditor({editor:r.input,groupId:t.activeGroup.id}),c=await o.openView(s),c.loadSession(n.sessionId,r.getViewState())):c=await o.openView(s),c.focus()}export{Z as registerMoveActions};
