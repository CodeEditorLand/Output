var We=Object.defineProperty;var Ue=Object.getOwnPropertyDescriptor;var K=(c,e,t,i)=>{for(var o=i>1?void 0:i?Ue(e,t):e,n=c.length-1,r;n>=0;n--)(r=c[n])&&(o=(i?r(e,t,o):r(o))||o);return i&&o&&We(e,t,o),o},u=(c,e)=>(t,i)=>e(t,i,c);import"./media/voiceChatActions.css";import{RunOnceScheduler as se,disposableTimeout as ae,raceCancellation as ce}from"../../../../../base/common/async.js";import{CancellationTokenSource as X}from"../../../../../base/common/cancellation.js";import{Codicon as O}from"../../../../../base/common/codicons.js";import"../../../../../base/common/color.js";import{Event as $}from"../../../../../base/common/event.js";import{KeyCode as P,KeyMod as Y}from"../../../../../base/common/keyCodes.js";import{Disposable as de,DisposableStore as he,MutableDisposable as Ge,toDisposable as ue}from"../../../../../base/common/lifecycle.js";import{isNumber as ze}from"../../../../../base/common/types.js";import{getCodeEditor as pe}from"../../../../../editor/browser/editorBrowser.js";import{EditorContextKeys as le}from"../../../../../editor/common/editorContextKeys.js";import{localize as p,localize2 as b}from"../../../../../nls.js";import{Action2 as w,MenuId as y}from"../../../../../platform/actions/common/actions.js";import{CommandsRegistry as Be,ICommandService as ve}from"../../../../../platform/commands/common/commands.js";import{IConfigurationService as Q}from"../../../../../platform/configuration/common/configuration.js";import{Extensions as Xe}from"../../../../../platform/configuration/common/configurationRegistry.js";import{ContextKeyExpr as a,IContextKeyService as ge,RawContextKey as M}from"../../../../../platform/contextkey/common/contextkey.js";import{IInstantiationService as T}from"../../../../../platform/instantiation/common/instantiation.js";import{IKeybindingService as Se}from"../../../../../platform/keybinding/common/keybinding.js";import{KeybindingWeight as N}from"../../../../../platform/keybinding/common/keybindingsRegistry.js";import{ProgressLocation as $e}from"../../../../../platform/progress/common/progress.js";import{Registry as Ye}from"../../../../../platform/registry/common/platform.js";import{contrastBorder as Ce,focusBorder as Qe}from"../../../../../platform/theme/common/colorRegistry.js";import{spinningLoading as je,syncing as Je}from"../../../../../platform/theme/common/iconRegistry.js";import{ColorScheme as Ie}from"../../../../../platform/theme/common/theme.js";import{registerThemingParticipant as Ze}from"../../../../../platform/theme/common/themeService.js";import{ActiveEditorContext as et}from"../../../../common/contextkeys.js";import"../../../../common/contributions.js";import{ACTIVITY_BAR_BADGE_BACKGROUND as tt}from"../../../../common/theme.js";import{AccessibilityVoiceSettingId as fe,SpeechTimeoutDefault as it,accessibilityConfigurationNodeBase as ot}from"../../../accessibility/browser/accessibilityConfiguration.js";import{CHAT_CATEGORY as D}from"../../browser/actions/chatActions.js";import"../../browser/actions/chatExecuteActions.js";import{IChatWidgetService as j,IQuickChatService as nt,showChatView as me}from"../../browser/chat.js";import{ChatAgentLocation as S,IChatAgentService as be}from"../../common/chatAgents.js";import{CONTEXT_CHAT_REQUEST_IN_PROGRESS as _,CONTEXT_IN_CHAT_INPUT as rt,CONTEXT_CHAT_ENABLED as st,CONTEXT_RESPONSE as q,CONTEXT_RESPONSE_FILTERED as F,CONTEXT_CHAT_LOCATION as x}from"../../common/chatContextKeys.js";import{KEYWORD_ACTIVIATION_SETTING_ID as H}from"../../common/chatService.js";import{ChatResponseViewModel as at,isResponseVM as ye}from"../../common/chatViewModel.js";import{IVoiceChatService as ct,VoiceChatInProgress as Te}from"../../common/voiceChatService.js";import{IExtensionsWorkbenchService as dt}from"../../../extensions/common/extensions.js";import{InlineChatController as ht}from"../../../inlineChat/browser/inlineChatController.js";import{CTX_INLINE_CHAT_FOCUSED as ut,MENU_INLINE_CHAT_WIDGET_SECONDARY as Ae}from"../../../inlineChat/common/inlineChat.js";import{NOTEBOOK_EDITOR_FOCUSED as we}from"../../../notebook/common/notebookContextKeys.js";import{HasSpeechProvider as L,ISpeechService as J,KeywordRecognitionStatus as pt,SpeechToTextInProgress as lt,SpeechToTextStatus as W,TextToSpeechStatus as xe,TextToSpeechInProgress as vt}from"../../../speech/common/speechService.js";import{ITerminalService as Ee}from"../../../terminal/browser/terminal.js";import{TerminalChatContextKeys as gt,TerminalChatController as U}from"../../../terminal/terminalContribChatExports.js";import{IEditorService as ke}from"../../../../services/editor/common/editorService.js";import{IHostService as St}from"../../../../services/host/browser/host.js";import{IWorkbenchLayoutService as Ct,Parts as E}from"../../../../services/layout/browser/layoutService.js";import{IStatusbarService as It,StatusbarAlignment as ft}from"../../../../services/statusbar/browser/statusbar.js";import{IViewsService as Ve}from"../../../../services/views/common/viewsService.js";import"../../common/chatModel.js";import{IAccessibilityService as mt}from"../../../../../platform/accessibility/common/accessibility.js";import{renderStringAsPlaintext as bt}from"../../../../../base/browser/markdownRenderer.js";const yt=["view","inline","terminal","quick","editor"],G=y.for("terminalChatInput"),k=a.and(st,L),Z=a.or(ut,rt),Tt=a.or(_,gt.requestActive),De=new M("scopedVoiceChatGettingReady",!1,{type:"boolean",description:p("scopedVoiceChatGettingReady","True when getting ready for receiving voice input from the microphone for voice chat. This key is only defined scoped, per chat context.")}),Re=new M("scopedVoiceChatInProgress",void 0,{type:"string",description:p("scopedVoiceChatInProgress","Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.")}),R=a.or(...yt.map(c=>Re.isEqualTo(c)));var At=(i=>(i[i.Stopped=1]="Stopped",i[i.GettingReady=2]="GettingReady",i[i.Started=3]="Started",i))(At||{});class m{static async create(e,t){const i=e.get(j),o=e.get(nt),n=e.get(Ct),r=e.get(ke),s=e.get(Ee),h=e.get(Ve);switch(t){case"focused":return m.doCreateForFocusedChat(s,i,n)??m.create(e,"view");case"view":{const d=await me(h);if(d)return m.doCreateForChatWidget("view",d);break}case"inline":{const d=pe(r.activeTextEditorControl);if(d){const I=ht.get(d);if(I)return I.joinCurrentRun()||I.run(),m.doCreateForChatWidget("inline",I.chatWidget)}break}case"quick":return o.open(),m.create(e,"focused")}}static doCreateForFocusedChat(e,t,i){const o=e.activeInstance;if(o){const r=U.activeChatController||U.get(o);if(r?.hasFocus())return m.doCreateForTerminalChat(r)}const n=t.lastFocusedWidget;if(n?.hasInputFocus()){let r;return i.hasFocus(E.EDITOR_PART)?r=n.location===S.Panel?"editor":"inline":[E.SIDEBAR_PART,E.PANEL_PART,E.AUXILIARYBAR_PART,E.TITLEBAR_PART,E.STATUSBAR_PART,E.BANNER_PART,E.ACTIVITYBAR_PART].some(s=>i.hasFocus(s))?r="view":r="quick",m.doCreateForChatWidget(r,n)}}static createChatContextKeyController(e,t){const i=De.bindTo(e),o=Re.bindTo(e);return n=>{switch(n){case 2:i.set(!0),o.reset();break;case 3:i.reset(),o.set(t);break;case 1:i.reset(),o.reset();break}}}static doCreateForChatWidget(e,t){return{context:e,scopedContextKeyService:t.scopedContextKeyService,onDidAcceptInput:t.onDidAcceptInput,onDidHideInput:t.onDidHide,focusInput:()=>t.focusInput(),acceptInput:()=>t.acceptInput(void 0,!0),updateInput:i=>t.setInput(i),getInput:()=>t.getInput(),setInputPlaceholder:i=>t.setInputPlaceholder(i),clearInputPlaceholder:()=>t.resetInputPlaceholder(),updateState:m.createChatContextKeyController(t.scopedContextKeyService,e)}}static doCreateForTerminalChat(e){const t="terminal";return{context:t,scopedContextKeyService:e.scopedContextKeyService,onDidAcceptInput:e.onDidAcceptInput,onDidHideInput:e.onDidHide,focusInput:()=>e.focus(),acceptInput:()=>e.acceptInput(!0),updateInput:i=>e.updateInput(i,!1),getInput:()=>e.getInput(),setInputPlaceholder:i=>e.setPlaceholder(i),clearInputPlaceholder:()=>e.resetPlaceholder(),updateState:m.createChatContextKeyController(e.scopedContextKeyService,t)}}}let l=class{constructor(e,t,i,o){this.voiceChatService=e;this.configurationService=t;this.instantiationService=i;this.accessibilityService=o}static instance=void 0;static getInstance(e){return l.instance||(l.instance=e.createInstance(l)),l.instance}currentVoiceChatSession=void 0;voiceChatSessionIds=0;async start(e,t){this.stop(),v.getInstance(this.instantiationService).stop();let i=!1;const o=++this.voiceChatSessionIds,n=this.currentVoiceChatSession={id:o,controller:e,hasRecognizedInput:!1,disposables:new he,setTimeoutDisabled:V=>{i=V},accept:()=>this.accept(o),stop:()=>this.stop(o,e.context)},r=new X;n.disposables.add(ue(()=>r.dispose(!0))),n.disposables.add(e.onDidAcceptInput(()=>this.stop(o,e.context))),n.disposables.add(e.onDidHideInput(()=>this.stop(o,e.context))),e.focusInput(),e.updateState(2);const s=await this.voiceChatService.createVoiceChatSession(r.token,{usesAgents:e.context!=="inline",model:t?.widget?.viewModel?.model});let h=e.getInput(),d=this.configurationService.getValue(fe.SpeechTimeout);(!ze(d)||d<0)&&(d=it);const I=n.disposables.add(new se(()=>this.accept(o),d));return n.disposables.add(s.onDidChange(({status:V,text:A,waitingForInput:Fe})=>{if(!r.token.isCancellationRequested)switch(V){case W.Started:this.onDidSpeechToTextSessionStart(e,n.disposables);break;case W.Recognizing:A&&(n.hasRecognizedInput=!0,n.controller.updateInput(h?[h,A].join(" "):A),d>0&&t?.voice?.disableTimeout!==!0&&!i&&I.cancel());break;case W.Recognized:A&&(n.hasRecognizedInput=!0,h=h?[h,A].join(" "):A,n.controller.updateInput(h),d>0&&t?.voice?.disableTimeout!==!0&&!Fe&&!i&&I.schedule());break;case W.Stopped:this.stop(n.id,e.context);break}})),n}onDidSpeechToTextSessionStart(e,t){e.updateState(3);let i=0;const o=()=>{i=(i+1)%4,e.setInputPlaceholder(`${p("listening","I'm listening")}${".".repeat(i)}`),n.schedule()},n=t.add(new se(o,500));o()}stop(e=this.voiceChatSessionIds,t){!this.currentVoiceChatSession||this.voiceChatSessionIds!==e||t&&this.currentVoiceChatSession.controller.context!==t||(this.currentVoiceChatSession.controller.clearInputPlaceholder(),this.currentVoiceChatSession.controller.updateState(1),this.currentVoiceChatSession.disposables.dispose(),this.currentVoiceChatSession=void 0)}async accept(e=this.voiceChatSessionIds){if(!this.currentVoiceChatSession||this.voiceChatSessionIds!==e)return;if(!this.currentVoiceChatSession.hasRecognizedInput){this.stop(e,this.currentVoiceChatSession.controller.context);return}const t=this.currentVoiceChatSession.controller,i=await t.acceptInput();if(!i)return;const o=this.configurationService.getValue(fe.AutoSynthesize);if(o==="on"||o==="auto"&&!this.accessibilityService.isScreenReaderOptimized()){let n;t.context==="inline"?n="focused":n=t,v.getInstance(this.instantiationService).start(this.instantiationService.invokeFunction(r=>B.create(r,n,i)))}}};l=K([u(0,ct),u(1,Q),u(2,T),u(3,mt)],l);const Pe=500;async function Ne(c,e,t,i){const o=e.get(T),r=e.get(Se).enableKeybindingHoldMode(c),s=await m.create(e,t);if(!s)return;const h=await l.getInstance(o).start(s,i);let d=!1;const I=ae(()=>{d=!0,h?.setTimeoutDisabled(!0)},Pe);await r,I.dispose(),d&&h.accept()}class ee extends w{constructor(t,i){super(t);this.target=i}run(t,i){return Ne(this.desc.id,t,this.target,i)}}class oe extends ee{static ID="workbench.action.chat.voiceChatInChatView";constructor(){super({id:oe.ID,title:b("workbench.action.chat.voiceChatInView.label","Voice Chat in Chat View"),category:D,precondition:a.and(k,_.negate()),f1:!0},"view")}}class ie extends w{static ID="workbench.action.chat.holdToVoiceChatInChatView";constructor(){super({id:ie.ID,title:b("workbench.action.chat.holdToVoiceChatInChatView.label","Hold to Voice Chat in Chat View"),keybinding:{weight:N.WorkbenchContrib,when:a.and(k,_.negate(),Z?.negate(),le.focus.negate(),we.negate()),primary:Y.CtrlCmd|P.KeyI}})}async run(e,t){const i=e.get(T),o=e.get(Se),n=e.get(Ve),r=o.enableKeybindingHoldMode(ie.ID);let s;const h=ae(async()=>{const d=await m.create(e,"view");d&&(s=await l.getInstance(i).start(d,t),s.setTimeoutDisabled(!0))},Pe);(await me(n))?.focusInput(),await r,h.dispose(),s&&s.accept()}}class z extends ee{static ID="workbench.action.chat.inlineVoiceChat";constructor(){super({id:z.ID,title:b("workbench.action.chat.inlineVoiceChat","Inline Voice Chat"),category:D,precondition:a.and(k,et,_.negate()),f1:!0},"inline")}}class ne extends ee{static ID="workbench.action.chat.quickVoiceChat";constructor(){super({id:ne.ID,title:b("workbench.action.chat.quickVoiceChat.label","Quick Voice Chat"),category:D,precondition:a.and(k,_.negate()),f1:!0},"quick")}}class Ke extends w{static ID="workbench.action.chat.startVoiceChat";constructor(){const e=a.and(L,f.negate(),R?.negate());super({id:Ke.ID,title:b("workbench.action.chat.startVoiceChat.label","Start Voice Chat"),category:D,f1:!0,keybinding:{weight:N.WorkbenchContrib,when:a.and(Z,le.focus.negate(),we.negate()),primary:Y.CtrlCmd|P.KeyI},icon:O.mic,precondition:a.and(k,De.negate(),Tt?.negate(),lt.negate()),menu:[{id:y.ChatInput,when:a.and(a.or(x.isEqualTo(S.Panel),x.isEqualTo(S.EditingSession)),e),group:"navigation",order:3},{id:y.ChatExecute,when:a.and(x.isEqualTo(S.Panel).negate(),e),group:"navigation",order:2},{id:G,when:a.and(L,f.negate(),R?.negate()),group:"navigation",order:-1}]})}async run(e,t){const i=t?.widget;return i&&i.focusInput(),Ne(this.desc.id,e,"focused",t)}}class _e extends w{static ID="workbench.action.chat.stopListening";constructor(){super({id:_e.ID,title:b("workbench.action.chat.stopListening.label","Stop Listening"),category:D,f1:!0,keybinding:{weight:N.WorkbenchContrib+100,primary:P.Escape,when:R},icon:je,precondition:Te,menu:[{id:y.ChatInput,when:a.and(x.isEqualTo(S.Panel),R),group:"navigation",order:3},{id:y.ChatExecute,when:a.and(x.isEqualTo(S.Panel).negate(),R),group:"navigation",order:2},{id:G,when:R,group:"navigation",order:-1}]})}async run(e){l.getInstance(e.get(T)).stop()}}class Le extends w{static ID="workbench.action.chat.stopListeningAndSubmit";constructor(){super({id:Le.ID,title:b("workbench.action.chat.stopListeningAndSubmit.label","Stop Listening and Submit"),category:D,f1:!0,keybinding:{weight:N.WorkbenchContrib,when:a.and(Z,R),primary:Y.CtrlCmd|P.KeyI},precondition:Te})}run(e){l.getInstance(e.get(T)).accept()}}const f=new M("scopedChatSynthesisInProgress",!1,{type:"boolean",description:p("scopedChatSynthesisInProgress","Defined as a location where voice recording from microphone is in progress for voice chat. This key is only defined scoped, per chat context.")});class B{static create(e,t,i){return t==="focused"?B.doCreateForFocusedChat(e,i):{onDidHideChat:t.onDidHideInput,contextKeyService:t.scopedContextKeyService,response:i}}static doCreateForFocusedChat(e,t){const i=e.get(j),o=e.get(ge),r=e.get(Ee).activeInstance;if(r){const h=U.activeChatController||U.get(r);if(h?.hasFocus())return{onDidHideChat:h.onDidHide,contextKeyService:h.scopedContextKeyService,response:t}}let s=i.getWidgetBySessionId(t.session.sessionId);return s?.location===S.Editor&&(s=i.lastFocusedWidget),{onDidHideChat:s?.onDidHide??$.None,contextKeyService:s?.scopedContextKeyService??o,response:t}}}let v=class{constructor(e,t){this.speechService=e;this.instantiationService=t}static instance=void 0;static getInstance(e){return v.instance||(v.instance=e.createInstance(v)),v.instance}activeSession=void 0;async start(e){this.stop(),l.getInstance(this.instantiationService).stop();const t=this.activeSession=new X,i=new he;t.token.onCancellationRequested(()=>i.dispose());const o=await this.speechService.createTextToSpeechSession(t.token,"chat");if(t.token.isCancellationRequested)return;i.add(e.onDidHideChat(()=>this.stop()));const n=f.bindTo(e.contextKeyService);i.add(ue(()=>n.reset())),i.add(o.onDidChange(r=>{switch(r.status){case xe.Started:n.set(!0);break;case xe.Stopped:n.reset();break}}));for await(const r of this.nextChatResponseChunk(e.response,t.token)){if(t.token.isCancellationRequested)return;await ce(o.synthesize(r),t.token)}}async*nextChatResponseChunk(e,t){let i=0,o=!1;do{const n=e.response.toString().length,{chunk:r,offset:s}=this.parseNextChatResponseChunk(e,i);if(i=s,o=e.isComplete,r&&(yield r),t.isCancellationRequested)return;!o&&n===e.response.toString().length&&await ce($.toPromise(e.onDidChange),t)}while(!t.isCancellationRequested&&!o)}parseNextChatResponseChunk(e,t){let i;const o=e.response.toString();if(e.isComplete)i=o.substring(t),t=o.length+1;else{const n=kt(o,t);i=n.chunk,t=n.offset}return{chunk:i&&bt({value:i}),offset:t}}stop(){this.activeSession?.dispose(!0),this.activeSession=void 0}};v=K([u(0,J),u(1,T)],v);const wt=[".","!","?",":"],xt=`
`,Et=" ";function kt(c,e){let t;for(let i=c.length-1;i>=e;i--){const o=c[i],n=c[i+1];if(wt.includes(o)&&n===Et||xt===o){t=c.substring(e,i+1).trim(),e=i+1;break}}return{chunk:t,offset:e}}class Fi extends w{constructor(){super({id:"workbench.action.chat.readChatResponseAloud",title:b("workbench.action.chat.readChatResponseAloud","Read Aloud"),icon:O.unmute,precondition:k,menu:[{id:y.ChatMessageFooter,when:a.and(k,q,f.negate(),F.negate()),group:"navigation",order:-10},{id:Ae,when:a.and(k,q,f.negate(),F.negate()),group:"navigation",order:-10}]})}run(e,...t){const i=e.get(T),o=e.get(j);let n;if(t.length>0){const s=t[0];ye(s)&&(n=s)}else{const s=o.lastFocusedWidget;if(s){const h=s.getFocus();if(h instanceof at)n=h;else{const d=s.viewModel;if(d){const I=d.getItems();for(let V=I.length-1;V>=0;V--){const A=I[V];if(ye(A)){n=A;break}}}}}}if(!n)return;const r=B.create(e,"focused",n.model);v.getInstance(i).start(r)}}class Oe extends w{static ID="workbench.action.speech.stopReadAloud";constructor(){super({id:Oe.ID,icon:Je,title:b("workbench.action.speech.stopReadAloud","Stop Reading Aloud"),f1:!0,category:D,precondition:vt,keybinding:{weight:N.WorkbenchContrib+100,primary:P.Escape,when:f},menu:[{id:y.ChatInput,when:a.and(x.isEqualTo(S.Panel),f),group:"navigation",order:3},{id:y.ChatExecute,when:a.and(x.isEqualTo(S.Panel).negate(),f),group:"navigation",order:2},{id:G,when:f,group:"navigation",order:-1}]})}async run(e){v.getInstance(e.get(T)).stop()}}class Me extends w{static ID="workbench.action.chat.stopReadChatItemAloud";constructor(){super({id:Me.ID,icon:O.mute,title:b("workbench.action.chat.stopReadChatItemAloud","Stop Reading Aloud"),precondition:f,keybinding:{weight:N.WorkbenchContrib+100,primary:P.Escape},menu:[{id:y.ChatMessageFooter,when:a.and(f,q,F.negate()),group:"navigation",order:-10},{id:Ae,when:a.and(f,q,F.negate()),group:"navigation",order:-10}]})}async run(e,...t){v.getInstance(e.get(T)).stop()}}function He(c,e,t){if(!e.hasSpeechProvider||!t.getDefaultAgent(S.Panel))return!1;const i=c.getValue(H);return typeof i=="string"&&i!==g.SETTINGS_VALUE.OFF}let g=class extends de{constructor(t,i,o,n,r,s,h){super();this.speechService=t;this.configurationService=i;this.commandService=o;this.editorService=r;this.hostService=s;this.chatAgentService=h;this._register(n.createInstance(C)),this.registerListeners()}static ID="workbench.contrib.keywordActivation";static SETTINGS_VALUE={OFF:"off",INLINE_CHAT:"inlineChat",QUICK_CHAT:"quickChat",VIEW_CHAT:"chatInView",CHAT_IN_CONTEXT:"chatInContext"};activeSession=void 0;registerListeners(){this._register($.runAndSubscribe(this.speechService.onDidChangeHasSpeechProvider,()=>{this.updateConfiguration(),this.handleKeywordActivation()}));const t=this._register(this.chatAgentService.onDidChangeAgents(()=>{this.chatAgentService.getDefaultAgent(S.Panel)&&(this.updateConfiguration(),this.handleKeywordActivation(),t.dispose())}));this._register(this.speechService.onDidStartSpeechToTextSession(()=>this.handleKeywordActivation())),this._register(this.speechService.onDidEndSpeechToTextSession(()=>this.handleKeywordActivation())),this._register(this.configurationService.onDidChangeConfiguration(i=>{i.affectsConfiguration(H)&&this.handleKeywordActivation()}))}updateConfiguration(){if(!this.speechService.hasSpeechProvider||!this.chatAgentService.getDefaultAgent(S.Panel))return;Ye.as(Xe.Configuration).registerConfiguration({...ot,properties:{[H]:{type:"string",enum:[g.SETTINGS_VALUE.OFF,g.SETTINGS_VALUE.VIEW_CHAT,g.SETTINGS_VALUE.QUICK_CHAT,g.SETTINGS_VALUE.INLINE_CHAT,g.SETTINGS_VALUE.CHAT_IN_CONTEXT],enumDescriptions:[p("voice.keywordActivation.off","Keyword activation is disabled."),p("voice.keywordActivation.chatInView","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the chat view."),p("voice.keywordActivation.quickChat","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the quick chat."),p("voice.keywordActivation.inlineChat","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor if possible."),p("voice.keywordActivation.chatInContext","Keyword activation is enabled and listening for 'Hey Code' to start a voice chat session in the active editor or view depending on keyboard focus.")],description:p("voice.keywordActivation","Controls whether the keyword phrase 'Hey Code' is recognized to start a voice chat session. Enabling this will start recording from the microphone but the audio is processed locally and never sent to a server."),default:"off",tags:["accessibility"]}}})}handleKeywordActivation(){const t=He(this.configurationService,this.speechService,this.chatAgentService)&&!this.speechService.hasActiveSpeechToTextSession;t&&this.activeSession||!t&&!this.activeSession||(t?this.enableKeywordActivation():this.disableKeywordActivation())}async enableKeywordActivation(){const t=this.activeSession=new X,i=await this.speechService.recognizeKeyword(t.token);t.token.isCancellationRequested||t!==this.activeSession||(this.activeSession=void 0,i===pt.Recognized&&(this.hostService.hasFocus&&this.commandService.executeCommand(this.getKeywordCommand()),this.handleKeywordActivation()))}getKeywordCommand(){switch(this.configurationService.getValue(H)){case g.SETTINGS_VALUE.INLINE_CHAT:return z.ID;case g.SETTINGS_VALUE.QUICK_CHAT:return ne.ID;case g.SETTINGS_VALUE.CHAT_IN_CONTEXT:if(pe(this.editorService.activeTextEditorControl)?.hasWidgetFocus())return z.ID;default:return oe.ID}}disableKeywordActivation(){this.activeSession?.dispose(!0),this.activeSession=void 0}dispose(){this.activeSession?.dispose(),super.dispose()}};g=K([u(0,J),u(1,Q),u(2,ve),u(3,T),u(4,ke),u(5,St),u(6,be)],g);let C=class extends de{constructor(t,i,o,n,r){super();this.speechService=t;this.statusbarService=i;this.commandService=o;this.configurationService=n;this.chatAgentService=r;this._register(Be.registerCommand(C.STATUS_COMMAND,()=>this.commandService.executeCommand("workbench.action.openSettings",H))),this.registerListeners(),this.updateStatusEntry()}entry=this._register(new Ge);static STATUS_NAME=p("keywordActivation.status.name","Voice Keyword Activation");static STATUS_COMMAND="keywordActivation.status.command";static STATUS_ACTIVE=p("keywordActivation.status.active","Listening to 'Hey Code'...");static STATUS_INACTIVE=p("keywordActivation.status.inactive","Waiting for voice chat to end...");registerListeners(){this._register(this.speechService.onDidStartKeywordRecognition(()=>this.updateStatusEntry())),this._register(this.speechService.onDidEndKeywordRecognition(()=>this.updateStatusEntry())),this._register(this.configurationService.onDidChangeConfiguration(t=>{t.affectsConfiguration(H)&&this.updateStatusEntry()}))}updateStatusEntry(){He(this.configurationService,this.speechService,this.chatAgentService)?(this.entry.value||this.createStatusEntry(),this.updateStatusLabel()):this.entry.clear()}createStatusEntry(){this.entry.value=this.statusbarService.addEntry(this.getStatusEntryProperties(),"status.voiceKeywordActivation",ft.RIGHT,103)}getStatusEntryProperties(){return{name:C.STATUS_NAME,text:this.speechService.hasActiveKeywordRecognition?"$(mic-filled)":"$(mic)",tooltip:this.speechService.hasActiveKeywordRecognition?C.STATUS_ACTIVE:C.STATUS_INACTIVE,ariaLabel:this.speechService.hasActiveKeywordRecognition?C.STATUS_ACTIVE:C.STATUS_INACTIVE,command:C.STATUS_COMMAND,kind:"prominent",showInAllWindows:!0}}updateStatusLabel(){this.entry.value?.update(this.getStatusEntryProperties())}};C=K([u(0,J),u(1,It),u(2,ve),u(3,Q),u(4,be)],C);const te=new M("installingSpeechProvider",!1,!0);class re extends w{static SPEECH_EXTENSION_ID="ms-vscode.vscode-speech";async run(e){const t=e.get(ge),i=e.get(dt);try{te.bindTo(t).set(!0),await i.install(re.SPEECH_EXTENSION_ID,{justification:this.getJustification(),enable:!0},$e.Notification)}finally{te.bindTo(t).reset()}}}class qe extends re{static ID="workbench.action.chat.installProviderForVoiceChat";constructor(){super({id:qe.ID,title:b("workbench.action.chat.installProviderForVoiceChat.label","Start Voice Chat"),icon:O.mic,precondition:te.negate(),menu:[{id:y.ChatInput,when:a.and(L.negate(),x.isEqualTo(S.Terminal).negate()),group:"navigation",order:3},{id:G,when:L.negate(),group:"navigation",order:-1}]})}getJustification(){return p("installProviderForVoiceChat.justification","Microphone support requires this extension.")}}Ze((c,e)=>{let t,i;c.type===Ie.LIGHT||c.type===Ie.DARK?(t=c.getColor(tt)??c.getColor(Qe),i=t?.transparent(.38)):(t=c.getColor(Ce),i=c.getColor(Ce)),e.addRule(`
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled),
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled) {
			color: ${t};
			outline: 1px solid ${t};
			outline-offset: -1px;
			animation: pulseAnimation 1s infinite;
			border-radius: 50%;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {
			position: absolute;
			outline: 1px solid ${t};
			outline-offset: 2px;
			border-radius: 50%;
			width: 16px;
			height: 16px;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::after,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::after {
			outline: 2px solid ${t};
			outline-offset: -1px;
			animation: pulseAnimation 1500ms cubic-bezier(0.75, 0, 0.25, 1) infinite;
		}

		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-sync.codicon-modifier-spin:not(.disabled)::before,
		.monaco-workbench:not(.reduce-motion) .interactive-input-part .monaco-action-bar .action-label.codicon-loading.codicon-modifier-spin:not(.disabled)::before {
			position: absolute;
			outline: 1px solid ${t};
			outline-offset: 2px;
			border-radius: 50%;
			width: 16px;
			height: 16px;
		}

		@keyframes pulseAnimation {
			0% {
				outline-width: 2px;
			}
			62% {
				outline-width: 5px;
				outline-color: ${i};
			}
			100% {
				outline-width: 2px;
			}
		}
	`)});export{ie as HoldToVoiceChatInChatViewAction,z as InlineVoiceChatAction,qe as InstallSpeechProviderForVoiceChatAction,g as KeywordActivationContribution,ne as QuickVoiceChatAction,Fi as ReadChatResponseAloud,Ke as StartVoiceChatAction,_e as StopListeningAction,Le as StopListeningAndSubmitAction,Oe as StopReadAloud,Me as StopReadChatItemAloud,Pe as VOICE_KEY_HOLD_THRESHOLD,oe as VoiceChatInChatViewAction,kt as parseNextChatResponseChunk};
