var Te=Object.defineProperty;var Ue=Object.getOwnPropertyDescriptor;var W=(e,t,r,i)=>{for(var n=i>1?void 0:i?Ue(t,r):t,d=e.length-1,a;d>=0;d--)(a=e[d])&&(n=(i?a(t,r,n):a(n))||n);return i&&n&&Te(t,r,n),n},L=(e,t)=>(r,i)=>t(r,i,e);import*as o from"../../../../nls.js";import{isWindows as X,OS as ge}from"../../../../base/common/platform.js";import{extname as We,basename as Q,isAbsolute as _e}from"../../../../base/common/path.js";import*as b from"../../../../base/common/resources.js";import{URI as Z}from"../../../../base/common/uri.js";import{toErrorMessage as J}from"../../../../base/common/errorMessage.js";import{Action as ye}from"../../../../base/common/actions.js";import{dispose as he}from"../../../../base/common/lifecycle.js";import{VIEWLET_ID as $e,VIEW_ID as ve,UndoConfirmLevel as _}from"../common/files.js";import{IFileService as $}from"../../../../platform/files/common/files.js";import{EditorResourceAccessor as N,SideBySideEditor as V}from"../../../common/editor.js";import{IQuickInputService as Ve,ItemActivation as He}from"../../../../platform/quickinput/common/quickInput.js";import{IInstantiationService as ee}from"../../../../platform/instantiation/common/instantiation.js";import"../../../../editor/common/model.js";import{IHostService as we}from"../../../services/host/browser/host.js";import{REVEAL_IN_EXPLORER_COMMAND_ID as Ye,SAVE_ALL_IN_GROUP_COMMAND_ID as Ge,NEW_UNTITLED_FILE_COMMAND_ID as Ke}from"./fileConstants.js";import{ITextModelService as Se}from"../../../../editor/common/services/resolverService.js";import{IConfigurationService as O}from"../../../../platform/configuration/common/configuration.js";import{IClipboardService as Ie}from"../../../../platform/clipboard/common/clipboardService.js";import{ILanguageService as je}from"../../../../editor/common/languages/language.js";import{IModelService as qe}from"../../../../editor/common/services/model.js";import{ICommandService as H,CommandsRegistry as Y}from"../../../../platform/commands/common/commands.js";import{RawContextKey as Xe}from"../../../../platform/contextkey/common/contextkey.js";import{Schemas as Qe}from"../../../../base/common/network.js";import{IDialogService as G,getFileNamesMessage as z}from"../../../../platform/dialogs/common/dialogs.js";import{INotificationService as B,Severity as k}from"../../../../platform/notification/common/notification.js";import{IEditorService as A}from"../../../services/editor/common/editorService.js";import{Constants as xe}from"../../../../base/common/uint.js";import{CLOSE_EDITORS_AND_GROUP_COMMAND_ID as Ze}from"../../../browser/parts/editor/editorCommands.js";import{coalesce as te}from"../../../../base/common/arrays.js";import{NewExplorerItem as Je}from"../common/explorerModel.js";import{getErrorMessage as et}from"../../../../base/common/errors.js";import{triggerUpload as tt}from"../../../../base/browser/dom.js";import{IFilesConfigurationService as re}from"../../../services/filesConfiguration/common/filesConfigurationService.js";import{IWorkingCopyService as rt}from"../../../services/workingCopy/common/workingCopyService.js";import"../../../services/workingCopy/common/workingCopy.js";import{timeout as ot}from"../../../../base/common/async.js";import{IWorkingCopyFileService as Ee}from"../../../services/workingCopy/common/workingCopyFileService.js";import{Codicon as be}from"../../../../base/common/codicons.js";import{ThemeIcon as De}from"../../../../base/common/themables.js";import{ViewContainerLocation as it}from"../../../common/views.js";import{IViewsService as nt}from"../../../services/views/common/viewsService.js";import{trim as at,rtrim as Ae}from"../../../../base/common/strings.js";import{IUriIdentityService as st}from"../../../../platform/uriIdentity/common/uriIdentity.js";import{ResourceFileEdit as P}from"../../../../editor/browser/services/bulkEditService.js";import{IExplorerService as D}from"./files.js";import{BrowserFileUpload as lt,FileDownload as ct}from"./fileImportExport.js";import{IPaneCompositePartService as dt}from"../../../services/panecomposite/browser/panecomposite.js";import{IRemoteAgentService as Le}from"../../../services/remote/common/remoteAgentService.js";import{IPathService as Fe}from"../../../services/path/common/pathService.js";import{Action2 as F}from"../../../../platform/actions/common/actions.js";import{ActiveEditorCanToggleReadonlyContext as pt,ActiveEditorContext as ut,EmptyWorkspaceSupportContext as ft}from"../../../common/contextkeys.js";import{KeybindingWeight as mt}from"../../../../platform/keybinding/common/keybindingsRegistry.js";import{KeyChord as gt,KeyCode as Ce,KeyMod as yt}from"../../../../base/common/keyCodes.js";import{Categories as C}from"../../../../platform/action/common/actionCommonCategories.js";import"../../../../platform/action/common/action.js";import{VSBuffer as ht}from"../../../../base/common/buffer.js";import{getPathForFile as oe}from"../../../../platform/dnd/browser/dnd.js";const vt="explorer.newFile",Gr=o.localize2("newFile","New File..."),wt="explorer.newFolder",Kr=o.localize2("newFolder","New Folder..."),jr=o.localize("rename","Rename..."),qr=o.localize("delete","Delete"),Xr=o.localize("copyFile","Copy"),Qr=o.localize("pasteFile","Paste"),Zr=new Xe("fileCopied",!1),St="explorer.download",Jr=o.localize("download","Download..."),It="explorer.upload",eo=o.localize("upload","Upload..."),ze="explorer.confirmDelete",xt=5e6;function ke(e,t){t.message==="string"&&(t=t.message),e.error(J(t,!1))}async function Me(e,t){e&&(e.indexOf("/")>=0||e.indexOf("\\")>=0)&&await t.refresh()}async function ie(e,t,r,i,n,d,a=!1,p=!1){let h;d?h=X?o.localize("deleteButtonLabelRecycleBin","&&Move to Recycle Bin"):o.localize({key:"deleteButtonLabelTrash",comment:["&& denotes a mnemonic"]},"&&Move to Trash"):h=o.localize({key:"deleteButtonLabel",comment:["&& denotes a mnemonic"]},"&&Delete");const f=b.distinctParents(n,s=>s.resource),I=new Set;for(const s of f)for(const c of t.getDirty(s.resource))I.add(c);let v=!0;if(I.size){let s;f.length>1?s=o.localize("dirtyMessageFilesDelete","You are deleting files with unsaved changes. Do you want to continue?"):f[0].isDirectory?I.size===1?s=o.localize("dirtyMessageFolderOneDelete","You are deleting a folder {0} with unsaved changes in 1 file. Do you want to continue?",f[0].name):s=o.localize("dirtyMessageFolderDelete","You are deleting a folder {0} with unsaved changes in {1} files. Do you want to continue?",f[0].name,I.size):s=o.localize("dirtyMessageFileDelete","You are deleting {0} with unsaved changes. Do you want to continue?",f[0].name),(await r.confirm({type:"warning",message:s,detail:o.localize("dirtyWarning","Your changes will be lost if you don't save them."),primaryButton:h})).confirmed?a=!0:v=!1}if(!v)return;let l;const m=f.some(s=>s.isDirectory)?o.localize("irreversible","This action is irreversible!"):f.length>1?o.localize("restorePlural","You can restore these files using the Undo command."):o.localize("restore","You can restore this file using the Undo command.");if(a||d&&i.getValue(ze)===!1)l={confirmed:!0};else if(d){let{message:s,detail:c}=Et(f);c+=c?`
`:"",X?c+=f.length>1?o.localize("undoBinFiles","You can restore these files from the Recycle Bin."):o.localize("undoBin","You can restore this file from the Recycle Bin."):c+=f.length>1?o.localize("undoTrashFiles","You can restore these files from the Trash."):o.localize("undoTrash","You can restore this file from the Trash."),l=await r.confirm({message:s,detail:c,primaryButton:h,checkbox:{label:o.localize("doNotAskAgain","Do not ask me again")}})}else{let{message:s,detail:c}=bt(f);c+=c?`
`:"",c+=m,l=await r.confirm({type:"warning",message:s,detail:c,primaryButton:h})}if(l.confirmed&&l.checkboxChecked===!0&&await i.updateValue(ze,!1),!!l.confirmed)try{const s=f.map(y=>new P(y.resource,void 0,{recursive:!0,folder:y.isDirectory,ignoreIfNotExists:p,skipTrashBin:!d,maxSize:xt})),c={undoLabel:f.length>1?o.localize({key:"deleteBulkEdit",comment:["Placeholder will be replaced by the number of files deleted"]},"Delete {0} files",f.length):o.localize({key:"deleteFileBulkEdit",comment:["Placeholder will be replaced by the name of the file deleted"]},"Delete {0}",f[0].name),progressLabel:f.length>1?o.localize({key:"deletingBulkEdit",comment:["Placeholder will be replaced by the number of files deleted"]},"Deleting {0} files",f.length):o.localize({key:"deletingFileBulkEdit",comment:["Placeholder will be replaced by the name of the file deleted"]},"Deleting {0}",f[0].name)};await e.applyBulkEdit(s,c)}catch(s){let c,y,x;if(d?(c=X?o.localize("binFailed","Failed to delete using the Recycle Bin. Do you want to permanently delete instead?"):o.localize("trashFailed","Failed to delete using the Trash. Do you want to permanently delete instead?"),y=m,x=o.localize({key:"deletePermanentlyButtonLabel",comment:["&& denotes a mnemonic"]},"&&Delete Permanently")):(c=J(s,!1),x=o.localize({key:"retryButtonLabel",comment:["&& denotes a mnemonic"]},"&&Retry")),(await r.confirm({type:"warning",message:c,detail:y,primaryButton:x})).confirmed)return d&&(d=!1),a=!0,p=!0,ie(e,t,r,i,n,d,a,p)}}function Et(e){return Re(e)?{message:o.localize("confirmMoveTrashMessageFilesAndDirectories","Are you sure you want to delete the following {0} files/directories and their contents?",e.length),detail:z(e.map(t=>t.resource))}:e.length>1?e[0].isDirectory?{message:o.localize("confirmMoveTrashMessageMultipleDirectories","Are you sure you want to delete the following {0} directories and their contents?",e.length),detail:z(e.map(t=>t.resource))}:{message:o.localize("confirmMoveTrashMessageMultiple","Are you sure you want to delete the following {0} files?",e.length),detail:z(e.map(t=>t.resource))}:e[0].isDirectory&&!e[0].isSymbolicLink?{message:o.localize("confirmMoveTrashMessageFolder","Are you sure you want to delete '{0}' and its contents?",e[0].name),detail:""}:{message:o.localize("confirmMoveTrashMessageFile","Are you sure you want to delete '{0}'?",e[0].name),detail:""}}function bt(e){return Re(e)?{message:o.localize("confirmDeleteMessageFilesAndDirectories","Are you sure you want to permanently delete the following {0} files/directories and their contents?",e.length),detail:z(e.map(t=>t.resource))}:e.length>1?e[0].isDirectory?{message:o.localize("confirmDeleteMessageMultipleDirectories","Are you sure you want to permanently delete the following {0} directories and their contents?",e.length),detail:z(e.map(t=>t.resource))}:{message:o.localize("confirmDeleteMessageMultiple","Are you sure you want to permanently delete the following {0} files?",e.length),detail:z(e.map(t=>t.resource))}:e[0].isDirectory?{message:o.localize("confirmDeleteMessageFolder","Are you sure you want to permanently delete '{0}' and its contents?",e[0].name),detail:""}:{message:o.localize("confirmDeleteMessageFile","Are you sure you want to permanently delete '{0}'?",e[0].name),detail:""}}function Re(e){const t=e.find(i=>i.isDirectory),r=e.find(i=>!i.isDirectory);return!!t&&!!r}async function Be(e,t,r,i,n,d){let a=typeof n.resource=="string"?n.resource:b.basenameOrAuthority(n.resource),p=b.joinPath(i.resource,a);if(!(d==="disabled"&&!await At(t,r,p))){for(;!n.allowOverwrite&&e.findClosest(p);)d!=="disabled"&&(a=Dt(a,!!n.isDirectory,d)),p=b.joinPath(i.resource,a);return p}}function Dt(e,t,r){if(r==="simple"){let v=e,l="";t||(l=We(e),v=Q(e,l));const m=/^(.+ copy)( \d+)?$/;return m.test(v)?v.replace(m,(s,c,y)=>{const x=y?parseInt(y):1;return x===0?`${c}`:x<xe.MAX_SAFE_SMALL_INTEGER?`${c} ${x+1}`:`${c}${y} copy`})+l:`${v} copy${l}`}const i="[\\.\\-_]",n=xe.MAX_SAFE_SMALL_INTEGER,d=RegExp("(.*"+i+")(\\d+)(\\..*)$");if(!t&&e.match(d))return e.replace(d,(v,l,m,s)=>{const c=parseInt(m);return c<n?l+String(c+1).padStart(m.length,"0")+s:`${l}${m}.1${s}`});const a=RegExp("(\\d+)("+i+".*)(\\..*)$");if(!t&&e.match(a))return e.replace(a,(v,l,m,s)=>{const c=parseInt(l);return c<n?String(c+1).padStart(l.length,"0")+m+s:`${l}${m}.1${s}`});const p=RegExp("(\\d+)(\\..*)$");if(!t&&e.match(p))return e.replace(p,(v,l,m)=>{const s=parseInt(l);return s<n?String(s+1).padStart(l.length,"0")+m:`${l}.1${m}`});const h=e.lastIndexOf(".");if(!t&&h>=0)return`${e.substr(0,h)}.1${e.substr(h)}`;const f=RegExp("(\\d+)$");if(!t&&h===-1&&e.match(f))return e.replace(f,(v,l)=>{const m=parseInt(l);return m<n?String(m+1).padStart(l.length,"0"):`${l}.1`});const I=RegExp("(.*)(\\d*)$");return!t&&h===-1&&e.match(I)?e.replace(I,(v,l,m)=>{let s=parseInt(m);return isNaN(s)&&(s=0),s<n?l+String(s+1).padStart(m.length,"0"):`${l}${m}.1`}):t&&e.match(/(\d+)$/)?e.replace(/(\d+)$/,(v,...l)=>{const m=parseInt(l[0]);return m<n?String(m+1).padStart(l[0].length,"0"):`${l[0]}.1`}):t&&e.match(/^(\d+)/)?e.replace(/^(\d+)(.*)$/,(v,...l)=>{const m=parseInt(l[0]);return m<n?String(m+1).padStart(l[0].length,"0")+l[1]:`${l[0]}${l[1]}.1`}):`${e}.1`}async function At(e,t,r){if(!await e.exists(r))return!0;const{confirmed:n}=await t.confirm({type:k.Warning,message:o.localize("confirmOverwrite","A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?",Q(r.path)),primaryButton:o.localize("replaceButtonLabel","&&Replace")});return n}class ne extends F{static ID="workbench.files.action.compareFileWith";static LABEL=o.localize2("globalCompareFile","Compare Active File With...");constructor(){super({id:ne.ID,title:ne.LABEL,f1:!0,category:C.File,precondition:ut,metadata:{description:o.localize2("compareFileWithMeta","Opens a picker to select a file to diff with the active editor.")}})}async run(t){const r=t.get(A),i=t.get(Se),n=t.get(Ve),d=r.activeEditor,a=N.getOriginalUri(d);if(a&&i.canHandleResource(a)){const p=await n.quickAccess.pick("",{itemActivation:He.SECOND});if(p?.length===1){const h=p[0].resource;Z.isUri(h)&&i.canHandleResource(h)&&r.openEditor({original:{resource:a},modified:{resource:h},options:{pinned:!0}})}}}}class Oe extends F{static ID="workbench.action.toggleAutoSave";constructor(){super({id:Oe.ID,title:o.localize2("toggleAutoSave","Toggle Auto Save"),f1:!0,category:C.File,metadata:{description:o.localize2("toggleAutoSaveDescription","Toggle the ability to save files automatically after typing")}})}run(t){return t.get(re).toggleAutoSave()}}let T=class extends ye{constructor(r,i,n,d,a){super(r,i);this.commandService=n;this.notificationService=d;this.workingCopyService=a;this.lastDirtyState=this.workingCopyService.hasDirty,this.enabled=this.lastDirtyState,this.registerListeners()}lastDirtyState;registerListeners(){this._register(this.workingCopyService.onDidChangeDirty(r=>this.updateEnablement(r)))}updateEnablement(r){const i=r.isDirty()||this.workingCopyService.hasDirty;this.lastDirtyState!==i&&(this.enabled=i,this.lastDirtyState=this.enabled)}async run(r){try{await this.doRun(r)}catch(i){ke(this.notificationService,i)}}};T=W([L(2,H),L(3,B),L(4,rt)],T);class to extends T{static ID="workbench.files.action.saveAllInGroup";static LABEL=o.localize("saveAllInGroup","Save All in Group");get class(){return"explorer-action "+De.asClassName(be.saveAll)}doRun(t){return this.commandService.executeCommand(Ge,{},t)}}let K=class extends ye{constructor(r,i,n){super(r,i,De.asClassName(be.closeAll));this.commandService=n}static ID="workbench.files.action.closeGroup";static LABEL=o.localize("closeGroup","Close Group");run(r){return this.commandService.executeCommand(Ze,{},r)}};K=W([L(2,H)],K);class ae extends F{static ID="workbench.files.action.focusFilesExplorer";static LABEL=o.localize2("focusFilesExplorer","Focus on Files Explorer");constructor(){super({id:ae.ID,title:ae.LABEL,f1:!0,category:C.File,metadata:{description:o.localize2("focusFilesExplorerMetadata","Moves focus to the file explorer view container.")}})}async run(t){await t.get(dt).openPaneComposite($e,it.Sidebar,!0)}}class se extends F{static ID="workbench.files.action.showActiveFileInExplorer";static LABEL=o.localize2("showInExplorer","Reveal Active File in Explorer View");constructor(){super({id:se.ID,title:se.LABEL,f1:!0,category:C.File,metadata:{description:o.localize2("showInExplorerMetadata","Reveals and selects the active file within the explorer view.")}})}async run(t){const r=t.get(H),i=t.get(A),n=N.getOriginalUri(i.activeEditor,{supportSideBySide:V.PRIMARY});n&&r.executeCommand(Ye,n)}}class le extends F{static ID="workbench.action.files.showOpenedFileInNewWindow";static LABEL=o.localize2("openFileInEmptyWorkspace","Open Active File in New Empty Workspace");constructor(){super({id:le.ID,title:le.LABEL,f1:!0,category:C.File,precondition:ft,metadata:{description:o.localize2("openFileInEmptyWorkspaceMetadata","Opens the active file in a new window with no folders open.")}})}async run(t){const r=t.get(A),i=t.get(we),n=t.get(G),d=t.get($),a=N.getOriginalUri(r.activeEditor,{supportSideBySide:V.PRIMARY});a&&(d.hasProvider(a)?i.openWindow([{fileUri:a}],{forceNewWindow:!0}):n.error(o.localize("openFileToShowInNewWindow.unsupportedschema","The active editor must contain an openable resource.")))}}function Pe(e,t,r,i){if(r=Ft(r),!r||r.length===0||/^\s+$/.test(r))return{content:o.localize("emptyFileNameError","A file or folder name must be provided."),severity:k.Error};if(r[0]==="/"||r[0]==="\\")return{content:o.localize("fileNameStartsWithSlashError","A file or folder name cannot start with a slash."),severity:k.Error};const n=te(r.split(/[\\/]/)),d=t.parent;if(r!==t.name){const a=d?.getChild(r);if(a&&a!==t)return{content:o.localize("fileNameExistsError","A file or folder **{0}** already exists at this location. Please choose a different name.",r),severity:k.Error}}if(n.some(a=>!e.hasValidBasename(t.resource,i,a))){const a=r.replace(/\*/g,"\\*");return{content:o.localize("invalidFileNameError","The name **{0}** is not valid as a file or folder name. Please choose a different name.",Lt(a)),severity:k.Error}}return n.some(a=>/^\s|\s$/.test(a))?{content:o.localize("fileNameWhitespaceWarning","Leading or trailing whitespace detected in file or folder name."),severity:k.Warning}:null}function Lt(e){return e?.length>255?`${e.substr(0,255)}...`:e}function Ft(e){return e&&(e=at(e,"	"),e=Ae(e,"/"),e=Ae(e,"\\"),e)}class ce extends F{static ID="workbench.files.action.compareNewUntitledTextFiles";static LABEL=o.localize2("compareNewUntitledTextFiles","Compare New Untitled Text Files");constructor(){super({id:ce.ID,title:ce.LABEL,f1:!0,category:C.File,metadata:{description:o.localize2("compareNewUntitledTextFilesMeta","Opens a new diff editor with two untitled files.")}})}async run(t){await t.get(A).openEditor({original:{resource:void 0},modified:{resource:void 0},options:{pinned:!0}})}}class q extends F{static ID="workbench.files.action.compareWithClipboard";static LABEL=o.localize2("compareWithClipboard","Compare Active File with Clipboard");registrationDisposal;static SCHEME_COUNTER=0;constructor(){super({id:q.ID,title:q.LABEL,f1:!0,category:C.File,keybinding:{primary:gt(yt.CtrlCmd|Ce.KeyK,Ce.KeyC),weight:mt.WorkbenchContrib},metadata:{description:o.localize2("compareWithClipboardMeta","Opens a new diff editor to compare the active file with the contents of the clipboard.")}})}async run(t){const r=t.get(A),i=t.get(ee),n=t.get(Se),d=t.get($),a=N.getOriginalUri(r.activeEditor,{supportSideBySide:V.PRIMARY}),p=`clipboardCompare${q.SCHEME_COUNTER++}`;if(a&&(d.hasProvider(a)||a.scheme===Qe.untitled)){if(!this.registrationDisposal){const I=i.createInstance(U);this.registrationDisposal=n.registerTextModelContentProvider(p,I)}const h=b.basename(a),f=o.localize("clipboardComparisonLabel","Clipboard \u2194 {0}",h);await r.openEditor({original:{resource:a.with({scheme:p})},modified:{resource:a},label:f,options:{pinned:!0}}).finally(()=>{he(this.registrationDisposal),this.registrationDisposal=void 0})}}dispose(){he(this.registrationDisposal),this.registrationDisposal=void 0}}let U=class{constructor(t,r,i){this.clipboardService=t;this.languageService=r;this.modelService=i}async provideTextContent(t){const r=await this.clipboardService.readText();return this.modelService.createModel(r,this.languageService.createByFilepathOrFirstLine(t),t)}};U=W([L(0,Ie),L(1,je),L(2,qe)],U);function Ct(e,t,r){e.prompt(k.Error,J(t,!1),[{label:o.localize("retry","Retry"),run:()=>r()}])}async function Ne(e,t){const r=e.get(D),i=e.get($),n=e.get(O),d=e.get(re),a=e.get(A),p=e.get(nt),h=e.get(B),f=e.get(Le),I=e.get(H),v=e.get(Fe),l=!p.isViewVisible(ve),m=await p.openView(ve,!0);if(l&&await ot(500),!m){if(t)throw new Error("Open a folder or workspace first.");return I.executeCommand(Ke)}const s=r.getContext(!1),c=s.length>0?s[0]:void 0;let y;if(c?y=c.isDirectory?c:c.parent||r.roots[0]:y=r.roots[0],y.isReadonly)throw new Error("Parent folder is readonly.");const x=new Je(i,n,d,y,t);y.addChild(x);const R=async g=>{try{const u=b.joinPath(y.resource,g);g.endsWith("/")&&(t=!0),await r.applyBulkEdit([new P(void 0,u,{folder:t})],{undoLabel:o.localize("createBulkEdit","Create {0}",g),progressLabel:o.localize("creatingBulkEdit","Creating {0}",g),confirmBeforeUndo:!0}),await Me(g,r),t?await r.select(u,!0):await a.openEditor({resource:u,options:{pinned:!0}})}catch(u){Ct(h,u,()=>R(g))}},w=(await f.getEnvironment())?.os??ge;await r.setEditable(x,{validationMessage:g=>Pe(v,x,g,w),onFinish:async(g,u)=>{y.removeChild(x),await r.setEditable(x,null),u&&R(g)}})}Y.registerCommand({id:vt,handler:async e=>{await Ne(e,!1)}}),Y.registerCommand({id:wt,handler:async e=>{await Ne(e,!0)}});const ro=async e=>{const t=e.get(D),r=e.get(B),i=e.get(Le),n=e.get(Fe),d=e.get(O),a=t.getContext(!1),p=a.length>0?a[0]:void 0;if(!p)return;const h=(await i.getEnvironment())?.os??ge;await t.setEditable(p,{validationMessage:f=>Pe(n,p,f,h),onFinish:async(f,I)=>{if(I){const v=p.parent.resource,l=b.joinPath(v,f);if(p.resource.toString()!==l.toString())try{await t.applyBulkEdit([new P(p.resource,l)],{confirmBeforeUndo:d.getValue().explorer.confirmUndo===_.Verbose,undoLabel:o.localize("renameBulkEdit","Rename {0} to {1}",p.name,f),progressLabel:o.localize("renamingBulkEdit","Renaming {0} to {1}",p.name,f)}),await Me(f,t)}catch(m){r.error(m)}}await t.setEditable(p,null)}})},oo=async e=>{const r=e.get(D).getContext(!0).filter(i=>!i.isRoot);r.length&&await ie(e.get(D),e.get(Ee),e.get(G),e.get(O),r,!0)},io=async e=>{const r=e.get(D).getContext(!0).filter(i=>!i.isRoot);r.length&&await ie(e.get(D),e.get(Ee),e.get(G),e.get(O),r,!1)};let M=!1;const no=async e=>{const t=e.get(D),r=t.getContext(!0);r.length>0&&(await t.setToCopy(r,!1),M=!1)},ao=async e=>{const t=e.get(D),r=t.getContext(!0);r.length>0&&(await t.setToCopy(r,!0),M=!0)},zt=async e=>{const t=e.get(D),r=e.get(B),i=e.get(ee),n=t.getContext(!0),d=n.length?n:t.roots,a=i.createInstance(ct);try{await a.download(d)}catch(p){throw r.error(p),p}};Y.registerCommand({id:St,handler:zt});const kt=async e=>{const t=e.get(D),r=e.get(B),i=e.get(ee),n=t.getContext(!1),d=n.length?n[0]:t.roots[0];try{const a=await tt();a&&await i.createInstance(lt).upload(d,a)}catch(a){throw r.error(a),a}};Y.registerCommand({id:It,handler:kt});const so=async(e,t)=>{const r=e.get(Ie),i=e.get(D),n=e.get($),d=e.get(B),a=e.get(A),p=e.get(O),h=e.get(st),f=e.get(G),I=e.get(we),v=i.getContext(!1),m=t&&t.length>0&&p.getValue("explorer.confirmPasteNative"),s=await Mt(t,r,I);if(m&&s.files.length>=1){const w=s.files.length>1?o.localize("confirmMultiPasteNative","Are you sure you want to paste the following {0} items?",s.files.length):o.localize("confirmPasteNative","Are you sure you want to paste '{0}'?",Q(s.type==="paths"?s.files[0].fsPath:s.files[0].name)),g=s.files.length>1?z(s.files.map(S=>{if(Z.isUri(S))return S.fsPath;if(s.type==="paths"){const E=oe(S);if(E)return E}return S.name})):void 0,u=await f.confirm({message:w,detail:g,checkbox:{label:o.localize("doNotAskAgain","Do not ask me again")},primaryButton:o.localize({key:"pasteButtonLabel",comment:["&& denotes a mnemonic"]},"&&Paste")});if(!u.confirmed)return;u.checkboxChecked===!0&&await p.updateValue("explorer.confirmPasteNative",!1)}const c=v.length?v[0]:i.roots[0],y=p.getValue().explorer.incrementalNaming;if(i.getEditable())return;try{let w=[];if(s.type==="paths"){const g=te(await Promise.all(s.files.map(async u=>{if(c.resource.toString()!==u.toString()&&b.isEqualOrParent(c.resource,u))throw new Error(o.localize("fileIsAncestor","File to paste is an ancestor of the destination folder"));const S=await n.stat(u);let E;h.extUri.isEqual(c.resource,u)?E=c.parent:E=c.isDirectory?c:c.parent;const me=await Be(i,n,f,E,{resource:u,isDirectory:S.isDirectory,allowOverwrite:M||y==="disabled"},y);if(me)return{source:u,target:me}})));if(g.length>=1)if(M){const u=g.map(E=>new P(E.source,E.target,{overwrite:y==="disabled"})),S={confirmBeforeUndo:p.getValue().explorer.confirmUndo===_.Verbose,progressLabel:g.length>1?o.localize({key:"movingBulkEdit",comment:["Placeholder will be replaced by the number of files being moved"]},"Moving {0} files",g.length):o.localize({key:"movingFileBulkEdit",comment:["Placeholder will be replaced by the name of the file moved."]},"Moving {0}",b.basenameOrAuthority(g[0].target)),undoLabel:g.length>1?o.localize({key:"moveBulkEdit",comment:["Placeholder will be replaced by the number of files being moved"]},"Move {0} files",g.length):o.localize({key:"moveFileBulkEdit",comment:["Placeholder will be replaced by the name of the file moved."]},"Move {0}",b.basenameOrAuthority(g[0].target))};await i.applyBulkEdit(u,S)}else{const u=g.map(S=>new P(S.source,S.target,{copy:!0,overwrite:y==="disabled"}));await R(g.map(S=>S.target),u)}w=g.map(u=>u.target)}else{const g=te(await Promise.all(s.files.map(async u=>{const S=c.isDirectory?c:c.parent,E=await Be(i,n,f,S,{resource:u.name,isDirectory:!1,allowOverwrite:M||y==="disabled"},y);if(E)return{target:E,edit:new P(void 0,E,{overwrite:y==="disabled",contents:(async()=>ht.wrap(new Uint8Array(await u.arrayBuffer())))()})}})));await R(g.map(u=>u.target),g.map(u=>u.edit)),w=g.map(u=>u.target)}if(w.length){const g=w[0];if(await i.select(g),w.length===1){const u=i.findClosest(g);u&&!u.isDirectory&&await a.openEditor({resource:u.resource,options:{pinned:!0,preserveFocus:!0}})}}}catch(w){ke(d,new Error(o.localize("fileDeleted","The file(s) to paste have been deleted or moved since you copied them. {0}",et(w))))}finally{M&&(await i.setToCopy([],!1),M=!1)}async function R(w,g){const u=p.getValue().explorer.confirmUndo,S={confirmBeforeUndo:u===_.Default||u===_.Verbose,progressLabel:w.length>1?o.localize({key:"copyingBulkEdit",comment:["Placeholder will be replaced by the number of files being copied"]},"Copying {0} files",w.length):o.localize({key:"copyingFileBulkEdit",comment:["Placeholder will be replaced by the name of the file copied."]},"Copying {0}",b.basenameOrAuthority(w[0])),undoLabel:w.length>1?o.localize({key:"copyBulkEdit",comment:["Placeholder will be replaced by the number of files being copied"]},"Paste {0} files",w.length):o.localize({key:"copyFileBulkEdit",comment:["Placeholder will be replaced by the name of the file copied."]},"Paste {0}",b.basenameOrAuthority(w[0]))};await i.applyBulkEdit(g,S)}};async function Mt(e,t,r){if(e&&e.length>0){const i=[...e].map(n=>oe(n)).filter(n=>!!n&&_e(n)).map(n=>Z.file(n));return i.length?{type:"paths",files:i}:{type:"data",files:[...e].filter(n=>!oe(n))}}else return{type:"paths",files:b.distinctParents(await t.readResources(),i=>i)}}const lo=async e=>{const t=e.get(A),i=e.get(D).getContext(!0);await t.openEditors(i.filter(n=>!n.isDirectory).map(n=>({resource:n.resource,options:{preserveFocus:!0}})))};class j extends F{constructor(r,i,n){super({id:r,title:i,f1:!0,category:C.File,precondition:pt});this.newReadonlyState=n}async run(r){const i=r.get(A),n=r.get(re),d=N.getOriginalUri(i.activeEditor,{supportSideBySide:V.PRIMARY});d&&await n.updateReadonly(d,this.newReadonlyState)}}class de extends j{static ID="workbench.action.files.setActiveEditorReadonlyInSession";static LABEL=o.localize2("setActiveEditorReadonlyInSession","Set Active Editor Read-only in Session");constructor(){super(de.ID,de.LABEL,!0)}}class pe extends j{static ID="workbench.action.files.setActiveEditorWriteableInSession";static LABEL=o.localize2("setActiveEditorWriteableInSession","Set Active Editor Writeable in Session");constructor(){super(pe.ID,pe.LABEL,!1)}}class ue extends j{static ID="workbench.action.files.toggleActiveEditorReadonlyInSession";static LABEL=o.localize2("toggleActiveEditorReadonlyInSession","Toggle Active Editor Read-only in Session");constructor(){super(ue.ID,ue.LABEL,"toggle")}}class fe extends j{static ID="workbench.action.files.resetActiveEditorReadonlyInSession";static LABEL=o.localize2("resetActiveEditorReadonlyInSession","Reset Active Editor Read-only in Session");constructor(){super(fe.ID,fe.LABEL,"reset")}}export{Xr as COPY_FILE_LABEL,K as CloseGroupAction,ce as CompareNewUntitledTextFilesAction,q as CompareWithClipboardAction,St as DOWNLOAD_COMMAND_ID,Jr as DOWNLOAD_LABEL,Zr as FileCopiedContext,ae as FocusFilesExplorer,ne as GlobalCompareResourcesAction,qr as MOVE_FILE_TO_TRASH_LABEL,vt as NEW_FILE_COMMAND_ID,Gr as NEW_FILE_LABEL,wt as NEW_FOLDER_COMMAND_ID,Kr as NEW_FOLDER_LABEL,le as OpenActiveFileInEmptyWorkspace,Qr as PASTE_FILE_LABEL,fe as ResetActiveEditorReadonlyInSession,to as SaveAllInGroupAction,de as SetActiveEditorReadonlyInSession,pe as SetActiveEditorWriteableInSession,se as ShowActiveFileInExplorer,jr as TRIGGER_RENAME_LABEL,ue as ToggleActiveEditorReadonlyInSession,Oe as ToggleAutoSaveAction,It as UPLOAD_COMMAND_ID,eo as UPLOAD_LABEL,no as copyFileHandler,ao as cutFileHandler,io as deleteFileHandler,Be as findValidPasteFileTarget,Dt as incrementFileName,oo as moveFileToTrashHandler,lo as openFilePreserveFocusHandler,so as pasteFileHandler,ro as renameHandler,Pe as validateFileName};
